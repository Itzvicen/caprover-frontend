{"version":3,"sources":["utils/CrashReporter.ts","utils/ErrorFactory.ts","utils/Logger.ts","utils/StorageHelper.ts","api/HttpClient.ts","api/ApiManager.ts","utils/Toaster.ts","utils/Utils.ts","containers/global/ApiComponent.tsx","containers/Login.tsx","redux/actions/GlobalActions.ts","containers/global/CenteredSpinner.tsx","containers/global/ClickableLink.tsx","containers/global/ErrorRetry.tsx","containers/global/NewTabLink.tsx","containers/apps/appDetails/AppConfigs.tsx","utils/DomUtils.ts","containers/apps/appDetails/deploy/AppLogsView.tsx","containers/global/Timestamp.tsx","containers/apps/appDetails/deploy/AppVersionTable.tsx","containers/apps/appDetails/deploy/BuildLogsView.tsx","containers/global/PasswordField.tsx","containers/apps/appDetails/deploy/GitRepoForm.tsx","containers/apps/appDetails/deploy/TarUploader.tsx","containers/apps/appDetails/deploy/UploaderPlainTextBase.tsx","containers/apps/appDetails/deploy/UploaderPlainTextCaptainDefinition.tsx","containers/apps/appDetails/deploy/UploaderPlainTextDockerfile.tsx","containers/apps/appDetails/deploy/UploaderPlainTextImageName.tsx","containers/apps/appDetails/deploy/Deployment.tsx","containers/apps/appDetails/HttpSettings.tsx","containers/apps/appDetails/AppDetails.tsx","containers/apps/AppsTable.tsx","containers/apps/CreateNewApp.tsx","containers/apps/Apps.tsx","containers/global/InputJsonifier.tsx","utils/StringSimilarity.ts","containers/apps/oneclick/selector/OneClickGrid.tsx","containers/apps/oneclick/selector/OneClickReposList.tsx","containers/apps/oneclick/selector/OneClickAppSelector.tsx","utils/DockerComposeToServiceOverride.ts","containers/apps/oneclick/OneClickAppDeploymentHelper.ts","containers/apps/oneclick/OneClickAppDeployManager.ts","containers/apps/oneclick/OneClickAppDeployProgress.tsx","containers/apps/oneclick/variables/OneClickVariablesSection.tsx","containers/apps/oneclick/variables/OneClickAppConfigPage.tsx","utils/AppConstants.ts","containers/Dashboard.tsx","containers/global/DarkModeSwitch.tsx","containers/LoggedInCatchAll.tsx","containers/monitoring/LoadBalancerStats.tsx","containers/monitoring/NetDataDescription.tsx","containers/monitoring/NetDataSettingsForm.tsx","containers/monitoring/NetDataInfo.tsx","containers/monitoring/Monitoring.tsx","models/IRegistryInfo.ts","redux/actions/DefaultRegistryActions.ts","containers/nodes/DefaultDockerRegistry.tsx","containers/nodes/DockerRegistriesStaticInfo.tsx","containers/nodes/DockerRegistryAdd.tsx","containers/nodes/DockerRegistryTable.tsx","containers/nodes/DockerRegistries.tsx","containers/nodes/AddNode.tsx","containers/nodes/Nodes.tsx","containers/nodes/Cluster.tsx","containers/settings/BackupCreator.tsx","containers/settings/ChangePass.tsx","containers/settings/ReloadCaptainModal.tsx","containers/settings/CheckUpdate.tsx","containers/settings/UnusedImagesTable.tsx","containers/settings/DiskCleanup.tsx","containers/settings/NginxConfig.tsx","containers/settings/Settings.tsx","containers/PageRoot.tsx","redux/reducers/index.ts","redux/reducers/DefaultRegistryReducer.ts","redux/reducers/GlobalReducer.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["CrashReporter","err","Error","message","instance","undefined","OKAY","OKAY_BUILD_STARTED","OK_PARTIALLY","STATUS_ERROR_GENERIC","STATUS_ERROR_CAPTAIN_NOT_INITIALIZED","STATUS_ERROR_USER_NOT_INITIALIZED","STATUS_ERROR_NOT_AUTHORIZED","STATUS_ERROR_ALREADY_EXIST","STATUS_ERROR_BAD_NAME","STATUS_WRONG_PASSWORD","STATUS_AUTH_TOKEN_INVALID","VERIFICATION_FAILED","ILLEGAL_OPERATION","BUILD_ERROR","ILLEGAL_PARAMETER","NOT_FOUND","AUTHENTICATION_FAILED","STATUS_PASSWORD_BACK_OFF","UNKNOWN_ERROR","status","e","captainStatus","captainMessage","error","captureException","Logger","s","console","log","process","REACT_APP_IS_DEBUG","fallbackNoOps","getItem","t","setItem","v","localStorage","window","sessionStorage","AUTH_KEY","SIDER_COLLAPSED_STATE","DARK_MODE","localStorageAuth","authKey","siderCollapsed","JSON","stringify","storageValue","parse","isDarkMode","matchMedia","matches","HttpClient","baseUrl","onAuthFailure","GET","POST","isDestroyed","authToken","headers","this","method","endpoint","variables","self","Promise","resolve","then","res","setTimeout","fetchInternal","axiosResponse","data","ErrorFactory","newAxiosResponse","createError","description","reject","dev","catch","getReq","postReq","axios","get","params","createHeaders","post","URL","REACT_APP_API_URL","replace","ApiManager","http","lastKnownPassword","getAuthToken","setAuthToken","location","href","split","destroy","StorageHelper","clearAuthKeys","password","fetch","token","rootDomain","force","emailAddress","isEnabled","appName","file","formData","FormData","append","captainDefinition","gitHash","detached","captainDefinitionContent","appDefinition","instanceCount","captainDefinitionRelativeFilePath","envVars","notExposeAsWebApp","forceSsl","websocketSupport","volumes","ports","nodeId","appPushWebhook","customNginxConfig","preDeployFunction","serviceUpdateOverride","containerHttpPort","httpAuth","appDeployTokenConfig","oldAppName","newAppName","hasPersistentData","customDomain","netDataInfo","oldPassword","newPassword","postDownloadFileName","latestVersion","customBase","customCaptain","baseConfig","customValue","captainConfig","mostRecentLimit","imageIds","dockerRegistry","registryId","webhookPath","baseDomain","repositoryUrl","nodeType","privateKey","remoteNodeIpAddress","sshPort","sshUser","captainIpAddress","getAuthKeyFromStorage","Toaster","errorMessage","errorDescription","functionToRun","toast","copyObject","obj","generateUuidV4","c","r","Math","random","toString","deleteAllCookies","cookies","document","cookie","i","length","eqPos","indexOf","name","substr","getAnsiColorRegex","pattern","join","RegExp","isMobile","innerWidth","isSafari","test","navigator","userAgent","match","getDelayedPromise","time","rej","createRandomStringHex","result","characters","charactersLength","charAt","floor","replaceAllGenRandomForOneClickApp","inputString","exec","hexLength","Number","convertHexStringToUtf8","raw","decodeURIComponent","substring","mergeObjects","object1","object2","newObject","Object","keys","forEach","k","Array","isArray","ApiComponent","props","willUnmountSoon","apiManager","Component","Login","state","loginOption","Utils","setAuthKeyInSessionStorage","getAuthTokenString","setAuthKeyInLocalStorage","history","push","createCatcher","isLoggedIn","to","style","position","left","top","transform","title","width","onLoginRequested","setState","radioStyle","display","height","lineHeight","NormalLoginForm","handleSubmit","passwordEntered","Password","onKeyDown","key","keyCode","prefix","LockOutlined","color","onChange","target","value","placeholder","autoFocus","marginTop","marginBottom","justify","type","htmlType","className","onClick","Panel","header","Group","React","ROOT_KEY_CHANGED","SIZE_CHANGED","CenteredSpinner","antIcon","LoadingOutlined","fontSize","spin","textAlign","indicator","size","ClickableLink","preventDefault","onLinkClicked","handleClick","children","ErrorRetry","padding","emitRootKeyChanged","connect","payload","NewTabLink","url","rel","AppConfigs","dummyVar","forceEditableInstanceCount","envVarBulkEdit","bulkVals","forceEditableNodeId","src","line","idx","keyValueArr","len","trim","map","val","apiData","paddingBottom","span","TextArea","rows","convertEnvVarsToBulk","newApiData","keyVals","parseEnvVars","updateApiData","index","paddingLeft","block","addEnvVarClicked","addonBefore","hostPort","p","containerPort","containerPath","hostPath","volumeName","app","InfoCircleOutlined","createVolRows","addVolumeClicked","minWidth","disabled","align","createEnvVarSection","createPortRows","addPortMappingClicked","createVolSection","defaultValue","spellCheck","autoCorrect","autoComplete","autoCapitalize","reFetchData","scrollToFixedFromTop","fromTopPx","el","scrollTo","behavior","delay","getElementById","scrollTop","AppLogsView","isWrapped","expandedLogs","appLogsStringified","separators","ansiRegex","fetchAppLogsInHex","logInfo","logsProcessed","logs","rawRow","textUtf8","Date","getTime","text","sort","a","b","firstLogs","textareaNow","shouldScrollToBottom","abs","scrollHeight","offsetHeight","textarea","fetchLogs","onExpandLogClicked","UpCircleOutlined","DownCircleOutlined","marginLeft","MenuFoldOutlined","id","whiteSpace","readOnly","Timestamp","timestamp","moment","fromNow","toLocaleString","AppVersionTable","version","versionDetails","deployedVersion","CheckCircleTwoTone","twoToneColor","deployedImageName","onRollbackClicked","RetweetOutlined","ExclamationCircleOutlined","dataIndex","render","getStateRender","timeStamp","gitHashOriginal","versionToRevert","imageName","content","Modal","confirm","onOk","onVersionRollbackRequested","versionsReversed","versions","reverse","columns","getCols","rowKey","pagination","pageSize","dataSource","BuildLogsView","fetchBuildLogsInterval","isAppBuilding","buildLogRecreationId","buildLogs","lastLineNumberPrinted","clearInterval","fetchBuildLogs","onAppBuildFinished","lines","firstLineNumberOfLogs","firstLineNumber","firstLinesToPrint","lineAdded","setInterval","PasswordField","isShowing","createInput","createButton","GitRepoForm","action","gutter","xs","lg","gitRepoValues","repo","newObj","updateRepoInfo","branch","sshKey","user","TarUploader","beforeUpload","handleChange","info","fileList","fileToBeUploaded","uploadAppData","originFileObj","onUploadSucceeded","Dragger","accept","multiple","listType","InboxOutlined","startUploadAndDeploy","UploaderPlainTextBase","userEnteredValue","uploadInProcess","captainDefinitionToBeUploaded","uploadCaptainDefinitionContent","isSingleLine","getPlaceHolderValue","createTextArea","startDeploy","convertDataToCaptainDefinition","UploaderPlainTextCaptainDefinition","UploaderPlainTextDockerfile","capDefinition","schemaVersion","dockerfileLines","UploaderPlainTextImageName","Deployment","initRepoInfo","forceEditableCaptainDefinitionPath","updatedVersions","repoInfo","DomUtils","getAllApps","appDefs","appDefinitions","element","onUploadSuccess","hasPushToken","pushWebhookToken","webhookPushUrlRelativePath","webhookPushUrlFullPath","protocol","captainSubDomain","RocketOutlined","flex","margin","tokenConfig","enabled","onUpdateConfigAndSave","onFocus","appDeployToken","select","execCommand","newRepo","marginRight","forceBuild","deepEqual","Search","Input","HttpSettings","newDomain","dialogHttpUser","dialogHttpPass","createHttpSettingsContent","setLoading","enableSslForBaseDomain","success","attachNewCustomDomainToApp","enableSslForCustomDomain","removeCustomDomain","customDomains","row","hasSsl","onEnableCustomDomainSslClicked","publicDomain","onRemoveCustomDomainClicked","defaultNginxConfig","fontFamily","onEditDefaultNginxConfigClicked","basicAuthUsername","hasDefaultSubDomainSsl","enableDefaultHttps","createCustomDomainRows","onConnectNewDomainClicked","enterButton","onSearch","createCustomNginx","defaultChecked","checked","onEditHttpAuthClicked","IGNORE","auth","paddingTop","event","onCancel","enteredUser","enteredPassword","createHttpDetailsSettingsContent","TabPane","Tabs","WEB_SETTINGS","DEPLOYMENT","AppDetails","reRenderTriggered","confirmedAppNameToDelete","volumesToDelete","activeTabKey","isLoading","renderCounterForAffixBug","tempVal","newName","renameAppTo","tempDescription","changed","appDef","allVolumes","deleteApp","volumesFailedToDelete","goBackToApps","warning","renameApp","updateConfigAndSave","offset","extra","CloseOutlined","openRenameAppDialog","placement","EditOutlined","viewDescription","maxWidth","ReadOutlined","defaultActiveKey","classnames","tab","newData","offsetBottom","newLocal","mainContainer","current","borderRadius","background","danger","onDeleteAppClicked","DeleteOutlined","SaveOutlined","globalReducer","AppsTable","searchTerm","ALIGN","appDetailPath","sorter","localeCompare","sortDirections","CheckOutlined","lastDeployTime","DisconnectOutlined","LinkOutlined","sortKey","appsSortKey","sortOrder","appsSortOrder","find","column","defaultSortOrder","appsToRender","apps","filter","versionFound","searchAppInput","toLowerCase","Fragment","CodeOutlined","createColumns","filters","columnKey","order","CreateNewApp","hasPersistency","onCreateNewAppClicked","PlusCircleOutlined","QuestionCircleFilled","Apps","registerNewApp","InputJsonifier","startsWith","yaml","ensureStringifiedJson","StringSimilarity","first","second","firstBigrams","Map","bigram","count","has","set","intersectionSize","mainString","targetStrings","areArgsValid","ratings","bestMatchIndex","currentTargetString","currentRating","compareTwoStrings","rating","bestMatch","OneClickGrid","selectedApp","sortScores","isFromMainRepository","isUsingOfficialImage","isOfficial","FlagTwoTone","SafetyCertificateTwoTone","encodeURIComponent","onAppSelectionChanged","cover","logoUrl","alt","hoverable","Meta","displayName","create3rdPartyTagIfNeeded","oneClickAppList","appsSorted","concat","it","flexWrap","justifyContent","currentTarget","score","appNameForSearch","includes","createOneClickApp","OneClickReposList","fetchData","getAllOneClickAppRepos","domain","addNewCustomOneClickRepo","deleteCustomOneClickRepo","onDeleteUrlClicked","urls","u","createUrlRow","onConnectNewRepositoryClicked","create3rdPartyRepoList","TEMPLATE_ONE_CLICK_APP","ONE_CLICK_APP_STRINGIFIED_KEY","OneClickAppSelector","isCustomTemplateSelected","templateOneClickAppData","getAllOneClickApps","oneClickApps","isOneClickJsonValid","stringified","createOneClickAppListGrid","createCustomTemplateInput","DockerComposeToServiceOverride","compose","overrides","parseHostname","mergedOverride","o","override","hostname","TaskTemplate","ContainerSpec","Hostname","OneClickAppDeploymentHelper","dockerComposeService","vols","elements","environment","envKey","overrideYaml","convertComposeToService","caproverExtra","image","OneClickAppDeployManager","onDeploymentStateChanged","deploymentHelper","template","values","replaceThis","withThis","caproverOneClickApp","steps","currentStep","createAppsArrayInOrder","appToDeploy","createDeploymentStepPromises","service","stepsTexts","stepName","onNextStepPromiseCreator","successMessage","instructions","end","promise","stepPromise","numberOfServices","servicesMap","services","itCount","dependsOn","depends_on","dependencyAlreadyAdded","j","promises","createRegisterPromise","createConfigurationPromise","createDeploymentPromise","Step","Steps","OneClickAppDeployProgress","deploymentState","stepsInfo","icon","when","isRunning","blockNavigationIfRunning","direction","createSteps","showIcon","onFinishClicked","onRestartClicked","OneClickVariablesSection","enteredVariables","oneClickAppVariables","blurredFields","allFieldValid","isFieldValueValid","onNextClicked","variable","currVal","isEnteredValueValid","validRegex","parts","label","remarkPlugins","gfm","newModel","onBlur","createTextFields","ONE_CLICK_ROOT_DOMAIN_VAR_NAME","OneClickAppConfigPage","oneClickAppDeployHelper","isUnmount","appNameFromPath","qs","URLSearchParams","search","baseDomainFromPath","getOneClickAppByName","appTemplate","captainVersion","unshift","getCaptainInfo","captainInfo","toUpperCase","slice","paddingRight","start","valuesAugmented","startDeployProcess","AppConstants","REDIRECT_TO_APPS_IF_READY_REQ_PARAM","Dashboard","userEmail","isForceChangingDomain","isUsingHttp","enableRootSsl","hasRootSsl","performUpdateRootDomain","updateRootDomain","createInitialSetupIfNoRootSsl","createPostFullSetupIfHasForceSsl","createSetupPanelIfNoForceSsl","updateRootDomainClicked","onEnableSslClicked","onForceSslClicked","role","DarkModeSwitch","useThemeSwitcher","switcher","themes","useState","setChecked","useEffect","storedCheckedState","getDarkModeFromLocalStorage","checkedChildren","BulbOutlined","unCheckedChildren","BulbFilled","setDarkModeInLocalStorage","theme","dark","light","LoggedInCatchAll","LoadBalancerStatsCard","overflow","backgroundColor","titleText","titleNumber","text1","text2","LoadBalancerStats","updateApiInterval","getLoadBalancerInfo","updateApi","total","activeConnections","handled","accepted","reading","writing","waiting","NetDataDescription","NetDataSettingsForm","parentField","childField","netDataInfoData","updateModel","smtp","changeModel","server","port","allowNonTls","username","slack","hook","channel","telegram","botToken","chatId","pushBullet","apiToken","fallbackEmail","NetDataInfo","refetchData","getNetDataInfo","isActivated","onUpdateNetDataClicked","updateNetDataInfo","toggleNetDataClicked","PoweroffOutlined","netDataUrl","AreaChartOutlined","Monitoring","IRegistryTypes","LOCAL_REG","REMOTE_REG","DEFAULT_REGISTRY_CHANGED","Option","Select","NONE","DISABLED_PUSH","DefaultDockerRegistry","isInEditMode","newSelectedDefaultId","registries","defaultPushRegistryId","registryUser","registryDomain","okText","changeDefault","visible","getAllOptions","getDefaultRegText","DockerRegistriesStaticInfo","ADDING_LOCAL","ADDING_REMOTE","DockerRegistryAdd","modalShowing","remoteRegistryToAdd","getPlainRegistryInfo","registryPassword","registryImagePrefix","registryType","hasSelfHostedRegistry","reg","addDockerRegistry","addonAfter","EDITING_MODAL","DELETING_MODAL","DockerRegistryTable","remoteRegistryToEdit","registryIdToDelete","warn","editRegistry","FormOutlined","deleteRegistry","destroyOnClose","createEditModalContent","registry","wordWrap","DockerRegistries","getDockerRegistries","emitDefaultRegistryChanged","setDefaultPushDockerRegistry","isSelfHosted","disableSelfHostedDockerRegistry","deleteDockerRegistry","updateDockerRegistry","enableSelfHostedDockerRegistry","defaultRegistryId","registryReducer","AddNode","nodeToAdd","leaderIp","buttonStyle","Button","onAddNodeClicked","ClusterOutlined","CurrentNodes","getAllNodes","addDockerNode","nodes","node","isLeader","ip","memoryBytes","toFixed","operatingSystem","nanoCpu","architecture","dockerEngineVersion","n","addNode","createNodes","Cluster","Nodes","BackupCreator","createBackup","link","createElement","setAttribute","getApiBaseUrl","downloadToken","click","onCreateBackupClicked","CloudDownloadOutlined","ChangePass","old","new1","new2","changePass","maxLength","onChangePasswordClicked","ReloadCaptainModal","hasAlreadyActivated","timeToRefresh","reload","isRefreshTimerActivated","startTimer","closable","footer","CheckUpdate","versionInfo","getVersionInfo","performUpdate","currentVersion","changeLogMessage","canUpdate","onPerformUpdateClicked","UnusedImagesTable","imageId","min","unusedImages","tags","selectedRowKeys","selectedRows","getCheckboxProps","record","getData","selectedImagesForDelete","selectedId","imageIndex","splice","rowSelection","getRowSelection","DiskCleanup","deleteImages","refreshOldImagesList","getUnusedImages","hasSelectedImagesForRemoval","SyncOutlined","onRemoveImagesClicked","NginxConfig","nginxConfig","getNginxConfig","byDefault","setNginxConfig","onLoadDefaultNginxConfigClicked","onUpdateNginxConfigClicked","Settings","Header","Layout","Content","Sider","MENU_ITEMS","LaptopOutlined","DashboardOutlined","SettingOutlined","PageRoot","updateDimensions","emitSizeChanged","toggleSider","setSiderCollapsedStateInLocalStorage","collapsed","createRef","removeEventListener","prevProps","pathname","addEventListener","getSiderCollapsedStateFromLocalStorage","goToLogin","GiftTwoTone","ghost","BarsOutlined","fontWeight","createUpdateAvailableIfNeeded","border","LogoutOutlined","breakpoint","trigger","collapsible","collapsedWidth","zIndex","onCollapse","selectedKeys","mode","defaultSelectedKeys","borderRight","item","Item","GithubOutlined","FileTextOutlined","ref","overflowY","transition","path","component","rootElementKey","rootReducer","combineReducers","init","store","applyMiddleware","thunk","createStore","createStoreWithMiddleware","reducers","MainComponent","App","themeMap","defaultTheme","insertionPoint","Boolean","ReactDOM","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a028ee6.chunk.js","sourcesContent":["// In the future this can be set up to report crashes\nclass CrashReporter {\n    init() {}\n\n    captureException(err: any) {\n        err = err || 'NULL'\n        if (!(err instanceof Error)) err = new Error(err + '')\n    }\n\n    captureMessage(message: any) {}\n}\n\nlet instance: CrashReporter | undefined = undefined\n\nconst getInstance = function () {\n    if (!instance) instance = new CrashReporter()\n    return instance\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    getInstance: getInstance,\n}\n","import CrashReporter from './CrashReporter'\n\nclass ErrorFactory {\n    public readonly OKAY = 100\n    public readonly OKAY_BUILD_STARTED = 101\n    public readonly OK_PARTIALLY = 102\n\n    public readonly STATUS_ERROR_GENERIC = 1000\n    public readonly STATUS_ERROR_CAPTAIN_NOT_INITIALIZED = 1001\n    public readonly STATUS_ERROR_USER_NOT_INITIALIZED = 1101\n    public readonly STATUS_ERROR_NOT_AUTHORIZED = 1102\n    public readonly STATUS_ERROR_ALREADY_EXIST = 1103\n    public readonly STATUS_ERROR_BAD_NAME = 1104\n    public readonly STATUS_WRONG_PASSWORD = 1105\n    public readonly STATUS_AUTH_TOKEN_INVALID = 1106\n    public readonly VERIFICATION_FAILED = 1107\n    public readonly ILLEGAL_OPERATION = 1108\n    public readonly BUILD_ERROR = 1109\n    public readonly ILLEGAL_PARAMETER = 1110\n    public readonly NOT_FOUND = 1111\n    public readonly AUTHENTICATION_FAILED = 1112\n    public readonly STATUS_PASSWORD_BACK_OFF = 1113\n\n    public readonly UNKNOWN_ERROR = 1999\n\n    createError(status: number, message: string) {\n        let e = new Error(message || 'null') as any\n        e.captainStatus = status\n        e.captainMessage = message\n        return e\n    }\n\n    eatUpPromiseRejection() {\n        return function (error: any) {\n            CrashReporter.getInstance().captureException(error)\n            // nom nom\n        }\n    }\n}\n\nexport default new ErrorFactory()\n","export default class Logger {\n    static log(s: string) {\n        console.log(s)\n    }\n\n    static error(s: any) {\n        console.error(s)\n    }\n\n    static dev(s: string) {\n        if (process.env.REACT_APP_IS_DEBUG) {\n            console.log('>>> ', s)\n        }\n    }\n}\n","const fallbackNoOps = {\n    getItem(t: string) {\n        return ''\n    },\n    setItem(t: string, v: string) {},\n}\nconst localStorage = window.localStorage ? window.localStorage : fallbackNoOps\nconst sessionStorage = window.sessionStorage\n    ? window.sessionStorage\n    : fallbackNoOps\n\nconst AUTH_KEY = 'CAPROVER_AUTH_KEY'\nconst SIDER_COLLAPSED_STATE = 'CAPROVER_SIDER_COLLAPSED_STATE'\nconst DARK_MODE = 'CAPROVER_DARK_MODE'\nclass StorageHelper {\n    getAuthKeyFromStorage() {\n        const localStorageAuth = localStorage.getItem(AUTH_KEY)\n        return localStorageAuth\n            ? localStorageAuth\n            : sessionStorage.getItem(AUTH_KEY) || ''\n    }\n\n    clearAuthKeys() {\n        localStorage.setItem(AUTH_KEY, '')\n        sessionStorage.setItem(AUTH_KEY, '')\n    }\n\n    setAuthKeyInSessionStorage(authKey: string) {\n        sessionStorage.setItem(AUTH_KEY, authKey)\n        localStorage.setItem(AUTH_KEY, '')\n    }\n\n    setAuthKeyInLocalStorage(authKey: string) {\n        localStorage.setItem(AUTH_KEY, authKey)\n        sessionStorage.setItem(AUTH_KEY, '')\n    }\n\n    setSiderCollapsedStateInLocalStorage(siderCollapsed: boolean) {\n        localStorage.setItem(\n            SIDER_COLLAPSED_STATE,\n            JSON.stringify(siderCollapsed)\n        )\n    }\n\n    getSiderCollapsedStateFromLocalStorage(): boolean {\n        const storageValue = localStorage.getItem(SIDER_COLLAPSED_STATE)\n        return storageValue && JSON.parse(storageValue)\n    }\n\n    setDarkModeInLocalStorage(isDarkMode: boolean) {\n        localStorage.setItem(DARK_MODE, JSON.stringify(isDarkMode))\n    }\n\n    getDarkModeFromLocalStorage(): boolean {\n        const isDarkMode = localStorage.getItem(DARK_MODE)\n        // If not preference exists, return DarkMode based on users colorScheme\n        return isDarkMode\n            ? JSON.parse(isDarkMode)\n            : window.matchMedia &&\n                  window.matchMedia('(prefers-color-scheme: dark)').matches\n    }\n}\n\nconst instance = new StorageHelper()\nexport default instance\n","import axios from 'axios'\nimport ErrorFactory from '../utils/ErrorFactory'\nimport Logger from '../utils/Logger'\n\nlet TOKEN_HEADER = 'x-captain-auth'\nlet NAMESPACE = 'x-namespace'\nlet CAPTAIN = 'captain'\n\nexport default class HttpClient {\n    public readonly GET = 'GET'\n    public readonly POST = 'POST'\n    public isDestroyed = false\n    private authToken: string = ''\n\n    constructor(\n        private baseUrl: string,\n        private onAuthFailure: () => Promise<any>\n    ) {\n        //\n    }\n\n    createHeaders() {\n        let headers: any = {}\n        if (this.authToken) headers[TOKEN_HEADER] = this.authToken\n        headers[NAMESPACE] = CAPTAIN\n\n        // check user/appData or apiManager.uploadAppData before changing this signature.\n        return headers\n    }\n\n    setAuthToken(authToken: string) {\n        this.authToken = authToken\n    }\n\n    destroy() {\n        this.isDestroyed = true\n    }\n\n    fetch(method: 'GET' | 'POST', endpoint: string, variables: any) {\n        const self = this\n        return function (): Promise<any> {\n            return Promise.resolve() //\n                .then(function () {\n                    if (!process.env.REACT_APP_IS_DEBUG)\n                        return Promise.resolve()\n                    return new Promise<void>(function (res) {\n                        setTimeout(res, 500)\n                    })\n                })\n                .then(function () {\n                    return self.fetchInternal(method, endpoint, variables) //\n                })\n                .then(function (axiosResponse) {\n                    const data = axiosResponse.data // this is an axios thing!\n\n                    if (\n                        data.status === ErrorFactory.STATUS_AUTH_TOKEN_INVALID\n                    ) {\n                        return self\n                            .onAuthFailure() //\n                            .then(function () {\n                                return self\n                                    .fetchInternal(method, endpoint, variables)\n                                    .then(function (newAxiosResponse) {\n                                        return newAxiosResponse.data\n                                    })\n                            })\n                    } else {\n                        return data\n                    }\n                })\n                .then(function (data) {\n                    if (\n                        data.status !== ErrorFactory.OKAY &&\n                        data.status !== ErrorFactory.OK_PARTIALLY &&\n                        data.status !== ErrorFactory.OKAY_BUILD_STARTED\n                    ) {\n                        throw ErrorFactory.createError(\n                            data.status || ErrorFactory.UNKNOWN_ERROR,\n                            data.description || ''\n                        )\n                    }\n                    return data\n                })\n                .then(function (data) {\n                    // These two blocks are clearly memory leaks! But I don't have time to fix them now... I need to CANCEL the promise, but since I don't\n                    // have CANCEL method on the native Promise, I return a promise that will never RETURN if the HttpClient is destroyed.\n                    // Will fix them later... but it shouldn't be a big deal anyways as it's only a problem when user navigates away from a page before the\n                    // network request returns back.\n                    return new Promise(function (resolve, reject) {\n                        // data.data here is the \"data\" field inside the API response! {status: 100, description: \"Login succeeded\", data: {…}}\n                        if (!self.isDestroyed) return resolve(data.data)\n                        Logger.dev('Destroyed then not called')\n                    })\n                })\n                .catch(function (error) {\n                    Logger.error(error)\n                    return new Promise(function (resolve, reject) {\n                        if (!self.isDestroyed) return reject(error)\n                        Logger.dev('Destroyed catch not called')\n                    })\n                })\n        }\n    }\n\n    fetchInternal(method: 'GET' | 'POST', endpoint: string, variables: any) {\n        if (method === this.GET) return this.getReq(endpoint, variables)\n\n        if (method === this.POST) return this.postReq(endpoint, variables)\n\n        throw new Error(`Unknown method: ${method}`)\n    }\n\n    getReq(endpoint: string, variables: any) {\n        const self = this\n        return axios\n            .get(this.baseUrl + endpoint, {\n                params: variables,\n                headers: self.createHeaders(),\n            }) //\n            .then(function (data) {\n                // console.log(data);\n                return data\n            })\n    }\n\n    postReq(endpoint: string, variables: any) {\n        const self = this\n        return axios\n            .post(this.baseUrl + endpoint, variables, {\n                headers: self.createHeaders(),\n            }) //\n            .then(function (data) {\n                // console.log(data);\n                return data\n            })\n    }\n}\n","import { IAppDef } from '../containers/apps/AppDefinition'\nimport { ICaptainDefinition } from '../models/ICaptainDefinition'\nimport { IRegistryInfo } from '../models/IRegistryInfo'\nimport { IVersionInfo } from '../models/IVersionInfo'\nimport ErrorFactory from '../utils/ErrorFactory'\nimport Logger from '../utils/Logger'\nimport StorageHelper from '../utils/StorageHelper'\nimport HttpClient from './HttpClient'\n\nconst BASE_DOMAIN = process.env.REACT_APP_API_URL\n    ? process.env.REACT_APP_API_URL.replace(/\\/$/, '')\n    : ''\nconst URL = BASE_DOMAIN + '/api/v2'\nLogger.dev(`API URL: ${URL}`)\n\nexport default class ApiManager {\n    private static lastKnownPassword: string = ''\n    private static authToken = StorageHelper.getAuthKeyFromStorage() || ''\n\n    private http: HttpClient\n\n    constructor() {\n        const self = this\n        this.http = new HttpClient(URL, function () {\n            if (!ApiManager.lastKnownPassword) {\n                if (!!ApiManager.authToken) {\n                    // force logging out\n                    self.setAuthToken('')\n                    setTimeout(() => {\n                        window.location.href =\n                            window.location.href.split('#')[0]\n                    }, 200)\n                }\n                return Promise.reject(\n                    new Error('No saved password. Ignore if initial call.')\n                )\n            }\n            return self.getAuthToken(ApiManager.lastKnownPassword)\n        })\n        this.http.setAuthToken(ApiManager.authToken)\n    }\n\n    getApiBaseUrl() {\n        return URL\n    }\n\n    destroy() {\n        this.http.destroy()\n    }\n\n    static getAuthTokenString() {\n        return ApiManager.authToken\n    }\n\n    setAuthToken(authToken: string) {\n        ApiManager.authToken = authToken\n        if (!authToken) StorageHelper.clearAuthKeys()\n        this.http.setAuthToken(authToken)\n    }\n\n    static isLoggedIn() {\n        return !!ApiManager.authToken\n    }\n\n    getAuthToken(password: string) {\n        const http = this.http\n        ApiManager.lastKnownPassword = password\n\n        const self = this\n        return Promise.resolve() //\n            .then(http.fetch(http.POST, '/login', { password }))\n            .then(function (data) {\n                self.setAuthToken(data.token)\n            })\n            .catch(function (error) {\n                // Upon wrong password or back-off error, we force logout the user\n                // to avoid getting stuck with wrong password loop\n                if (\n                    error.captainStatus + '' ===\n                        ErrorFactory.STATUS_PASSWORD_BACK_OFF + '' ||\n                    error.captainStatus + '' ===\n                        ErrorFactory.STATUS_WRONG_PASSWORD + ''\n                ) {\n                    self.setAuthToken('')\n                    ApiManager.lastKnownPassword = ''\n                }\n\n                return Promise.reject(error)\n            })\n    }\n\n    getCaptainInfo() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/info', {}))\n    }\n\n    updateRootDomain(rootDomain: string, force: boolean) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/changerootdomain', {\n                    rootDomain,\n                    force,\n                })\n            )\n    }\n\n    enableRootSsl(emailAddress: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/enablessl', {\n                    emailAddress,\n                })\n            )\n    }\n\n    forceSsl(isEnabled: boolean) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.POST, '/user/system/forcessl', { isEnabled }))\n    }\n\n    getAllApps() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/apps/appDefinitions', {}))\n    }\n\n    fetchBuildLogs(appName: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, `/user/apps/appData/${appName}`, {}))\n    }\n\n    fetchAppLogsInHex(appName: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.GET,\n                    `/user/apps/appData/${appName}/logs?encoding=hex`,\n                    {}\n                )\n            )\n    }\n\n    uploadAppData(appName: string, file: File) {\n        const http = this.http\n        let formData = new FormData()\n        formData.append('sourceFile', file)\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    `/user/apps/appData/${appName}?detached=1`,\n                    formData\n                )\n            )\n    }\n\n    uploadCaptainDefinitionContent(\n        appName: string,\n        captainDefinition: ICaptainDefinition,\n        gitHash: string,\n        detached: boolean\n    ) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    `/user/apps/appData/${appName}${\n                        detached ? '?detached=1' : ''\n                    }`,\n                    {\n                        captainDefinitionContent:\n                            JSON.stringify(captainDefinition),\n                        gitHash,\n                    }\n                )\n            )\n    }\n\n    updateConfigAndSave(appName: string, appDefinition: IAppDef) {\n        let instanceCount = appDefinition.instanceCount\n        let captainDefinitionRelativeFilePath =\n            appDefinition.captainDefinitionRelativeFilePath\n        let envVars = appDefinition.envVars\n        let notExposeAsWebApp = appDefinition.notExposeAsWebApp\n        let forceSsl = appDefinition.forceSsl\n        let websocketSupport = appDefinition.websocketSupport\n        let volumes = appDefinition.volumes\n        let ports = appDefinition.ports\n        let nodeId = appDefinition.nodeId\n        let appPushWebhook = appDefinition.appPushWebhook\n        let customNginxConfig = appDefinition.customNginxConfig\n        let preDeployFunction = appDefinition.preDeployFunction\n        let serviceUpdateOverride = appDefinition.serviceUpdateOverride\n        let containerHttpPort = appDefinition.containerHttpPort\n        let description = appDefinition.description\n        let httpAuth = appDefinition.httpAuth\n        let appDeployTokenConfig = appDefinition.appDeployTokenConfig\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/apps/appDefinitions/update', {\n                    appName: appName,\n                    instanceCount: instanceCount,\n                    captainDefinitionRelativeFilePath:\n                        captainDefinitionRelativeFilePath,\n                    notExposeAsWebApp: notExposeAsWebApp,\n                    forceSsl: forceSsl,\n                    websocketSupport: websocketSupport,\n                    volumes: volumes,\n                    ports: ports,\n                    customNginxConfig: customNginxConfig,\n                    appPushWebhook: appPushWebhook,\n                    nodeId: nodeId,\n                    preDeployFunction: preDeployFunction,\n                    serviceUpdateOverride: serviceUpdateOverride,\n                    containerHttpPort: containerHttpPort,\n                    description: description,\n                    httpAuth: httpAuth,\n                    envVars: envVars,\n                    appDeployTokenConfig: appDeployTokenConfig,\n                })\n            )\n    }\n\n    renameApp(oldAppName: string, newAppName: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/apps/appDefinitions/rename', {\n                    oldAppName,\n                    newAppName,\n                })\n            )\n    }\n\n    registerNewApp(\n        appName: string,\n        hasPersistentData: boolean,\n        detached: boolean\n    ) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    `/user/apps/appDefinitions/register${\n                        detached ? '?detached=1' : ''\n                    }`,\n                    {\n                        appName,\n                        hasPersistentData,\n                    }\n                )\n            )\n    }\n\n    deleteApp(appName: string, volumes: string[]) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/apps/appDefinitions/delete', {\n                    appName,\n                    volumes,\n                })\n            )\n    }\n\n    enableSslForBaseDomain(appName: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/apps/appDefinitions/enablebasedomainssl',\n                    {\n                        appName,\n                    }\n                )\n            )\n    }\n\n    attachNewCustomDomainToApp(appName: string, customDomain: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/apps/appDefinitions/customdomain',\n                    {\n                        appName,\n                        customDomain,\n                    }\n                )\n            )\n    }\n\n    enableSslForCustomDomain(appName: string, customDomain: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/apps/appDefinitions/enablecustomdomainssl',\n                    {\n                        appName,\n                        customDomain,\n                    }\n                )\n            )\n    }\n\n    removeCustomDomain(appName: string, customDomain: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/apps/appDefinitions/removecustomdomain',\n                    {\n                        appName,\n                        customDomain,\n                    }\n                )\n            )\n    }\n\n    getLoadBalancerInfo() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/loadbalancerinfo', {}))\n    }\n\n    getNetDataInfo() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/netdata', {}))\n    }\n\n    updateNetDataInfo(netDataInfo: any) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/netdata', { netDataInfo })\n            )\n    }\n\n    changePass(oldPassword: string, newPassword: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/changepassword', {\n                    oldPassword,\n                    newPassword,\n                })\n            )\n    }\n\n    getVersionInfo(): Promise<IVersionInfo> {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/versioninfo', {}))\n    }\n\n    createBackup(): Promise<{ downloadToken: string }> {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/createbackup', {\n                    postDownloadFileName: 'backup.tar',\n                })\n            )\n    }\n\n    performUpdate(latestVersion: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/versioninfo', {\n                    latestVersion,\n                })\n            )\n    }\n\n    getNginxConfig() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/nginxconfig', {}))\n    }\n\n    setNginxConfig(customBase: string, customCaptain: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/nginxconfig', {\n                    baseConfig: { customValue: customBase },\n                    captainConfig: { customValue: customCaptain },\n                })\n            )\n    }\n\n    getUnusedImages(mostRecentLimit: number) {\n        const http = this.http\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.GET, '/user/apps/appDefinitions/unusedImages', {\n                    mostRecentLimit: mostRecentLimit + '',\n                })\n            )\n    }\n\n    deleteImages(imageIds: string[]) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/apps/appDefinitions/deleteImages',\n                    {\n                        imageIds,\n                    }\n                )\n            )\n    }\n\n    getDockerRegistries() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/registries', {}))\n    }\n\n    enableSelfHostedDockerRegistry() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/system/selfhostregistry/enableregistry',\n                    {}\n                )\n            )\n    }\n\n    disableSelfHostedDockerRegistry() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(\n                    http.POST,\n                    '/user/system/selfhostregistry/disableregistry',\n                    {}\n                )\n            )\n    }\n\n    addDockerRegistry(dockerRegistry: IRegistryInfo) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/registries/insert', {\n                    ...dockerRegistry,\n                })\n            )\n    }\n\n    updateDockerRegistry(dockerRegistry: IRegistryInfo) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/registries/update', {\n                    ...dockerRegistry,\n                })\n            )\n    }\n\n    deleteDockerRegistry(registryId: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/registries/delete', {\n                    registryId,\n                })\n            )\n    }\n\n    setDefaultPushDockerRegistry(registryId: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/registries/setpush', {\n                    registryId,\n                })\n            )\n    }\n\n    forceBuild(webhookPath: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.POST, webhookPath, {}))\n    }\n\n    getAllNodes() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/system/nodes', {}))\n    }\n\n    getAllOneClickApps() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/oneclick/template/list', {}))\n    }\n\n    getOneClickAppByName(appName: string, baseDomain: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.GET, '/user/oneclick/template/app', {\n                    appName,\n                    baseDomain,\n                })\n            )\n    }\n\n    getAllOneClickAppRepos() {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(http.fetch(http.GET, '/user/oneclick/repositories', {}))\n    }\n\n    addNewCustomOneClickRepo(repositoryUrl: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/oneclick/repositories/insert', {\n                    repositoryUrl,\n                })\n            )\n    }\n\n    deleteCustomOneClickRepo(repositoryUrl: string) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/oneclick/repositories/delete', {\n                    repositoryUrl,\n                })\n            )\n    }\n\n    addDockerNode(\n        nodeType: string,\n        privateKey: string,\n        remoteNodeIpAddress: string,\n        sshPort: string,\n        sshUser: string,\n        captainIpAddress: string\n    ) {\n        const http = this.http\n\n        return Promise.resolve() //\n            .then(\n                http.fetch(http.POST, '/user/system/nodes', {\n                    nodeType,\n                    privateKey,\n                    remoteNodeIpAddress,\n                    sshPort,\n                    sshUser,\n                    captainIpAddress,\n                })\n            )\n    }\n}\n","import { message } from 'antd'\n\nexport default class Toaster {\n    static toast(error: any) {\n        let errorMessage = 'Something bad happened.'\n        if (error.captainStatus) {\n            let errorDescription = error.captainMessage || errorMessage\n            errorMessage = `${error.captainStatus} : ${errorDescription}`\n        }\n        message.error(errorMessage)\n        if (!!process.env.REACT_APP_IS_DEBUG) console.error(error)\n    }\n\n    static createCatcher(functionToRun?: Function) {\n        return function (error: any) {\n            Toaster.toast(error)\n            if (functionToRun) {\n                functionToRun()\n            }\n        }\n    }\n}\n","// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    copyObject<T>(obj: T): T {\n        return JSON.parse(JSON.stringify(obj)) as T\n    },\n\n    generateUuidV4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n            /[xy]/g,\n            function (c) {\n                let r = (Math.random() * 16) | 0,\n                    v = c === 'x' ? r : (r & 0x3) | 0x8\n                return v.toString(16)\n            }\n        )\n    },\n\n    deleteAllCookies() {\n        let cookies = document.cookie.split(';')\n\n        for (let i = 0; i < cookies.length; i++) {\n            let cookie = cookies[i]\n            let eqPos = cookie.indexOf('=')\n            let name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT'\n        }\n    },\n\n    getAnsiColorRegex() {\n        const pattern = [\n            '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[a-zA-Z\\\\d]*)*)?\\\\u0007)',\n            '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))',\n        ].join('|')\n\n        return new RegExp(pattern, 'g')\n    },\n\n    isMobile() {\n        return window.innerWidth < 768\n    },\n\n    isSafari() {\n        let isSafari = false\n\n        try {\n            isSafari =\n                /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || //\n                // eslint-disable-next-line\n                !!navigator.userAgent.match(/Version\\/[\\d\\.]+.*Safari/)\n        } catch (error) {\n            // Don't let the error ruin everything!\n            console.log(error)\n        }\n\n        return isSafari\n    },\n\n    getDelayedPromise(time: number) {\n        if (!time) return Promise.resolve()\n\n        return new Promise<void>((res, rej) => {\n            setTimeout(() => {\n                res()\n            }, time)\n        })\n    },\n\n    createRandomStringHex(length: number) {\n        let result = ''\n        const characters = '0123456789abcdef'\n        const charactersLength = characters.length\n        for (let i = 0; i < length; i++) {\n            result += characters.charAt(\n                Math.floor(Math.random() * charactersLength)\n            )\n        }\n        return result\n    },\n\n    replaceAllGenRandomForOneClickApp(inputString: string) {\n        let matches\n\n        while (\n            (matches = /\\$\\$cap_gen_random_hex\\((\\d+)\\)/g.exec(inputString)) &&\n            matches.length === 2\n        ) {\n            const hexLength = Number(matches[1])\n            if (hexLength > 256) {\n                // capping out the maximum length to avoid unintentional problems\n                inputString = inputString.replace(matches[0], '')\n            } else {\n                inputString = inputString.replace(\n                    matches[0],\n                    `${this.createRandomStringHex(hexLength)}`\n                )\n            }\n        }\n\n        return inputString\n    },\n\n    convertHexStringToUtf8(raw: string) {\n        return !raw\n            ? ''\n            : decodeURIComponent(\n                  raw\n                      .substring(8, raw.length)\n                      .replace(/\\s+/g, '')\n                      .replace(/[0-9a-f]{2}/g, '%$&')\n              )\n    },\n\n    mergeObjects(object1: any, object2: any) {\n        const newObject = object1 || {}\n        object2 = object2 || {}\n\n        Object.keys(object2).forEach((k) => {\n            if (\n                !newObject[k] ||\n                Array.isArray(newObject[k]) ||\n                Array.isArray(object2[k])\n            ) {\n                newObject[k] = object2[k]\n            } else {\n                if (\n                    typeof object2[k] === 'object' &&\n                    typeof newObject[k] === 'object'\n                ) {\n                    newObject[k] = this.mergeObjects(newObject[k], object2[k])\n                } else {\n                    newObject[k] = object2[k]\n                }\n            }\n        })\n\n        return newObject\n    },\n}\n","import { Component } from 'react'\nimport ApiManager from '../../api/ApiManager'\n\nexport default class ApiComponent<P = {}, S = {}> extends Component<P, S> {\n    protected willUnmountSoon: boolean\n    protected apiManager: ApiManager\n\n    constructor(props: any) {\n        super(props)\n        this.willUnmountSoon = false\n        this.apiManager = new ApiManager()\n    }\n\n    componentWillUnmount() {\n        this.willUnmountSoon = true\n        this.apiManager.destroy()\n    }\n}\n","import { LockOutlined } from '@ant-design/icons'\nimport { Button, Card, Collapse, Input, Radio, Row } from 'antd'\nimport React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router'\nimport ApiManager from '../api/ApiManager'\nimport StorageHelper from '../utils/StorageHelper'\nimport Toaster from '../utils/Toaster'\nimport Utils from '../utils/Utils'\nimport ApiComponent from './global/ApiComponent'\n\nconst NO_SESSION = 1\nconst SESSION_STORAGE = 2\nconst LOCAL_STORAGE = 3\n\nexport default class Login extends ApiComponent<RouteComponentProps<any>, any> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            loginOption: NO_SESSION,\n        }\n    }\n\n    componentDidMount() {\n        if (super.componentDidMount) super.componentDidMount()\n\n        Utils.deleteAllCookies()\n    }\n\n    onLoginRequested(password: string) {\n        const self = this\n        this.apiManager\n            .getAuthToken(password)\n            .then(function () {\n                if (self.state.loginOption === SESSION_STORAGE) {\n                    StorageHelper.setAuthKeyInSessionStorage(\n                        ApiManager.getAuthTokenString()\n                    )\n                } else if (self.state.loginOption === LOCAL_STORAGE) {\n                    StorageHelper.setAuthKeyInLocalStorage(\n                        ApiManager.getAuthTokenString()\n                    )\n                }\n                self.props.history.push('/')\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    render() {\n        const self = this\n\n        if (ApiManager.isLoggedIn()) return <Redirect to=\"/\" />\n\n        return (\n            <div>\n                <div\n                    style={{\n                        position: 'absolute',\n                        left: '50%',\n                        top: '50%',\n                        transform: 'translate(-50%,-50%)',\n                    }}\n                >\n                    <Card title=\"SpaceCloud Login\" style={{ width: 380 }}>\n                        <NormalLoginForm\n                            onLoginRequested={(\n                                password: string,\n                                loginOption: number\n                            ) => {\n                                self.setState({ loginOption })\n                                self.onLoginRequested(password)\n                            }}\n                        />\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst radioStyle = {\n    display: 'block',\n    height: '30px',\n    lineHeight: '30px',\n}\n\nclass NormalLoginForm extends React.Component<\n    any,\n    {\n        loginOption: number\n        passwordEntered: string\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            loginOption: NO_SESSION,\n            passwordEntered: ``,\n        }\n    }\n\n    handleSubmit = () => {\n        const self = this\n        self.props.onLoginRequested(\n            self.state.passwordEntered,\n            self.state.loginOption\n        )\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Input.Password\n                    onKeyDown={(key) => {\n                        if (key.keyCode === 13) {\n                            self.handleSubmit()\n                        }\n                    }}\n                    prefix={\n                        <LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\n                    }\n                    onChange={(e) => {\n                        self.setState({ passwordEntered: `${e.target.value}` })\n                    }}\n                    placeholder=\"Contraseña\"\n                    autoFocus\n                />\n                <div style={{ marginTop: 20, marginBottom: 20 }}>\n                    <Row justify=\"end\">\n                        <Button\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            className=\"login-form-button\"\n                            onClick={() => {\n                                self.handleSubmit()\n                            }}\n                        >\n                            Iniciar sesión\n                        </Button>\n                    </Row>\n                </div>\n                <Collapse>\n                    <Collapse.Panel header=\"Recuerdame\" key=\"1\">\n                        <Radio.Group\n                            onChange={(e) => {\n                                console.log(e.target.value)\n                                self.setState({\n                                    loginOption: e.target.value,\n                                })\n                            }}\n                            value={self.state.loginOption}\n                        >\n                            <Radio style={radioStyle} value={NO_SESSION}>\n                                Sin persistencia de la sesión (Seguro)\n                            </Radio>\n                            <Radio style={radioStyle} value={SESSION_STORAGE}>\n                                Usar almacenamiento de sesión\n                            </Radio>\n                            <Radio style={radioStyle} value={LOCAL_STORAGE}>\n                                Usar almacenamiento local (Persist.)\n                            </Radio>\n                        </Radio.Group>\n                    </Collapse.Panel>\n                </Collapse>\n            </div>\n        )\n    }\n}\n","export const ROOT_KEY_CHANGED = 'ROOT_KEY_CHANGED'\nexport const SIZE_CHANGED = 'SIZE_CHANGED'\nexport function emitRootKeyChanged() {\n    return {\n        type: ROOT_KEY_CHANGED,\n        payload: {},\n    }\n}\n\nexport function emitSizeChanged() {\n    return {\n        type: SIZE_CHANGED,\n        payload: {},\n    }\n}\n","import { LoadingOutlined } from '@ant-design/icons'\nimport { Spin } from 'antd'\nimport React, { Component } from 'react'\n\nexport default class CenteredSpinner extends Component {\n    render() {\n        const antIcon = <LoadingOutlined style={{ fontSize: 32 }} spin />\n\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}\n            >\n                <Spin\n                    style={{\n                        marginTop: 60,\n                        marginBottom: 60,\n                        width: '100%',\n                    }}\n                    indicator={antIcon}\n                    size=\"large\"\n                />\n            </div>\n        )\n    }\n}\n","import React, { Component, MouseEvent } from 'react'\n\nexport default class ClickableLink extends Component<\n    { onLinkClicked: Function },\n    {}\n> {\n    handleClick(e: MouseEvent) {\n        e.preventDefault()\n        if (this.props.onLinkClicked) this.props.onLinkClicked()\n    }\n\n    render() {\n        // eslint-disable-next-line\n        return <a onClick={(e) => this.handleClick(e)}>{this.props.children}</a>\n    }\n}\n","import { Button, Row } from 'antd'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { emitRootKeyChanged } from '../../redux/actions/GlobalActions'\n\nclass ErrorRetry extends Component<any, {}> {\n    render() {\n        const self = this\n        return (\n            <div style={{ textAlign: 'center', padding: 36 }}>\n                <p>A ocurrido un error. Por favor, intentalo de nuevo</p>\n                <Row justify=\"center\">\n                    <Button\n                        type=\"primary\"\n                        onClick={() => {\n                            self.props.emitRootKeyChanged()\n                        }}\n                    >\n                        Recargar\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default connect(undefined, {\n    emitRootKeyChanged: emitRootKeyChanged,\n})(ErrorRetry)\n","import React, { Component } from 'react'\n\nexport default class NewTabLink extends Component<{ url: string }, {}> {\n    render() {\n        // eslint-disable-next-line\n        return (\n            <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {this.props.children}\n            </a>\n        )\n    }\n}\n","import { InfoCircleOutlined } from '@ant-design/icons'\nimport { Button, Col, Input, Row, Switch, Tooltip } from 'antd'\nimport React, { Component } from 'react'\nimport { IHashMapGeneric } from '../../../models/IHashMapGeneric'\nimport Utils from '../../../utils/Utils'\nimport NewTabLink from '../../global/NewTabLink'\nimport { IAppEnvVar } from '../AppDefinition'\nimport { AppDetailsTabProps } from './AppDetails'\n\nexport default class AppConfigs extends Component<\n    AppDetailsTabProps,\n    {\n        dummyVar: undefined\n        envVarBulkEdit: boolean\n        bulkVals: string\n        forceEditableNodeId: boolean\n        forceEditableInstanceCount: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            dummyVar: undefined,\n            forceEditableInstanceCount: false,\n            envVarBulkEdit: false,\n            bulkVals: '',\n            forceEditableNodeId: false,\n        }\n    }\n\n    // Copied from https://github.com/motdotla/dotenv/blob/master/lib/main.js\n    parseEnvVars(src: string) {\n        const obj: IHashMapGeneric<string> = {}\n\n        // convert Buffers before splitting into lines and processing\n        src.toString()\n            .split('\\n')\n            .forEach(function (line, idx) {\n                // matching \"KEY' and 'VAL' in 'KEY=VAL'\n                const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/)\n                // matched?\n                if (!!keyValueArr) {\n                    const key = keyValueArr[1]\n\n                    // default undefined or missing values to empty string\n                    let value = keyValueArr[2] || ''\n\n                    // expand newlines in quoted values\n                    const len = value ? value.length : 0\n                    if (\n                        len > 0 &&\n                        value.charAt(0) === '\"' &&\n                        value.charAt(len - 1) === '\"'\n                    ) {\n                        value = value.replace(/\\\\n/gm, '\\n')\n                    }\n\n                    // remove any surrounding quotes and extra spaces\n                    value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n                    obj[key] = value\n                }\n            })\n\n        return obj\n    }\n\n    convertEnvVarsToBulk(envVars: IAppEnvVar[]) {\n        return envVars\n            .map((e) => {\n                let val = e.value\n                if (val.indexOf('\\n') >= 0) {\n                    val = `\"${val.split('\\n').join('\\\\n')}\"`\n                }\n                return `${e.key}=${val}`\n            })\n            .join('\\n')\n    }\n\n    createEnvVarSection() {\n        const self = this\n        const envVars = this.props.apiData.appDefinition.envVars || []\n\n        if (self.state.envVarBulkEdit) {\n            return (\n                <div>\n                    <Row style={{ paddingBottom: 12 }}>\n                        <Col span={24}>\n                            <Input.TextArea\n                                className=\"code-input\"\n                                placeholder={'key1=value1\\nkey2=value2'}\n                                rows={7}\n                                value={\n                                    self.state.bulkVals\n                                        ? self.state.bulkVals\n                                        : self.convertEnvVarsToBulk(envVars)\n                                }\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        self.props.apiData\n                                    )\n                                    const keyVals = self.parseEnvVars(\n                                        e.target.value\n                                    )\n                                    const envVars: IAppEnvVar[] = []\n                                    Object.keys(keyVals).forEach((k) => {\n                                        envVars.push({\n                                            key: k,\n                                            value: keyVals[k],\n                                        })\n                                    })\n                                    newApiData.appDefinition.envVars = envVars\n                                    self.props.updateApiData(newApiData)\n                                    self.setState({ bulkVals: e.target.value })\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n\n        const rows = envVars.map((value, index) => {\n            return (\n                <Row style={{ paddingBottom: 12 }} key={`${index}`}>\n                    <Col span={8}>\n                        <Input\n                            className=\"code-input\"\n                            placeholder=\"key\"\n                            value={value.key}\n                            type=\"text\"\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                newApiData.appDefinition.envVars[index].key =\n                                    e.target.value\n                                self.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                    <Col style={{ paddingLeft: 12 }} span={16}>\n                        <Input.TextArea\n                            className=\"code-input\"\n                            placeholder=\"value\"\n                            rows={1}\n                            value={value.value}\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                newApiData.appDefinition.envVars[index].value =\n                                    e.target.value\n                                self.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                </Row>\n            )\n        })\n\n        return (\n            <div>\n                {rows}\n\n                <br />\n\n                <Button\n                    block={this.props.isMobile}\n                    type=\"default\"\n                    onClick={() => self.addEnvVarClicked()}\n                >\n                    Add Key/Value Pair\n                </Button>\n            </div>\n        )\n    }\n\n    createPortRows() {\n        const self = this\n        const ports = this.props.apiData.appDefinition.ports || []\n        return ports.map((value, index) => {\n            return (\n                <Row style={{ paddingBottom: 12 }} key={`${index}`}>\n                    <Col span={12}>\n                        <Tooltip title=\"Make sure the port is not already used!\">\n                            <Input\n                                addonBefore=\"Server Port\"\n                                placeholder=\"5050\"\n                                value={\n                                    value.hostPort ? value.hostPort + '' : ''\n                                }\n                                type=\"number\"\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        self.props.apiData\n                                    )\n                                    const p = Number(e.target.value.trim())\n                                    newApiData.appDefinition.ports[\n                                        index\n                                    ].hostPort = p > 0 ? p : 0 // to avoid NaN\n                                    self.props.updateApiData(newApiData)\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                    <Col style={{ paddingLeft: 12 }} span={12}>\n                        <Input\n                            addonBefore=\"Container Port\"\n                            placeholder=\"6060\"\n                            value={\n                                value.containerPort\n                                    ? value.containerPort + ''\n                                    : ''\n                            }\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                const p = Number(e.target.value.trim())\n                                newApiData.appDefinition.ports[\n                                    index\n                                ].containerPort = p > 0 ? p : 0 // to avoid NaN\n                                self.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                </Row>\n            )\n        })\n    }\n\n    createVolRows() {\n        const self = this\n        const volumes = this.props.apiData.appDefinition.volumes || []\n        return volumes.map((value, index) => {\n            return (\n                <Row style={{ paddingBottom: 12 }} key={`${index}`}>\n                    <Col span={8}>\n                        <Input\n                            addonBefore=\"Path in App\"\n                            className=\"code-input\"\n                            placeholder=\"/var/www/html\"\n                            value={value.containerPath}\n                            type=\"text\"\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                newApiData.appDefinition.volumes[\n                                    index\n                                ].containerPath = e.target.value\n                                self.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                    <Col\n                        style={{ paddingLeft: 12 }}\n                        span={8}\n                        className={value.hostPath ? 'hide-on-demand' : ''}\n                    >\n                        <Input\n                            addonBefore=\"Label\"\n                            className=\"code-input\"\n                            placeholder=\"some-name\"\n                            value={value.volumeName}\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                newApiData.appDefinition.volumes[\n                                    index\n                                ].volumeName = e.target.value\n                                self.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n\n                    <Col\n                        style={{ paddingLeft: 12 }}\n                        span={8}\n                        className={!value.hostPath ? 'hide-on-demand' : ''}\n                    >\n                        <Tooltip title=\"IMPORTANT: Ensure Host Path exists before assigning it here\">\n                            <Input\n                                addonBefore=\"Path on Host\"\n                                className=\"code-input\"\n                                placeholder=\"/host/path/exists\"\n                                value={value.hostPath}\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        self.props.apiData\n                                    )\n                                    newApiData.appDefinition.volumes[\n                                        index\n                                    ].hostPath = e.target.value\n                                    self.props.updateApiData(newApiData)\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                    <Col style={{ paddingLeft: 12 }} span={8}>\n                        <Button\n                            type=\"dashed\"\n                            onClick={() => {\n                                const newApiData = Utils.copyObject(\n                                    self.props.apiData\n                                )\n                                newApiData.appDefinition.volumes[\n                                    index\n                                ].hostPath = newApiData.appDefinition.volumes[\n                                    index\n                                ].hostPath\n                                    ? ''\n                                    : '/'\n                                self.props.updateApiData(newApiData)\n                            }}\n                        >\n                            {value.hostPath\n                                ? 'Let CapRover manage path'\n                                : 'Set specific host path'}\n                        </Button>\n                    </Col>\n                </Row>\n            )\n        })\n    }\n\n    createVolSection() {\n        const self = this\n        const app = this.props.apiData!.appDefinition\n\n        if (!app.hasPersistentData) return <div />\n\n        return (\n            <div>\n                <h4>\n                    Persistent Directories &nbsp;\n                    <NewTabLink url=\"https://caprover.com/docs/app-configuration.html#persistent-or-not\">\n                        <InfoCircleOutlined />\n                    </NewTabLink>\n                </h4>\n                <div\n                    className={\n                        app.volumes && !!app.volumes.length\n                            ? 'hide-on-demand'\n                            : ''\n                    }\n                >\n                    <i>\n                        Currently, this app does not have any persistent\n                        directories.\n                    </i>\n                </div>\n\n                {this.createVolRows()}\n                <br />\n                <Button type=\"default\" onClick={() => this.addVolumeClicked()}>\n                    Add Persistent Directory\n                </Button>\n                <br />\n                <br />\n                <br />\n\n                <Row>\n                    <Col\n                        span={6}\n                        style={{ minWidth: this.props.isMobile ? '100%' : 300 }}\n                    >\n                        <Tooltip title=\"Leave empty for automatic placement\">\n                            <Input\n                                addonBefore=\"Node ID\"\n                                className=\"code-input\"\n                                value={app.nodeId ? app.nodeId : ''}\n                                disabled={!this.state.forceEditableNodeId}\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        self.props.apiData\n                                    )\n                                    newApiData.appDefinition.nodeId =\n                                        e.target.value\n                                    self.props.updateApiData(newApiData)\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                    <Col span={12} style={{ paddingLeft: 24 }}>\n                        <Tooltip title=\"WARNING: Changing Node ID causes the content of your persistent directories to be deleted!\">\n                            <Button\n                                type=\"default\"\n                                disabled={this.state.forceEditableNodeId}\n                                onClick={() =>\n                                    this.setState({ forceEditableNodeId: true })\n                                }\n                            >\n                                Edit\n                            </Button>\n                        </Tooltip>\n                    </Col>\n                </Row>\n\n                <br />\n                <br />\n            </div>\n        )\n    }\n\n    render() {\n        const self = this\n        const app = this.props.apiData!.appDefinition\n        return (\n            <div>\n                <h4>\n                    Environmental Variables &nbsp;\n                    <NewTabLink url=\"https://caprover.com/docs/app-configuration.html#environment-variables\">\n                        <InfoCircleOutlined />\n                    </NewTabLink>\n                </h4>\n                <Row align=\"middle\" justify=\"end\">\n                    <h5>\n                        Bulk Edit&nbsp;{' '}\n                        <Switch\n                            onChange={(val) => {\n                                self.setState({\n                                    envVarBulkEdit: val,\n                                    bulkVals: '',\n                                })\n                            }}\n                        />\n                    </h5>\n                </Row>\n                <div\n                    className={\n                        app.envVars && !!app.envVars.length\n                            ? 'hide-on-demand'\n                            : ''\n                    }\n                >\n                    <i>\n                        Currently, this app does not have any custom\n                        environmental variables yet.\n                    </i>\n                </div>\n\n                {this.createEnvVarSection()}\n\n                <br />\n                <br />\n                <br />\n\n                <h4>\n                    Port Mapping &nbsp;\n                    <NewTabLink url=\"https://caprover.com/docs/app-configuration.html#port-mapping\">\n                        <InfoCircleOutlined />\n                    </NewTabLink>\n                </h4>\n                <div\n                    className={\n                        app.ports && !!app.ports.length ? 'hide-on-demand' : ''\n                    }\n                >\n                    <i>\n                        Currently, this app does not have any custom port\n                        mapping.\n                    </i>\n                </div>\n\n                {this.createPortRows()}\n\n                <br />\n\n                <Button\n                    block={this.props.isMobile}\n                    type=\"default\"\n                    onClick={() => this.addPortMappingClicked()}\n                >\n                    Add Port Mapping\n                </Button>\n                <br />\n                <br />\n                <br />\n                {this.createVolSection()}\n                <br />\n                <Row>\n                    <Col\n                        span={6}\n                        style={{ minWidth: this.props.isMobile ? '100%' : 300 }}\n                    >\n                        <Tooltip title=\"Number of running instances of this app\">\n                            <Input\n                                addonBefore=\"Instance Count\"\n                                type=\"number\"\n                                defaultValue={app.instanceCount + ''}\n                                disabled={\n                                    app.hasPersistentData &&\n                                    !this.state.forceEditableInstanceCount\n                                }\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        this.props.apiData\n                                    )\n                                    newApiData.appDefinition.instanceCount =\n                                        Number(e.target.value)\n                                    this.props.updateApiData(newApiData)\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                    <Col span={6}>\n                        <div\n                            style={{ paddingLeft: 24 }}\n                            className={\n                                !app.hasPersistentData ? 'hide-on-demand' : ''\n                            }\n                        >\n                            <Tooltip title=\"Multiple instances of apps with persistent data can be very dangerous and bug prone as they can be accessing the same file on the disk resulting in data corruption. Edit the instance count only if you understand the risk.\">\n                                <Button\n                                    type=\"default\"\n                                    disabled={\n                                        this.state.forceEditableInstanceCount\n                                    }\n                                    onClick={() =>\n                                        this.setState({\n                                            forceEditableInstanceCount: true,\n                                        })\n                                    }\n                                >\n                                    Edit\n                                </Button>\n                            </Tooltip>\n                        </div>\n                    </Col>\n                </Row>\n                <div style={{ height: 50 }} />\n\n                <Row>\n                    <Col span={24}>\n                        <h4>\n                            Pre-Deploy Script\n                            <NewTabLink url=\"https://caprover.com/docs/pre-deploy-script.html\">\n                                <InfoCircleOutlined\n                                    style={{ paddingLeft: 10 }}\n                                />\n                            </NewTabLink>\n                        </h4>\n\n                        <Input.TextArea\n                            spellCheck={false}\n                            autoCorrect=\"off\"\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            className=\"code-input\"\n                            placeholder=\"var preDeployFunction = function (capRoverAppObj, dockerUpdateObject) ...\"\n                            rows={4}\n                            value={\n                                app.preDeployFunction\n                                    ? app.preDeployFunction\n                                    : ''\n                            }\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    this.props.apiData\n                                )\n                                newApiData.appDefinition.preDeployFunction =\n                                    e.target.value\n                                this.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                </Row>\n                <div style={{ height: 30 }} />\n\n                <Row>\n                    <Col span={24}>\n                        <h4>\n                            Service Update Override\n                            <NewTabLink url=\"https://caprover.com/docs/service-update-override.html\">\n                                <InfoCircleOutlined\n                                    style={{ paddingLeft: 10 }}\n                                />\n                            </NewTabLink>\n                        </h4>\n\n                        <Input.TextArea\n                            spellCheck={false}\n                            autoCorrect=\"off\"\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            className=\"code-input\"\n                            placeholder={`## JSON / YAML\n{\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n    \"Image\": \"busybox\",\n    \"Args\": [\n        \"top\"\n    ]....`}\n                            rows={4}\n                            value={\n                                app.serviceUpdateOverride\n                                    ? app.serviceUpdateOverride\n                                    : ''\n                            }\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    this.props.apiData\n                                )\n                                newApiData.appDefinition.serviceUpdateOverride =\n                                    e.target.value\n                                this.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n\n    addPortMappingClicked() {\n        const newApiData = Utils.copyObject(this.props.apiData)\n        newApiData.appDefinition.ports = newApiData.appDefinition.ports || []\n        newApiData.appDefinition.ports.push({\n            containerPort: 0,\n            hostPort: 0,\n        })\n        this.props.updateApiData(newApiData)\n    }\n\n    addEnvVarClicked() {\n        const newApiData = Utils.copyObject(this.props.apiData)\n        newApiData.appDefinition.envVars =\n            newApiData.appDefinition.envVars || []\n        newApiData.appDefinition.envVars.push({\n            key: '',\n            value: '',\n        })\n        this.props.updateApiData(newApiData)\n    }\n\n    addVolumeClicked() {\n        const newApiData = Utils.copyObject(this.props.apiData)\n        newApiData.appDefinition.volumes =\n            newApiData.appDefinition.volumes || []\n        newApiData.appDefinition.volumes.push({\n            containerPath: '',\n            volumeName: '',\n        })\n        this.props.updateApiData(newApiData)\n    }\n\n    reFetchData() {\n        this.props.reFetchData()\n    }\n}\n","function scrollToFixedFromTop(fromTopPx: number, el: HTMLElement) {\n    window.scrollTo(0, fromTopPx)\n    el.scrollTo({\n        top: fromTopPx,\n        behavior: 'smooth',\n    })\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    scrollToTopBar(delay?: number) {\n        const el = document.getElementById('main-content-layout')\n        const currScroll = el ? el.scrollTop : 0\n        if (currScroll <= 120) return\n\n        if (!delay) {\n            scrollToFixedFromTop(0, el!)\n            return\n        }\n\n        setTimeout(() => {\n            scrollToFixedFromTop(0, el!)\n        }, delay)\n    },\n    scrollToThebottom(delay: number) {\n        if (!delay) {\n            window.scrollTo(0, document.body.scrollHeight)\n            return\n        }\n\n        setTimeout(() => {\n            window.scrollTo(0, document.body.scrollHeight)\n        }, delay)\n    },\n}\n","import {\n    DownCircleOutlined,\n    InfoCircleOutlined,\n    MenuFoldOutlined,\n    UpCircleOutlined,\n} from '@ant-design/icons'\nimport { Row, Tooltip } from 'antd'\nimport React from 'react'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport ClickableLink from '../../../global/ClickableLink'\nimport NewTabLink from '../../../global/NewTabLink'\n\nexport default class AppLogsView extends ApiComponent<\n    {\n        appName: string\n    },\n    {\n        expandedLogs: boolean\n        appLogsStringified: string\n        isWrapped: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isWrapped: true,\n            expandedLogs: true,\n            appLogsStringified: '',\n        }\n    }\n\n    fetchLogs() {\n        const self = this\n\n        // See https://docs.docker.com/engine/api/v1.30/#operation/ContainerAttach for logs headers\n        const separators = [\n            '00000000',\n            '01000000',\n            '02000000',\n            '03000000', // This is not in the Docker docs, but can actually happen when the log stream is broken https://github.com/caprover/caprover/issues/366\n        ]\n        const ansiRegex = Utils.getAnsiColorRegex()\n        this.apiManager\n            .fetchAppLogsInHex(this.props.appName)\n            .then(function (logInfo: { logs: string }) {\n                const logsProcessed = logInfo.logs\n                    .split(new RegExp(separators.join('|'), 'g'))\n                    .map((rawRow) => {\n                        let time = 0\n\n                        let textUtf8 = Utils.convertHexStringToUtf8(rawRow)\n\n                        try {\n                            time = new Date(textUtf8.substring(0, 30)).getTime()\n                        } catch (err) {\n                            // ignore... it's just a failure in fetching logs. Ignore to avoid additional noise in console\n                        }\n\n                        return {\n                            text: textUtf8,\n                            time: time,\n                        }\n                    })\n                    .sort((a, b) =>\n                        a.time > b.time ? 1 : b.time > a.time ? -1 : 0\n                    )\n                    .map((a) => {\n                        return a.text\n                    })\n                    .join('')\n                    .replace(ansiRegex, '')\n\n                if (logsProcessed === self.state.appLogsStringified) {\n                    return\n                }\n\n                const firstLogs = !self.state.appLogsStringified\n\n                let textareaNow = document.getElementById('applogs-text-id')\n                // Almost at the bottom. So keep the scroll at the bottom. Otherwise, user, may have manually scrolled up. Respect the user!\n                const shouldScrollToBottom =\n                    firstLogs ||\n                    (!!textareaNow &&\n                        Math.abs(\n                            textareaNow.scrollTop -\n                                (textareaNow.scrollHeight -\n                                    textareaNow.offsetHeight)\n                        ) < 100)\n\n                self.setState({ appLogsStringified: logsProcessed })\n\n                if (shouldScrollToBottom)\n                    setTimeout(function () {\n                        let textarea =\n                            document.getElementById('applogs-text-id')\n                        if (textarea) textarea.scrollTop = textarea.scrollHeight\n                    }, 100)\n            })\n            .catch(function (error) {\n                console.log(error)\n                self.setState({\n                    appLogsStringified: 'fetching app log failed...',\n                })\n            })\n            .then(function () {\n                setTimeout(() => {\n                    if (!self.willUnmountSoon) {\n                        self.fetchLogs()\n                    }\n                }, 2200) // Just a random number to avoid hitting at the same time as build log fetch!\n            })\n    }\n\n    componentDidMount() {\n        const self = this\n        self.fetchLogs()\n    }\n\n    onExpandLogClicked() {\n        this.setState({ expandedLogs: !this.state.expandedLogs })\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <div style={{ height: 20 }} />\n\n                <div>\n                    <div>\n                        <Row justify=\"space-between\" align=\"middle\">\n                            <span>\n                                <Row justify=\"start\" align=\"middle\">\n                                    <span>\n                                        <ClickableLink\n                                            onLinkClicked={() => {\n                                                self.onExpandLogClicked()\n                                            }}\n                                        >\n                                            <h4 className=\"unselectable-span\">\n                                                {this.state.expandedLogs ? (\n                                                    <UpCircleOutlined />\n                                                ) : (\n                                                    <DownCircleOutlined />\n                                                )}\n                                                &nbsp;&nbsp;\n                                                {!this.state.expandedLogs\n                                                    ? 'View'\n                                                    : 'Hide'}{' '}\n                                                App Logs\n                                            </h4>\n                                        </ClickableLink>\n                                    </span>\n\n                                    <span\n                                        style={{\n                                            marginLeft: 20,\n                                            paddingBottom: 3,\n                                        }}\n                                    >\n                                        <Tooltip title=\"View full application logs (not truncated)\">\n                                            <NewTabLink url=\"https://caprover.com/docs/troubleshooting.html#how-to-view-my-applications-log\">\n                                                <InfoCircleOutlined />\n                                            </NewTabLink>\n                                        </Tooltip>\n                                    </span>\n                                </Row>\n                            </span>\n                            <span\n                                className={\n                                    this.state.expandedLogs\n                                        ? ''\n                                        : 'hide-on-demand'\n                                }\n                            >\n                                <ClickableLink\n                                    onLinkClicked={() => {\n                                        self.setState({\n                                            isWrapped: !self.state.isWrapped,\n                                        })\n                                    }}\n                                >\n                                    <h4 className=\"unselectable-span\">\n                                        <MenuFoldOutlined />\n                                        &nbsp;&nbsp;{' '}\n                                        {this.state.isWrapped\n                                            ? \"Don't\"\n                                            : ''}{' '}\n                                        wrap logs &nbsp;&nbsp;\n                                    </h4>\n                                </ClickableLink>\n                            </span>\n                        </Row>\n                    </div>\n\n                    <div\n                        className={\n                            this.state.expandedLogs ? '' : 'hide-on-demand'\n                        }\n                        style={{ padding: 5 }}\n                    >\n                        <textarea\n                            id=\"applogs-text-id\"\n                            className=\"logs-output\"\n                            style={{\n                                whiteSpace: self.state.isWrapped\n                                    ? 'pre-line'\n                                    : 'pre',\n                            }}\n                            value={self.state.appLogsStringified}\n                            readOnly\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Tooltip } from 'antd'\nimport moment from 'moment'\nimport React, { Component } from 'react'\n\nexport default class Timestamp extends Component<{ timestamp: string }, {}> {\n    render() {\n        const timestamp = this.props.timestamp\n        return (\n            <Tooltip title={moment(new Date(timestamp)).fromNow()}>\n                <span>{new Date(timestamp).toLocaleString()}</span>\n            </Tooltip>\n        )\n    }\n}\n","import {\n    CheckCircleTwoTone,\n    ExclamationCircleOutlined,\n    RetweetOutlined,\n} from '@ant-design/icons'\nimport { Card, Modal, Table, Tooltip } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport moment from 'moment'\nimport React, { Component, Fragment } from 'react'\nimport Utils from '../../../../utils/Utils'\nimport ClickableLink from '../../../global/ClickableLink'\nimport Timestamp from '../../../global/Timestamp'\nimport { IAppVersion } from '../../AppDefinition'\n\nexport default class AppVersionTable extends Component<{\n    versions: IAppVersion[]\n    deployedVersion: number\n    onVersionRollbackRequested: (versionToRevert: IAppVersion) => void\n    isMobile: boolean\n}> {\n    getStateRender(version: number, versionDetails: IAppVersion) {\n        if (version === this.props.deployedVersion) {\n            return (\n                <Tooltip title=\"Current Version\">\n                    <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                </Tooltip>\n            )\n        }\n\n        const imageName = versionDetails.deployedImageName\n\n        if (!imageName) {\n            return (\n                <Tooltip title=\"Failed deploy\">\n                    <ExclamationCircleOutlined />\n                </Tooltip>\n            )\n        }\n\n        return (\n            <ClickableLink\n                onLinkClicked={() => this.onRollbackClicked(versionDetails)}\n            >\n                <Tooltip title=\"Revert to this version\">\n                    <span>\n                        <RetweetOutlined />\n                    </span>\n                </Tooltip>\n            </ClickableLink>\n        )\n    }\n    getCols() {\n        const columns: ColumnProps<IAppVersion>[] = [\n            {\n                title: 'State',\n                key: 'revertColumn', // arbitrary unique name for the column\n                align: 'center',\n                dataIndex: 'version' as 'version',\n                render: (version: number, versionDetails: IAppVersion) =>\n                    this.getStateRender(version, versionDetails),\n            },\n            {\n                title: 'Version',\n                align: 'center',\n                dataIndex: 'version' as 'version',\n            },\n            {\n                title: 'Deploy Time',\n                dataIndex: 'timeStamp' as 'timeStamp',\n                render: (timeStamp: string) => {\n                    return <Timestamp timestamp={timeStamp} />\n                },\n            },\n            {\n                title: 'Image Name',\n                dataIndex: 'deployedImageName' as 'deployedImageName',\n            },\n            {\n                title: 'git hash',\n                dataIndex: 'gitHash' as 'gitHash',\n                render: (\n                    gitHashOriginal: string,\n                    versionDetails: IAppVersion\n                ) => {\n                    let gitHash = gitHashOriginal || ''\n                    if (gitHash.length > 12) {\n                        gitHash = gitHash.substr(0, 10) + '...'\n                    }\n                    return (\n                        <Tooltip title={gitHashOriginal}>\n                            <div className=\"code-input\">{gitHash || 'n/a'}</div>\n                        </Tooltip>\n                    )\n                },\n            },\n        ]\n        return columns\n    }\n\n    onRollbackClicked(versionToRevert: IAppVersion) {\n        const self = this\n        const imageName = versionToRevert.deployedImageName!\n        let content = (\n            <span>\n                {`If you had previously deleted this image explicitly through disk cleanup,\n      this revert process will fail.`}\n                <br />\n                <br />\n                {`Do you want to continue with rolling back your app to `}\n                <code>{imageName}</code>?\n            </span>\n        )\n        if (imageName.indexOf('/') > 0) {\n            content = (\n                <span>\n                    {`${imageName} appears to be hosted on Docker Registry.\n        Make sure you have not deleted this image from the repository since it was originally deployed.\n        Deletion usually does not happen automatically, so if you have not deleted the image intentionally,\n        you don't need to worry about this.`}\n                    <br />\n                    <br />\n                    {`Do you want to continue with rolling back your app to `}\n                    <code>{imageName}</code>?\n                </span>\n            )\n        }\n        Modal.confirm({\n            title: 'Rollback?',\n            content,\n            onOk: () => {\n                self.props.onVersionRollbackRequested(versionToRevert)\n            },\n        })\n    }\n\n    render() {\n        const self = this\n        const versionsReversed = Utils.copyObject(self.props.versions).reverse()\n        const columns = this.getCols()\n        return (\n            <div>\n                <h3>Version History</h3>\n                <div>\n                    {this.props.isMobile ? (\n                        versionsReversed.map(\n                            (version, i) =>\n                                i <= 5 && (\n                                    <Card\n                                        type=\"inner\"\n                                        key={i}\n                                        style={{ marginBottom: 8 }}\n                                        title={\n                                            <Fragment>\n                                                <Tooltip\n                                                    title={moment(\n                                                        new Date(\n                                                            version.timeStamp\n                                                        )\n                                                    ).fromNow()}\n                                                >\n                                                    <span>\n                                                        {new Date(\n                                                            version.timeStamp\n                                                        ).toLocaleString()}\n                                                    </span>\n                                                </Tooltip>\n                                                <div>\n                                                    {version.deployedImageName}\n                                                </div>\n                                            </Fragment>\n                                        }\n                                    >\n                                        <div>\n                                            <b>Version:</b> {version.version}\n                                        </div>\n                                        <div>\n                                            <b>Git hash:</b>{' '}\n                                            {version.gitHash || 'n/a'}\n                                        </div>\n                                        <div>\n                                            <b>State:</b>{' '}\n                                            {this.getStateRender(\n                                                version.version,\n                                                version\n                                            )}\n                                        </div>\n                                    </Card>\n                                )\n                        )\n                    ) : (\n                        <Table\n                            size=\"small\"\n                            rowKey=\"timeStamp\"\n                            pagination={{ pageSize: 5 }}\n                            columns={columns}\n                            dataSource={versionsReversed}\n                        />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import {\n    DownCircleOutlined,\n    LoadingOutlined,\n    UpCircleOutlined,\n} from '@ant-design/icons'\nimport { Alert, Row, Spin } from 'antd'\nimport React from 'react'\nimport Toaster from '../../../../utils/Toaster'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport ClickableLink from '../../../global/ClickableLink'\n\nexport default class BuildLogsView extends ApiComponent<\n    {\n        appName: string\n        onAppBuildFinished: () => void\n        buildLogRecreationId: string\n    },\n    {\n        isAppBuilding: boolean\n        expandedLogs: boolean\n        buildLogs: string\n        lastLineNumberPrinted: number\n    }\n> {\n    private fetchBuildLogsInterval: any\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isAppBuilding: false,\n            expandedLogs: !!this.props.buildLogRecreationId,\n            buildLogs: '',\n            lastLineNumberPrinted: -10000,\n        }\n    }\n\n    componentWillUnmount() {\n        // @ts-ignore\n        if (super.componentWillUnmount) super.componentWillUnmount()\n        if (this.fetchBuildLogsInterval) {\n            clearInterval(this.fetchBuildLogsInterval)\n        }\n    }\n\n    fetchBuildLogs() {\n        const self = this\n        this.apiManager\n            .fetchBuildLogs(this.props.appName)\n            .then(function (logInfo: {\n                isAppBuilding: boolean\n                isBuildFailed: boolean\n                logs: {\n                    firstLineNumber: number\n                    lines: string[]\n                }\n            }) {\n                if (self.state.isAppBuilding && !logInfo.isAppBuilding) {\n                    // App was building but not anymore\n                    self.props.onAppBuildFinished()\n                }\n\n                self.setState({ isAppBuilding: logInfo.isAppBuilding })\n                if (logInfo.isAppBuilding) {\n                    // forcefully expanding the view such that when building finishes it doesn't collapses automatically\n                    self.setState({ expandedLogs: true })\n                }\n\n                let lines = logInfo.logs.lines\n                let firstLineNumberOfLogs = logInfo.logs.firstLineNumber\n                let firstLinesToPrint = 0\n                if (firstLineNumberOfLogs > self.state.lastLineNumberPrinted) {\n                    if (firstLineNumberOfLogs < 0) {\n                        // This is the very first fetch, probably firstLineNumberOfLogs is around -50\n                        firstLinesToPrint = -firstLineNumberOfLogs\n                    } else {\n                        self.setState({\n                            buildLogs: `${self.state.buildLogs}[[ TRUNCATED ]]\\n`,\n                        })\n                    }\n                } else {\n                    firstLinesToPrint =\n                        self.state.lastLineNumberPrinted - firstLineNumberOfLogs\n                }\n\n                self.setState({\n                    lastLineNumberPrinted: firstLineNumberOfLogs + lines.length,\n                })\n\n                let lineAdded = false\n\n                let buildLogs = self.state.buildLogs\n                const ansiRegex = Utils.getAnsiColorRegex()\n                for (let i = firstLinesToPrint; i < lines.length; i++) {\n                    const newLine = (lines[i] || '')\n                        .trim()\n                        .replace(ansiRegex, '')\n                    buildLogs += newLine + '\\n'\n\n                    lineAdded = true\n                }\n                self.setState({ buildLogs: buildLogs })\n\n                if (lineAdded) {\n                    setTimeout(function () {\n                        let textarea =\n                            document.getElementById('buildlog-text-id')\n                        if (textarea) textarea.scrollTop = textarea.scrollHeight\n                    }, 100)\n                }\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    componentDidMount() {\n        const self = this\n        this.fetchBuildLogs()\n        this.fetchBuildLogsInterval = setInterval(function () {\n            self.fetchBuildLogs()\n        }, 2000)\n    }\n\n    onExpandLogClicked() {\n        this.setState({ expandedLogs: !this.state.expandedLogs })\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row>\n                    <div\n                        style={{\n                            width: '100%',\n                        }}\n                        className={\n                            this.state.isAppBuilding ? '' : 'hide-on-demand'\n                        }\n                    >\n                        <Alert\n                            message={\n                                <span>\n                                    &nbsp;&nbsp;\n                                    <Spin\n                                        indicator={\n                                            <LoadingOutlined\n                                                style={{ fontSize: 24 }}\n                                                spin\n                                            />\n                                        }\n                                        size=\"default\"\n                                    />\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    Building the image. This might take a few\n                                    minutes...\n                                </span>\n                            }\n                            type=\"info\"\n                        />\n                    </div>\n                </Row>\n\n                <div style={{ height: 20 }} />\n\n                <div>\n                    <div>\n                        <ClickableLink\n                            onLinkClicked={() => {\n                                self.onExpandLogClicked()\n                            }}\n                        >\n                            <h4 className=\"unselectable-span\">\n                                {this.state.expandedLogs ? (\n                                    <UpCircleOutlined />\n                                ) : (\n                                    <DownCircleOutlined />\n                                )}\n                                &nbsp;&nbsp;\n                                {!this.state.expandedLogs\n                                    ? 'View'\n                                    : 'Hide'}{' '}\n                                Build Logs\n                            </h4>\n                        </ClickableLink>\n                    </div>\n\n                    <div\n                        className={\n                            this.state.isAppBuilding || this.state.expandedLogs\n                                ? ''\n                                : 'hide-on-demand'\n                        }\n                        style={{ padding: 5 }}\n                    >\n                        <textarea\n                            id=\"buildlog-text-id\"\n                            className=\"logs-output\"\n                            style={{\n                                whiteSpace: 'pre',\n                            }}\n                            readOnly\n                            value={self.state.buildLogs}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Button, Input } from 'antd'\nimport React, { Component, Fragment } from 'react'\n\nexport default class PasswordField extends Component<\n    {\n        placeholder?: string\n        addonBefore?: string\n        defaultValue: string\n        onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    },\n    any\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isShowing: !props.defaultValue,\n        }\n    }\n\n    render() {\n        const self = this\n        return (\n            <Fragment>\n                {self.state.isShowing\n                    ? self.createInput()\n                    : self.createButton()}\n            </Fragment>\n        )\n    }\n\n    createButton() {\n        const self = this\n        return (\n            <Button\n                style={{ width: '100%' }}\n                onClick={() => {\n                    self.setState({ isShowing: true })\n                }}\n            >\n                Show Password\n            </Button>\n        )\n    }\n\n    createInput() {\n        const self = this\n        return (\n            <Input\n                type=\"text\"\n                spellCheck={false}\n                autoCorrect=\"off\"\n                autoComplete=\"off\"\n                autoCapitalize=\"off\"\n                placeholder={self.props.placeholder}\n                addonBefore={self.props.addonBefore}\n                defaultValue={self.props.defaultValue}\n                onChange={(e) => self.props.onChange(e)}\n            />\n        )\n    }\n}\n","import { Col, Input, Row } from 'antd'\nimport React, { Component } from 'react'\nimport Utils from '../../../../utils/Utils'\nimport PasswordField from '../../../global/PasswordField'\nimport { RepoInfo } from '../../AppDefinition'\n\nexport default class GitRepoForm extends Component<{\n    gitRepoValues: RepoInfo\n    updateRepoInfo: (newRepoInfo: RepoInfo) => void\n}> {\n    render() {\n        return (\n            <div>\n                <form action=\"/\" autoComplete=\"off\">\n                    <Row gutter={20}>\n                        <Col xs={{ span: 24 }} lg={{ span: 12 }}>\n                            <Input\n                                style={{ marginBottom: 20 }}\n                                value={this.props.gitRepoValues.repo}\n                                addonBefore=\"Repository\"\n                                placeholder=\"github.com/someone/something\"\n                                type=\"url\"\n                                spellCheck={false}\n                                autoCorrect=\"off\"\n                                autoComplete=\"off\"\n                                autoCapitalize=\"off\"\n                                onChange={(e) => {\n                                    const newObj = Utils.copyObject(\n                                        this.props.gitRepoValues\n                                    )\n                                    newObj.repo = e.target.value\n                                    this.props.updateRepoInfo(newObj)\n                                }}\n                            />\n                        </Col>\n                        <Col xs={{ span: 24 }} lg={{ span: 12 }}>\n                            <Input\n                                style={{ marginBottom: 20 }}\n                                value={this.props.gitRepoValues.branch}\n                                addonBefore={\n                                    <span>Branch&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                                }\n                                placeholder=\"master\"\n                                type=\"text\"\n                                spellCheck={false}\n                                autoCorrect=\"off\"\n                                autoComplete=\"off\"\n                                autoCapitalize=\"off\"\n                                onChange={(e) => {\n                                    const newObj = Utils.copyObject(\n                                        this.props.gitRepoValues\n                                    )\n                                    newObj.branch = e.target.value\n                                    this.props.updateRepoInfo(newObj)\n                                }}\n                            />\n                        </Col>\n                        <Col\n                            xs={{ span: 24 }}\n                            lg={{ span: 12 }}\n                            className={\n                                this.props.gitRepoValues.sshKey\n                                    ? 'hide-on-demand'\n                                    : ''\n                            }\n                        >\n                            <Input\n                                style={{ marginBottom: 20 }}\n                                value={this.props.gitRepoValues.user}\n                                addonBefore={<span>Username&nbsp;</span>}\n                                placeholder=\"myemail@gmail.com\"\n                                type=\"email\"\n                                onChange={(e) => {\n                                    const newObj = Utils.copyObject(\n                                        this.props.gitRepoValues\n                                    )\n                                    newObj.user = e.target.value\n                                    this.props.updateRepoInfo(newObj)\n                                }}\n                            />\n                        </Col>\n                        <Col\n                            xs={{ span: 24 }}\n                            lg={{ span: 12 }}\n                            className={\n                                this.props.gitRepoValues.sshKey\n                                    ? 'hide-on-demand'\n                                    : ''\n                            }\n                        >\n                            <PasswordField\n                                defaultValue={this.props.gitRepoValues.password}\n                                addonBefore=\"Password\"\n                                placeholder=\"githubpassword\"\n                                onChange={(e) => {\n                                    const newObj = Utils.copyObject(\n                                        this.props.gitRepoValues\n                                    )\n                                    newObj.password = e.target.value\n                                    this.props.updateRepoInfo(newObj)\n                                }}\n                            />\n                        </Col>\n                        <Col span={24}>\n                            <span>\n                                Or, instead of username/password, use SSH Key:\n                            </span>\n                            <Input.TextArea\n                                style={{ marginBottom: 20 }}\n                                rows={4}\n                                value={this.props.gitRepoValues.sshKey}\n                                placeholder={\n                                    '-----BEGIN RSA PRIVATE KEY-----\\nAABBBCCC'\n                                }\n                                onChange={(e) => {\n                                    const newObj = Utils.copyObject(\n                                        this.props.gitRepoValues\n                                    )\n                                    newObj.sshKey = e.target.value\n                                    if (newObj.sshKey) {\n                                        // Upon changing SSH key, we forcefully remove user/pass to inform the user that SSH will take priority\n                                        newObj.password = ''\n                                        newObj.user = ''\n                                    }\n                                    this.props.updateRepoInfo(newObj)\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        )\n    }\n}\n","import { InboxOutlined } from '@ant-design/icons'\nimport { Button, Col, message, Row, Upload } from 'antd'\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface'\nimport React from 'react'\nimport Toaster from '../../../../utils/Toaster'\nimport ApiComponent from '../../../global/ApiComponent'\n\nexport default class TarUploader extends ApiComponent<\n    {\n        appName: string\n        onUploadSucceeded: () => void\n    },\n    {\n        fileToBeUploaded: UploadFile | undefined\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            fileToBeUploaded: undefined,\n        }\n    }\n\n    beforeUpload = (file: File) => {\n        // We handle upload manually :)\n        return false\n    }\n\n    handleChange = (info: UploadChangeParam) => {\n        if (info.fileList.length > 1) {\n            message.error(\n                'You can only upload one TAR file! Remove the currently selected file first.'\n            )\n            return\n        }\n\n        if (info.fileList.length === 0) {\n            this.setState({ fileToBeUploaded: undefined })\n            message.info('File removed')\n            return\n        }\n\n        let file = info.fileList[0]\n\n        if (file.name.indexOf('.tar') < 0) {\n            message.error('You can only upload a TAR file!')\n            return\n        }\n\n        this.setState({ fileToBeUploaded: file })\n    }\n\n    startUploadAndDeploy() {\n        const self = this\n\n        const file = self.state.fileToBeUploaded!\n        self.setState({ fileToBeUploaded: undefined })\n        message.info('Upload has started')\n\n        Promise.resolve()\n            .then(function () {\n                return self.apiManager.uploadAppData(\n                    self.props.appName,\n                    file.originFileObj! as File\n                )\n            })\n            .then(function () {\n                self.props.onUploadSucceeded()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.setState({ fileToBeUploaded: file })\n                })\n            )\n    }\n\n    render() {\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 24 }} lg={{ span: 12 }}>\n                        <Upload.Dragger\n                            name=\"files\"\n                            accept=\"*/*\"\n                            multiple={false}\n                            fileList={\n                                this.state.fileToBeUploaded\n                                    ? [this.state.fileToBeUploaded]\n                                    : undefined\n                            }\n                            listType=\"text\"\n                            onChange={this.handleChange}\n                            beforeUpload={this.beforeUpload}\n                            action=\"//\" // this is unused as beforeUpload always returns false\n                        >\n                            <p className=\"ant-upload-drag-icon\">\n                                <InboxOutlined />\n                            </p>\n                            <p className=\"ant-upload-text\">\n                                Click or drag TAR file to this area to upload\n                            </p>\n                            <p className=\"ant-upload-hint\">\n                                Must contain <code>captain-definition</code>{' '}\n                                file.\n                            </p>\n                        </Upload.Dragger>\n                    </Col>\n                </Row>\n\n                <Row justify=\"center\">\n                    <Button\n                        style={{ marginTop: 40 }}\n                        disabled={!this.state.fileToBeUploaded}\n                        onClick={() => this.startUploadAndDeploy()}\n                        type=\"primary\"\n                        size=\"large\"\n                    >\n                        Upload &amp; Deploy\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import { Button, Input, Row } from 'antd'\nimport React from 'react'\nimport Toaster from '../../../../utils/Toaster'\nimport ApiComponent from '../../../global/ApiComponent'\n\nexport default abstract class UploaderPlainTextBase extends ApiComponent<\n    {\n        appName: string\n        onUploadSucceeded: () => void\n    },\n    {\n        userEnteredValue: string\n        uploadInProcess: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            userEnteredValue: '',\n            uploadInProcess: false,\n        }\n    }\n\n    protected abstract getPlaceHolderValue(): string\n\n    protected abstract convertDataToCaptainDefinition(\n        userEnteredValue: string\n    ): string\n\n    protected isSingleLine(): boolean {\n        return false\n    }\n\n    startDeploy(captainDefinitionToBeUploaded: string) {\n        const self = this\n\n        Promise.resolve() //\n            .then(function () {\n                self.setState({ uploadInProcess: true })\n                return self.apiManager.uploadCaptainDefinitionContent(\n                    self.props.appName,\n                    JSON.parse(captainDefinitionToBeUploaded),\n                    '',\n                    true\n                )\n            })\n            .then(function () {\n                self.setState({ userEnteredValue: '' })\n                self.props.onUploadSucceeded()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ uploadInProcess: false })\n            })\n    }\n\n    createTextArea() {\n        const self = this\n        if (self.isSingleLine()) {\n            return (\n                <Input\n                    className=\"code-input\"\n                    placeholder={self.getPlaceHolderValue()}\n                    value={self.state.userEnteredValue}\n                    onChange={(e) => {\n                        self.setState({\n                            userEnteredValue: e.target.value,\n                        })\n                    }}\n                />\n            )\n        }\n\n        return (\n            <Input.TextArea\n                className=\"code-input\"\n                placeholder={self.getPlaceHolderValue()}\n                rows={7}\n                value={self.state.userEnteredValue}\n                onChange={(e) => {\n                    self.setState({\n                        userEnteredValue: e.target.value,\n                    })\n                }}\n            />\n        )\n    }\n\n    render() {\n        const self = this\n        return (\n            <div style={{ padding: 16 }}>\n                <Row>{self.createTextArea()}</Row>\n                <div style={{ height: 20 }} />\n                <Row justify=\"end\">\n                    <Button\n                        disabled={\n                            self.state.uploadInProcess ||\n                            !self.state.userEnteredValue.trim()\n                        }\n                        type=\"primary\"\n                        onClick={() =>\n                            self.startDeploy(\n                                self.convertDataToCaptainDefinition(\n                                    self.state.userEnteredValue\n                                )\n                            )\n                        }\n                    >\n                        Deploy Now\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import UploaderPlainTextBase from './UploaderPlainTextBase'\n\nexport default class UploaderPlainTextCaptainDefinition extends UploaderPlainTextBase {\n    protected getPlaceHolderValue() {\n        return `{\n    \"schemaVersion\" :2 ,\n    \"imageName\" : \"mysql:5.7\n}`\n    }\n\n    protected convertDataToCaptainDefinition(userEnteredValue: string) {\n        return userEnteredValue.trim()\n    }\n}\n","import { ICaptainDefinition } from '../../../../models/ICaptainDefinition'\nimport UploaderPlainTextBase from './UploaderPlainTextBase'\n\nexport default class UploaderPlainTextDockerfile extends UploaderPlainTextBase {\n    protected getPlaceHolderValue() {\n        return `# Derived from official mysql image (our base image)\nFROM mysql:5.7\n# Add a database\nENV MYSQL_DATABASE company`\n    }\n\n    protected convertDataToCaptainDefinition(userEnteredValue: string) {\n        const capDefinition: ICaptainDefinition = {\n            schemaVersion: 2,\n            dockerfileLines: userEnteredValue.trim().split('\\n'),\n        }\n\n        return JSON.stringify(capDefinition)\n    }\n}\n","import { ICaptainDefinition } from '../../../../models/ICaptainDefinition'\nimport UploaderPlainTextBase from './UploaderPlainTextBase'\n\nexport default class UploaderPlainTextImageName extends UploaderPlainTextBase {\n    protected getPlaceHolderValue() {\n        return `nginxdemos/hello:latest`\n    }\n\n    protected isSingleLine() {\n        return true\n    }\n\n    protected convertDataToCaptainDefinition(userEnteredValue: string) {\n        const capDefinition: ICaptainDefinition = {\n            schemaVersion: 2,\n            imageName: userEnteredValue.trim(),\n        }\n\n        return JSON.stringify(capDefinition)\n    }\n}\n","import { RocketOutlined } from '@ant-design/icons'\nimport { Button, Col, Input, message, Row, Tooltip } from 'antd'\nimport deepEqual from 'deep-equal'\nimport React from 'react'\nimport DomUtils from '../../../../utils/DomUtils'\nimport Toaster from '../../../../utils/Toaster'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport NewTabLink from '../../../global/NewTabLink'\nimport { IAppDef, IAppVersion, RepoInfo } from '../../AppDefinition'\nimport { AppDetailsTabProps } from '../AppDetails'\nimport AppLogsView from './AppLogsView'\nimport AppVersionTable from './AppVersionTable'\nimport BuildLogsView from './BuildLogsView'\nimport GitRepoForm from './GitRepoForm'\nimport TarUploader from './TarUploader'\nimport UploaderPlainTextCaptainDefinition from './UploaderPlainTextCaptainDefinition'\nimport UploaderPlainTextDockerfile from './UploaderPlainTextDockerfile'\nimport UploaderPlainTextImageName from './UploaderPlainTextImageName'\n\nexport default class Deployment extends ApiComponent<\n    AppDetailsTabProps,\n    {\n        dummyVar: undefined\n        forceEditableCaptainDefinitionPath: boolean\n        buildLogRecreationId: string\n        updatedVersions:\n            | { versions: IAppVersion[]; deployedVersion: number }\n            | undefined\n    }\n> {\n    initRepoInfo: RepoInfo\n\n    constructor(props: AppDetailsTabProps) {\n        super(props)\n        this.state = {\n            dummyVar: undefined,\n            forceEditableCaptainDefinitionPath: false,\n            updatedVersions: undefined,\n            buildLogRecreationId: '',\n        }\n\n        const { appPushWebhook } = props.apiData.appDefinition\n        this.initRepoInfo = appPushWebhook\n            ? { ...appPushWebhook.repoInfo }\n            : {\n                  user: '',\n                  password: '',\n                  branch: '',\n                  sshKey: '',\n                  repo: '',\n              }\n    }\n\n    onUploadSuccess() {\n        message.info('Build has started')\n        this.setState({ buildLogRecreationId: `${new Date().getTime()}` })\n        DomUtils.scrollToTopBar()\n    }\n\n    onAppBuildFinished() {\n        const self = this\n        self.apiManager\n            .getAllApps()\n            .then(function (data) {\n                const appDefs = data.appDefinitions as IAppDef[]\n                for (let index = 0; index < appDefs.length; index++) {\n                    const element = appDefs[index]\n                    if (\n                        element.appName ===\n                        self.props.apiData.appDefinition.appName\n                    ) {\n                        return Utils.copyObject(element)\n                    }\n                }\n                throw new Error('App not found!')\n            })\n            .then(function (app) {\n                self.setState({\n                    updatedVersions: {\n                        deployedVersion: app.deployedVersion,\n                        versions: app.versions,\n                    },\n                })\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    onVersionRollbackRequested(version: IAppVersion) {\n        const self = this\n        self.apiManager\n            .uploadCaptainDefinitionContent(\n                self.props.apiData.appDefinition.appName!,\n                {\n                    schemaVersion: 2,\n                    // We should use imageName, but since imageName does not report build failure (since there is no build!)\n                    // If we use that, and the image is not available, the service will not work.\n                    dockerfileLines: [`FROM ${version.deployedImageName}`],\n                },\n                version.gitHash || '',\n                true\n            )\n            .then(function () {\n                self.onUploadSuccess()\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    render() {\n        const self = this\n        const app = this.props.apiData.appDefinition\n        const hasPushToken =\n            app.appPushWebhook && app.appPushWebhook.pushWebhookToken\n        const repoInfo = app.appPushWebhook\n            ? app.appPushWebhook.repoInfo\n            : {\n                  user: '',\n                  password: '',\n                  branch: '',\n                  sshKey: '',\n                  repo: '',\n              }\n\n        const webhookPushUrlRelativePath = hasPushToken\n            ? `/user/apps/webhooks/triggerbuild?namespace=captain&token=${\n                  app.appPushWebhook!.pushWebhookToken\n              }`\n            : ''\n\n        const webhookPushUrlFullPath = `${window.location.protocol}//${this.props.apiData.captainSubDomain}.${this.props.apiData.rootDomain}/api/v2${webhookPushUrlRelativePath}`\n\n        return (\n            <div>\n                <BuildLogsView\n                    onAppBuildFinished={() => self.onAppBuildFinished()}\n                    appName={app.appName!}\n                    buildLogRecreationId={self.state.buildLogRecreationId}\n                    key={`${app.appName!}-${self.state.buildLogRecreationId}`}\n                />\n                <div style={{ height: 20 }} />\n                <hr />\n                <div style={{ height: 20 }} />\n\n                <AppVersionTable\n                    isMobile={this.props.isMobile}\n                    onVersionRollbackRequested={(versionToRevert) =>\n                        self.onVersionRollbackRequested(versionToRevert)\n                    }\n                    versions={\n                        self.state.updatedVersions\n                            ? self.state.updatedVersions.versions\n                            : app.versions\n                    }\n                    deployedVersion={\n                        self.state.updatedVersions\n                            ? self.state.updatedVersions.deployedVersion\n                            : app.deployedVersion\n                    }\n                />\n\n                <div style={{ height: 20 }} />\n                <AppLogsView\n                    appName={app.appName!}\n                    key={app.appName! + '-LogsView'}\n                />\n\n                <hr />\n                <div style={{ height: 40 }} />\n                <h4>\n                    <RocketOutlined /> Method 1: Official CLI\n                </h4>\n                <p>\n                    Use CLI deploy command. This is the easiest method as it\n                    only requires a simply command like{' '}\n                    <code>caprover deploy</code>. Read more about it in{' '}\n                    <NewTabLink url=\"https://caprover.com/docs/get-started.html#step-4-deploy-the-test-app\">\n                        the docs\n                    </NewTabLink>\n                    . If you're using CI/CD to run <code>caprover deploy</code>{' '}\n                    and you do not wish to use your password, you can use{' '}\n                    <NewTabLink url=\"https://caprover.com/docs/ci-cd-integration.html#app-tokens\">\n                        app-specific tokens\n                    </NewTabLink>\n                    .\n                </p>\n                <Row\n                    justify=\"start\"\n                    style={{ marginTop: this.props.isMobile ? 15 : 0 }}\n                >\n                    <Col flex=\"0\">\n                        <Button\n                            style={{\n                                margin: 5,\n                            }}\n                            block={this.props.isMobile}\n                            onClick={() => {\n                                const newApiData = Utils.copyObject(\n                                    this.props.apiData\n                                )\n                                let tokenConfig =\n                                    newApiData.appDefinition\n                                        .appDeployTokenConfig\n                                if (!tokenConfig) {\n                                    tokenConfig = {\n                                        enabled: false,\n                                    }\n                                }\n                                tokenConfig.enabled = !tokenConfig.enabled\n                                newApiData.appDefinition.appDeployTokenConfig =\n                                    tokenConfig\n                                self.props.updateApiData(newApiData)\n                                // This is a hack! Find a better way!\n                                // We need this delay, otherwise the new state will not be used by onUpdateConfigAndSave\n                                setTimeout(\n                                    self.props.onUpdateConfigAndSave,\n                                    100\n                                )\n                            }}\n                        >\n                            {app.appDeployTokenConfig?.enabled\n                                ? 'Disable App Token'\n                                : 'Enable App Token'}\n                        </Button>\n                    </Col>{' '}\n                    <Col flex=\"auto\">\n                        <Input\n                            onFocus={(e) => {\n                                if (\n                                    !!app.appDeployTokenConfig?.appDeployToken\n                                ) {\n                                    e.target.select()\n                                    document.execCommand('copy')\n                                    message.info('Copied to clipboard!')\n                                }\n                            }}\n                            style={{\n                                margin: 5,\n                            }}\n                            className=\"code-input\"\n                            readOnly={true}\n                            disabled={!app.appDeployTokenConfig?.appDeployToken}\n                            value={\n                                app.appDeployTokenConfig?.enabled\n                                    ? app.appDeployTokenConfig?.appDeployToken\n                                    : '** Enable App Token to generate a random app token **'\n                            }\n                        />\n                    </Col>\n                </Row>\n                <div style={{ height: 20 }} />\n                <h4>\n                    <RocketOutlined /> Method 2: Tarball\n                </h4>\n                <p>\n                    You can simply create a tarball (<code>.tar</code>) of your\n                    project and upload it here via upload button.\n                </p>\n\n                <TarUploader\n                    onUploadSucceeded={() => self.onUploadSuccess()}\n                    appName={app.appName!}\n                />\n\n                <div style={{ height: 40 }} />\n                <h4>\n                    <RocketOutlined /> Method 3: Deploy from\n                    Github/Bitbucket/Gitlab\n                </h4>\n                <p>\n                    Enter your repository information in the form and save. Then\n                    copy the URL in the box as a webhook on Github, Bitbucket,\n                    Gitlab and etc. Once you push a commit, CapRover starts a\n                    new build.\n                    <br />\n                </p>\n                <Row>\n                    <Input\n                        onFocus={(e) => {\n                            if (hasPushToken) {\n                                e.target.select()\n                                document.execCommand('copy')\n                                message.info('Copied to clipboard!')\n                            }\n                        }}\n                        className=\"code-input\"\n                        readOnly={true}\n                        disabled={!hasPushToken}\n                        value={\n                            hasPushToken\n                                ? webhookPushUrlFullPath\n                                : '** Add repo info and save for this webhook to appear **'\n                        }\n                    />\n                </Row>\n                <br />\n                <GitRepoForm\n                    gitRepoValues={repoInfo}\n                    updateRepoInfo={(newRepo) => {\n                        const newApiData = Utils.copyObject(this.props.apiData)\n                        if (newApiData.appDefinition.appPushWebhook) {\n                            newApiData.appDefinition.appPushWebhook.repoInfo =\n                                Utils.copyObject(newRepo)\n                        } else {\n                            newApiData.appDefinition.appPushWebhook = {\n                                repoInfo: Utils.copyObject(newRepo),\n                            }\n                        }\n                        this.props.updateApiData(newApiData)\n                    }}\n                />\n                <Row\n                    justify=\"end\"\n                    style={{ marginTop: this.props.isMobile ? 15 : 0 }}\n                >\n                    <Button\n                        disabled={!hasPushToken}\n                        style={{ marginRight: this.props.isMobile ? 0 : 10 }}\n                        block={this.props.isMobile}\n                        onClick={() => {\n                            self.apiManager\n                                .forceBuild(webhookPushUrlRelativePath)\n                                .then(function () {\n                                    self.onUploadSuccess()\n                                })\n                                .catch(Toaster.createCatcher())\n                        }}\n                    >\n                        Force Build\n                    </Button>\n                    <Button\n                        disabled={deepEqual(repoInfo, self.initRepoInfo)}\n                        type=\"primary\"\n                        style={{ marginTop: this.props.isMobile ? 15 : 0 }}\n                        block={this.props.isMobile}\n                        onClick={() => self.props.onUpdateConfigAndSave()}\n                    >\n                        Save &amp; Update\n                    </Button>\n                </Row>\n                <div style={{ height: 20 }} />\n                <h4>\n                    <RocketOutlined /> Method 4: Deploy plain Dockerfile\n                </h4>\n                <UploaderPlainTextDockerfile\n                    appName={app.appName!}\n                    onUploadSucceeded={() => self.onUploadSuccess()}\n                />\n                <div style={{ height: 20 }} />\n                <h4>\n                    <RocketOutlined /> Method 5: Deploy captain-definition file\n                </h4>\n                <UploaderPlainTextCaptainDefinition\n                    appName={app.appName!}\n                    onUploadSucceeded={() => self.onUploadSuccess()}\n                />\n                <div style={{ height: 20 }} />\n                <h4>\n                    <RocketOutlined /> Method 6: Deploy via ImageName\n                </h4>\n                <UploaderPlainTextImageName\n                    appName={app.appName!}\n                    onUploadSucceeded={() => self.onUploadSuccess()}\n                />\n                <div style={{ height: 20 }} />\n                <Row>\n                    <Col\n                        xs={{ span: 24 }}\n                        lg={{ span: 6 }}\n                        style={{ minWidth: this.props.isMobile ? '100%' : 400 }}\n                    >\n                        {this.props.isMobile &&\n                            'captain-definition Relative Path'}\n                        <Input\n                            addonBefore={\n                                !this.props.isMobile &&\n                                'captain-definition Relative Path'\n                            }\n                            type=\"text\"\n                            defaultValue={\n                                app.captainDefinitionRelativeFilePath + ''\n                            }\n                            disabled={\n                                !this.state.forceEditableCaptainDefinitionPath\n                            }\n                            onChange={(e) => {\n                                const newApiData = Utils.copyObject(\n                                    this.props.apiData\n                                )\n                                newApiData.appDefinition.captainDefinitionRelativeFilePath =\n                                    e.target.value\n                                this.props.updateApiData(newApiData)\n                            }}\n                        />\n                    </Col>\n                    <Col xs={{ span: 24 }} lg={{ span: 12 }}>\n                        <div\n                            style={{\n                                paddingLeft: this.props.isMobile ? 0 : 24,\n                                marginTop: this.props.isMobile ? 8 : 0,\n                            }}\n                        >\n                            <Tooltip title=\"You shouldn't need to change this path unless you have a repository with multiple captain-definition files (mono repos). Read docs for captain definition before editing this\">\n                                <Button\n                                    type=\"default\"\n                                    block={this.props.isMobile}\n                                    disabled={\n                                        this.state\n                                            .forceEditableCaptainDefinitionPath\n                                    }\n                                    onClick={() =>\n                                        this.setState({\n                                            forceEditableCaptainDefinitionPath:\n                                                true,\n                                        })\n                                    }\n                                >\n                                    Edit\n                                </Button>\n                            </Tooltip>\n                            <Button\n                                style={{\n                                    marginLeft: this.props.isMobile ? 0 : 20,\n                                    marginTop: this.props.isMobile ? 8 : 0,\n                                }}\n                                block={this.props.isMobile}\n                                disabled={\n                                    !this.state\n                                        .forceEditableCaptainDefinitionPath\n                                }\n                                type=\"primary\"\n                                onClick={() =>\n                                    self.props.onUpdateConfigAndSave()\n                                }\n                            >\n                                Save &amp; Update\n                            </Button>\n                        </div>\n                    </Col>\n\n                    <Col span={6} />\n                </Row>\n            </div>\n        )\n    }\n}\n","import { InfoCircleOutlined } from '@ant-design/icons'\nimport {\n    Button,\n    Checkbox,\n    Col,\n    Input,\n    message,\n    Modal,\n    Row,\n    Tooltip,\n} from 'antd'\nimport React, { Component, Fragment } from 'react'\nimport Toaster from '../../../utils/Toaster'\nimport Utils from '../../../utils/Utils'\nimport NewTabLink from '../../global/NewTabLink'\nimport { AppDetailsTabProps } from './AppDetails'\n\nconst Search = Input.Search\n\nexport default class HttpSettings extends Component<\n    AppDetailsTabProps,\n    {\n        newDomain: string\n        dialogHttpUser: string\n        dialogHttpPass: string\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            newDomain: '',\n            dialogHttpUser: '',\n            dialogHttpPass: '',\n        }\n    }\n\n    render() {\n        return <div>{this.createHttpSettingsContent()}</div>\n    }\n\n    reFetchData() {\n        this.props.reFetchData()\n    }\n\n    enableDefaultHttps() {\n        const self = this\n        this.props.setLoading(true)\n\n        return Promise.resolve()\n            .then(function () {\n                return self.props.apiManager.enableSslForBaseDomain(\n                    self.props.apiData!.appDefinition.appName!\n                )\n            })\n            .then(function () {\n                message.success('HTTPS is now enabled for your app')\n            })\n            .then(function () {\n                self.reFetchData()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.props.setLoading(false)\n                })\n            )\n    }\n\n    onConnectNewDomainClicked(newDomain: string) {\n        const self = this\n        this.props.setLoading(true)\n\n        return Promise.resolve()\n            .then(function () {\n                return self.props.apiManager.attachNewCustomDomainToApp(\n                    self.props.apiData!.appDefinition.appName!,\n                    newDomain\n                )\n            })\n            .then(function () {\n                message.success('New domain is now successfully connected!')\n            })\n            .then(function () {\n                self.reFetchData()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.props.setLoading(false)\n                })\n            )\n    }\n\n    onEnableCustomDomainSslClicked(customDomain: string) {\n        const self = this\n        this.props.setLoading(true)\n\n        return Promise.resolve()\n            .then(function () {\n                return self.props.apiManager.enableSslForCustomDomain(\n                    self.props.apiData!.appDefinition.appName!,\n                    customDomain\n                )\n            })\n            .then(function () {\n                message.success(\n                    'HTTPS is successfully activated for your domain!'\n                )\n            })\n            .then(function () {\n                self.reFetchData()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.props.setLoading(false)\n                })\n            )\n    }\n\n    onRemoveCustomDomainClicked(customDomain: string) {\n        const self = this\n        this.props.setLoading(true)\n\n        return Promise.resolve()\n            .then(function () {\n                return self.props.apiManager.removeCustomDomain(\n                    self.props.apiData!.appDefinition.appName!,\n                    customDomain\n                )\n            })\n            .then(function () {\n                message.success('Your custom domain is successfully removed!')\n            })\n            .then(function () {\n                self.reFetchData()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.props.setLoading(false)\n                })\n            )\n    }\n\n    createCustomDomainRows() {\n        const customDomains =\n            this.props.apiData!.appDefinition.customDomain || []\n\n        const rows: JSX.Element[] = []\n        customDomains.forEach((c) => {\n            const row = (\n                <Row key={c.publicDomain} style={{ marginTop: 15 }}>\n                    <Button.Group size=\"small\">\n                        <Tooltip\n                            title={\n                                c.hasSsl\n                                    ? 'Already activated'\n                                    : 'Click to activate HTTPS for this domain'\n                            }\n                        >\n                            <Button\n                                disabled={c.hasSsl}\n                                onClick={() => {\n                                    this.onEnableCustomDomainSslClicked(\n                                        c.publicDomain\n                                    )\n                                }}\n                                type=\"primary\"\n                            >\n                                Enable HTTPS\n                            </Button>\n                        </Tooltip>\n                        <Button\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.onRemoveCustomDomainClicked(c.publicDomain)\n                            }}\n                        >\n                            Remove\n                        </Button>\n                    </Button.Group>\n\n                    <NewTabLink url={`http://${c.publicDomain}`}>\n                        {c.publicDomain}\n                    </NewTabLink>\n                </Row>\n            )\n            rows.push(row)\n        })\n\n        return rows\n    }\n\n    onEditDefaultNginxConfigClicked() {\n        const newApiData = Utils.copyObject(this.props.apiData!)\n        newApiData.appDefinition.customNginxConfig =\n            this.props.apiData!.defaultNginxConfig\n        this.props.updateApiData(newApiData)\n    }\n\n    createCustomNginx() {\n        const customNginxConfig =\n            this.props.apiData!.appDefinition.customNginxConfig!\n        if (!customNginxConfig) {\n            return (\n                <div>\n                    <Button\n                        type=\"default\"\n                        onClick={() => this.onEditDefaultNginxConfigClicked()}\n                    >\n                        Edit Default Nginx Configurations\n                    </Button>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <p>\n                    Templates are built using EJS template pattern. Do not\n                    change the areas between <code>&lt;%</code> and{' '}\n                    <code>%&gt;</code> , unless you really know what you're\n                    doing! To revert to default, simply remove all the content.\n                </p>\n                <Input.TextArea\n                    style={{\n                        fontFamily: 'monospace',\n                    }}\n                    onChange={(e) => {\n                        const newApiData = Utils.copyObject(this.props.apiData!)\n                        newApiData.appDefinition.customNginxConfig =\n                            e.target.value\n                        this.props.updateApiData(newApiData)\n                    }}\n                    rows={17}\n                    defaultValue={customNginxConfig}\n                />\n            </div>\n        )\n    }\n\n    createHttpDetailsSettingsContent() {\n        const self = this\n        const app = this.props.apiData!.appDefinition\n        const rootDomain = this.props.apiData!.rootDomain\n        const basicAuthUsername = self.props.apiData.appDefinition.httpAuth\n            ? self.props.apiData.appDefinition.httpAuth.user\n            : ''\n\n        return (\n            <div>\n                <p>Your app is publicly available at:</p>\n                <Row>\n                    <Button.Group size=\"small\">\n                        <Tooltip\n                            title={\n                                app.hasDefaultSubDomainSsl\n                                    ? 'Already activated'\n                                    : 'Click to activate HTTPS for this domain'\n                            }\n                        >\n                            <Button\n                                disabled={app.hasDefaultSubDomainSsl}\n                                block={this.props.isMobile}\n                                onClick={() => {\n                                    this.enableDefaultHttps()\n                                }}\n                                type=\"primary\"\n                            >\n                                Enable HTTPS\n                            </Button>\n                        </Tooltip>\n                    </Button.Group>\n                    <NewTabLink\n                        url={`http${app.hasDefaultSubDomainSsl ? 's' : ''}://${\n                            app.appName\n                        }.${rootDomain}`}\n                    >\n                        <span\n                            style={{\n                                marginLeft: 20,\n                            }}\n                        >\n                            {`http${app.hasDefaultSubDomainSsl ? 's' : ''}://${\n                                app.appName\n                            }.${rootDomain}`}\n                        </span>\n                    </NewTabLink>\n                </Row>\n                {this.createCustomDomainRows()}\n                <br />\n                <Row>\n                    <Col xs={{ span: 24 }} lg={{ span: 15 }}>\n                        {this.props.isMobile ? (\n                            <Fragment>\n                                <Input\n                                    placeholder=\"www.the-best-app-in-the-world.com\"\n                                    onChange={(e) =>\n                                        this.setState({\n                                            newDomain: e.target.value,\n                                        })\n                                    }\n                                />\n                                <Button\n                                    style={{ marginTop: 8 }}\n                                    block\n                                    onClick={() =>\n                                        this.onConnectNewDomainClicked(\n                                            this.state.newDomain\n                                        )\n                                    }\n                                    type=\"primary\"\n                                >\n                                    Connect New Domain\n                                </Button>\n                            </Fragment>\n                        ) : (\n                            <Search\n                                placeholder=\"www.the-best-app-in-the-world.com\"\n                                enterButton=\"Connect New Domain\"\n                                onSearch={(value) =>\n                                    this.onConnectNewDomainClicked(value)\n                                }\n                            />\n                        )}\n                    </Col>\n                    &nbsp;&nbsp;&nbsp;\n                    <Tooltip title=\"Make sure the new domain points to this IP, otherwise verification will fail.\">\n                        <span>\n                            <InfoCircleOutlined style={{ marginTop: 9 }} />\n                        </span>\n                    </Tooltip>\n                </Row>\n\n                <br />\n                <br />\n                {this.createCustomNginx()}\n                <br />\n                <br />\n\n                <Row>\n                    <Col\n                        xs={{ span: 24 }}\n                        lg={{ span: 6 }}\n                        style={{ minWidth: this.props.isMobile ? '100%' : 300 }}\n                    >\n                        <Tooltip title=\"HTTP port inside the container. Default is 80. Change only if the app is running in a different port. This is used only for HTTP apps, not databases.\">\n                            <Input\n                                addonBefore={`Container ${\n                                    this.props.isMobile ? ' ' : 'HTTP '\n                                }Port`}\n                                type=\"number\"\n                                defaultValue={\n                                    app.containerHttpPort\n                                        ? app.containerHttpPort + ''\n                                        : ''\n                                }\n                                onChange={(e) => {\n                                    const newApiData = Utils.copyObject(\n                                        this.props.apiData\n                                    )\n                                    newApiData.appDefinition.containerHttpPort =\n                                        Number(e.target.value)\n                                    this.props.updateApiData(newApiData)\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                </Row>\n\n                <br />\n                <br />\n\n                <Row>\n                    <Checkbox\n                        defaultChecked={\n                            !!this.props.apiData.appDefinition.forceSsl\n                        }\n                        onChange={(e: any) => {\n                            const newApiData = Utils.copyObject(\n                                this.props.apiData!\n                            )\n                            newApiData.appDefinition.forceSsl =\n                                !!e.target.checked\n                            this.props.updateApiData(newApiData)\n                        }}\n                    >\n                        Force HTTPS by redirecting all HTTP traffic to HTTPS\n                    </Checkbox>\n                    <Tooltip title=\"Forcing HTTPS causes domains without HTTPS to malfunction. Make sure you enable HTTPS for the domain you want to use, before enabling Force HTTPS option.\">\n                        <InfoCircleOutlined />\n                    </Tooltip>\n                </Row>\n                <br />\n                <br />\n\n                <Row>\n                    <Checkbox\n                        defaultChecked={\n                            !!this.props.apiData.appDefinition.websocketSupport\n                        }\n                        onChange={(e: any) => {\n                            const newApiData = Utils.copyObject(\n                                this.props.apiData!\n                            )\n                            newApiData.appDefinition.websocketSupport =\n                                !!e.target.checked\n                            this.props.updateApiData(newApiData)\n                        }}\n                    >\n                        Websocket Support\n                    </Checkbox>\n                    <Tooltip title=\"Adds the upgrade proxy headers to NGINX config.\">\n                        <InfoCircleOutlined />\n                    </Tooltip>\n                </Row>\n                <br />\n                <br />\n                <Row>\n                    <Button\n                        style={{ marginRight: 20 }}\n                        type=\"default\"\n                        onClick={() => self.onEditHttpAuthClicked()}\n                    >\n                        Edit HTTP Basic Auth\n                    </Button>\n                    {this.props.isMobile && <div style={{ marginTop: 10 }} />}\n                    <span>\n                        Current State:{' '}\n                        <b>{!basicAuthUsername ? 'inactive' : 'active'}</b>{' '}\n                        {basicAuthUsername\n                            ? `[user: ${basicAuthUsername} @ password: <HIDDEN>]`\n                            : ''}\n                    </span>\n                </Row>\n            </div>\n        )\n    }\n\n    onEditHttpAuthClicked() {\n        const self = this\n        const IGNORE = 'IGNORE'\n        const CONFIRM = 'CONFIRM'\n\n        const auth = self.props.apiData.appDefinition.httpAuth\n\n        self.setState({\n            dialogHttpPass: auth ? auth.password || '' : '',\n            dialogHttpUser: auth ? auth.user || '' : '',\n        })\n\n        Promise.resolve()\n            .then(function () {\n                return new Promise(function (resolve, reject) {\n                    Modal.confirm({\n                        title: 'Edit HTTP Basic Auth',\n                        content: (\n                            <div style={{ paddingTop: 30 }}>\n                                <p>\n                                    HTTP Basic authentication is the simplest\n                                    technique for enforcing access controls to\n                                    web resources.\n                                </p>\n                                <p>\n                                    You can use this technique to restrict\n                                    access to HTTP apps, specially those you\n                                    create via One-Click app generator such as\n                                    phpMyAdmin and etc.\n                                </p>\n                                <p>\n                                    <Input\n                                        placeholder=\"username\"\n                                        type=\"text\"\n                                        defaultValue={self.state.dialogHttpUser}\n                                        onChange={(event) =>\n                                            self.setState({\n                                                dialogHttpUser: (\n                                                    event.target.value || ''\n                                                ).trim(),\n                                            })\n                                        }\n                                    />\n                                </p>\n                                <p>\n                                    <Input\n                                        placeholder=\"password\"\n                                        type=\"text\"\n                                        defaultValue={self.state.dialogHttpPass}\n                                        onChange={(event) =>\n                                            self.setState({\n                                                dialogHttpPass: (\n                                                    event.target.value || ''\n                                                ).trim(),\n                                            })\n                                        }\n                                    />\n                                </p>\n                            </div>\n                        ),\n                        onOk() {\n                            resolve(CONFIRM)\n                        },\n                        onCancel() {\n                            resolve(IGNORE)\n                        },\n                    })\n                })\n            })\n            .then(function (data: any) {\n                if (data === IGNORE) return\n\n                const newApiData = Utils.copyObject(self.props.apiData)\n                const enteredUser = self.state.dialogHttpUser\n                const enteredPassword = self.state.dialogHttpPass\n\n                if (!enteredUser || !enteredPassword) {\n                    newApiData.appDefinition.httpAuth = undefined\n                } else {\n                    newApiData.appDefinition.httpAuth = newApiData.appDefinition\n                        .httpAuth || { user: '' }\n\n                    newApiData.appDefinition.httpAuth.user = enteredUser\n                    newApiData.appDefinition.httpAuth.password = enteredPassword\n                }\n\n                self.props.updateApiData(newApiData)\n\n                // Make sure state is saved!\n                return Utils.getDelayedPromise(300) //\n                    .then(function () {\n                        self.props.onUpdateConfigAndSave()\n                    })\n            })\n    }\n\n    createHttpSettingsContent() {\n        const app = this.props.apiData!.appDefinition\n        return (\n            <div>\n                <p>\n                    Your app is internally available as{' '}\n                    <code>srv-captain--{app.appName}</code> to other Captain\n                    apps. In case of web-app, it is accessible via{' '}\n                    <code>{`http://srv-captain--${app.appName}`}</code> from\n                    other apps.\n                </p>\n                <br />\n\n                <Checkbox\n                    defaultChecked={\n                        this.props.apiData!.appDefinition.notExposeAsWebApp\n                    }\n                    onChange={(e: any) => {\n                        const newApiData = Utils.copyObject(this.props.apiData!)\n                        newApiData.appDefinition.notExposeAsWebApp =\n                            !!e.target.checked\n                        this.props.updateApiData(newApiData)\n                    }}\n                >\n                    Do not expose as web-app\n                </Checkbox>\n                <Tooltip title=\"Use this if you don't want your app be externally available.\">\n                    <InfoCircleOutlined />\n                </Tooltip>\n\n                <div style={{ height: 35 }} />\n                {app.notExposeAsWebApp ? (\n                    <div />\n                ) : (\n                    this.createHttpDetailsSettingsContent()\n                )}\n            </div>\n        )\n    }\n}\n","import {\n    CloseOutlined,\n    DeleteOutlined,\n    EditOutlined,\n    ReadOutlined,\n    SaveOutlined,\n} from '@ant-design/icons'\nimport {\n    Affix,\n    Alert,\n    Button,\n    Card,\n    Checkbox,\n    Col,\n    Input,\n    message,\n    Modal,\n    Popover,\n    Row,\n    Tabs,\n    Tooltip,\n} from 'antd'\nimport classnames from 'classnames'\nimport React, { RefObject } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport ApiManager from '../../../api/ApiManager'\nimport { IMobileComponent } from '../../../models/ContainerProps'\nimport { IHashMapGeneric } from '../../../models/IHashMapGeneric'\nimport Toaster from '../../../utils/Toaster'\nimport Utils from '../../../utils/Utils'\nimport ApiComponent from '../../global/ApiComponent'\nimport CenteredSpinner from '../../global/CenteredSpinner'\nimport ClickableLink from '../../global/ClickableLink'\nimport ErrorRetry from '../../global/ErrorRetry'\nimport NewTabLink from '../../global/NewTabLink'\nimport { IAppDef } from '../AppDefinition'\nimport AppConfigs from './AppConfigs'\nimport Deployment from './deploy/Deployment'\nimport HttpSettings from './HttpSettings'\nconst TabPane = Tabs.TabPane\n\nconst WEB_SETTINGS = 'WEB_SETTINGS'\nconst APP_CONFIGS = 'APP_CONFIGS'\nconst DEPLOYMENT = 'DEPLOYMENT'\n\nexport interface SingleAppApiData {\n    appDefinition: IAppDef\n    rootDomain: string\n    captainSubDomain: string\n    defaultNginxConfig: string\n}\n\nexport interface AppDetailsTabProps {\n    apiData: SingleAppApiData\n    apiManager: ApiManager\n    updateApiData: Function\n    onUpdateConfigAndSave: () => void\n    reFetchData: () => void\n    setLoading: (value: boolean) => void\n    isMobile: boolean\n}\n\ninterface PropsInterface extends RouteComponentProps<any> {\n    mainContainer: RefObject<HTMLDivElement>\n    isMobile: boolean\n}\n\nclass AppDetails extends ApiComponent<\n    PropsInterface,\n    {\n        isLoading: boolean\n        apiData: SingleAppApiData | undefined\n        activeTabKey: string\n        renderCounterForAffixBug: number\n    }\n> {\n    private reRenderTriggered = false\n    private confirmedAppNameToDelete: string = ''\n    private volumesToDelete: IHashMapGeneric<boolean> = {}\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            activeTabKey: WEB_SETTINGS,\n            isLoading: true,\n            renderCounterForAffixBug: 0,\n            apiData: undefined,\n        }\n    }\n\n    goBackToApps() {\n        this.props.history.push('/apps')\n    }\n\n    openRenameAppDialog() {\n        const self = this\n        const app = self.state.apiData!.appDefinition\n        const tempVal = { newName: app.appName }\n        Modal.confirm({\n            title: 'Rename the app:',\n            content: (\n                <div>\n                    <Alert\n                        type=\"warning\"\n                        message=\"If other apps use the current name to communicate with this app, make sure to update them as well to avoid problems.\"\n                    />\n                    <Input\n                        style={{ marginTop: 15 }}\n                        placeholder=\"app-name-here\"\n                        defaultValue={app.appName}\n                        onChange={(e) => {\n                            tempVal.newName = (e.target.value || '').trim()\n                        }}\n                    />\n                </div>\n            ),\n            onOk() {\n                const changed = app.appName !== tempVal.newName\n                if (changed && tempVal.newName)\n                    self.renameAppTo(tempVal.newName)\n            },\n        })\n    }\n\n    viewDescription() {\n        const self = this\n        const app = self.state.apiData!.appDefinition\n        const tempVal = { tempDescription: app.description }\n        Modal.confirm({\n            title: 'App Description:',\n            content: (\n                <div>\n                    <Input.TextArea\n                        style={{ marginTop: 15 }}\n                        placeholder=\"Use app description to take some notes for your app\"\n                        rows={12}\n                        defaultValue={app.description}\n                        onChange={(e) => {\n                            tempVal.tempDescription = e.target.value\n                        }}\n                    />\n                </div>\n            ),\n            onOk() {\n                const changed = app.description !== tempVal.tempDescription\n                app.description = tempVal.tempDescription\n                if (changed) self.onUpdateConfigAndSave()\n            },\n        })\n    }\n\n    onDeleteAppClicked() {\n        const self = this\n        const appDef = Utils.copyObject(self.state.apiData!.appDefinition)\n\n        self.confirmedAppNameToDelete = ''\n\n        const allVolumes: string[] = []\n\n        self.volumesToDelete = {}\n\n        if (appDef.volumes) {\n            appDef.volumes.forEach((v) => {\n                if (v.volumeName) {\n                    allVolumes.push(v.volumeName)\n                    self.volumesToDelete[v.volumeName] = true\n                }\n            })\n        }\n\n        Modal.confirm({\n            title: 'Confirm Permanent Delete?',\n            content: (\n                <div>\n                    <p>\n                        You are about to delete <code>{appDef.appName}</code>.\n                        Enter the name of this app in the box below to confirm\n                        deletion of this app. Please note that this is\n                        <b> not reversible</b>.\n                    </p>\n                    <p className={allVolumes.length ? '' : 'hide-on-demand'}>\n                        Please select the volumes you want to delete. Note that\n                        if any of the volumes are being used by other CapRover\n                        apps, they will not be deleted even if you select them.{' '}\n                        <b>Note: </b>deleting volumes takes more than 10\n                        seconds, please be patient\n                    </p>\n                    {allVolumes.map((v) => {\n                        return (\n                            <div key={v}>\n                                <Checkbox\n                                    defaultChecked={!!self.volumesToDelete[v]}\n                                    onChange={(e: any) => {\n                                        self.volumesToDelete[v] =\n                                            !self.volumesToDelete[v]\n                                    }}\n                                >\n                                    {v}\n                                </Checkbox>\n                            </div>\n                        )\n                    })}\n                    <br />\n                    <br />\n\n                    <p>Confirm App Name:</p>\n                    <Input\n                        type=\"text\"\n                        placeholder={appDef.appName}\n                        onChange={(e) => {\n                            self.confirmedAppNameToDelete =\n                                e.target.value.trim()\n                        }}\n                    />\n                </div>\n            ),\n            onOk() {\n                if (self.confirmedAppNameToDelete !== appDef.appName) {\n                    message.warning(\n                        'App name did not match. Operation cancelled.'\n                    )\n                    return\n                }\n\n                const volumes: string[] = []\n                Object.keys(self.volumesToDelete).forEach((v) => {\n                    if (self.volumesToDelete[v]) {\n                        volumes.push(v)\n                    }\n                })\n\n                self.setState({ isLoading: true })\n                self.apiManager\n                    .deleteApp(appDef.appName!, volumes)\n                    .then(function (data) {\n                        const volumesFailedToDelete =\n                            data.volumesFailedToDelete as string[]\n                        if (\n                            volumesFailedToDelete &&\n                            volumesFailedToDelete.length\n                        ) {\n                            Modal.info({\n                                title: \"Some volumes weren't deleted!\",\n                                content: (\n                                    <div>\n                                        <p>\n                                            Some volumes weren't deleted because\n                                            they were probably being used by\n                                            other containers. Sometimes, this is\n                                            because of a temporary delay when\n                                            the original container deletion was\n                                            done with a delay. Please consult\n                                            the{' '}\n                                            <NewTabLink url=\"https://caprover.com/docs/persistent-apps.html#removing-persistent-apps\">\n                                                documentation\n                                            </NewTabLink>{' '}\n                                            and delete them manually if needed.\n                                            Skipped volumes are:\n                                        </p>\n                                        <ul>\n                                            {volumesFailedToDelete.map((v) => (\n                                                <li>\n                                                    <code>{v}</code>\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </div>\n                                ),\n                            })\n                        }\n                        message.success('App deleted!')\n                    })\n                    .then(function () {\n                        self.goBackToApps()\n                    })\n                    .catch(\n                        Toaster.createCatcher(function () {\n                            self.setState({ isLoading: false })\n                        })\n                    )\n            },\n            onCancel() {\n                // do nothing\n            },\n        })\n    }\n\n    renameAppTo(newName: string) {\n        const self = this\n        const appDef = Utils.copyObject(self.state.apiData!.appDefinition)\n        self.setState({ isLoading: true })\n        this.apiManager\n            .renameApp(appDef.appName!, newName)\n            .then(function () {\n                return self.reFetchData()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    onUpdateConfigAndSave() {\n        const self = this\n        const appDef = Utils.copyObject(self.state.apiData!.appDefinition)\n        self.setState({ isLoading: true })\n        this.apiManager\n            .updateConfigAndSave(appDef.appName!, appDef)\n            .then(function () {\n                return self.reFetchData()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (!self.state.apiData && self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!self.reRenderTriggered) {\n            // crazy hack to make sure the Affix is showing (delete and save & update)\n            self.reRenderTriggered = true\n            setTimeout(function () {\n                self.setState({ renderCounterForAffixBug: 1 })\n            }, 50)\n        }\n\n        if (!self.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        const app = self.state.apiData.appDefinition\n\n        return (\n            <Row>\n                <Col span={20} offset={2}>\n                    <Card\n                        extra={\n                            <ClickableLink\n                                onLinkClicked={() => self.goBackToApps()}\n                            >\n                                <Tooltip title=\"Close\">\n                                    <CloseOutlined />\n                                </Tooltip>\n                            </ClickableLink>\n                        }\n                        title={\n                            <span>\n                                <ClickableLink\n                                    onLinkClicked={() =>\n                                        self.openRenameAppDialog()\n                                    }\n                                >\n                                    <Tooltip\n                                        title=\"Rename app\"\n                                        placement=\"bottom\"\n                                    >\n                                        <EditOutlined />\n                                    </Tooltip>\n                                </ClickableLink>\n                                &nbsp;&nbsp;\n                                {app.appName}\n                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                <ClickableLink\n                                    onLinkClicked={() => self.viewDescription()}\n                                >\n                                    <Popover\n                                        placement=\"bottom\"\n                                        content={\n                                            <div\n                                                style={{\n                                                    maxWidth: 300,\n                                                    whiteSpace: 'pre-line',\n                                                }}\n                                            >\n                                                {app.description ||\n                                                    'Click to edit app description...'}\n                                            </div>\n                                        }\n                                        title=\"App description\"\n                                    >\n                                        <ReadOutlined />\n                                    </Popover>\n                                </ClickableLink>\n                            </span>\n                        }\n                    >\n                        {this.state.isLoading && (\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    left: '50%',\n                                }}\n                            >\n                                <CenteredSpinner />\n                            </div>\n                        )}\n                        <Tabs\n                            defaultActiveKey={WEB_SETTINGS}\n                            onChange={(key) => {\n                                self.setState({ activeTabKey: key })\n                            }}\n                            className={classnames({\n                                disabled: this.state.isLoading,\n                            })}\n                        >\n                            <TabPane\n                                tab={\n                                    <span className=\"unselectable-span\">\n                                        HTTP Settings\n                                    </span>\n                                }\n                                key={WEB_SETTINGS}\n                            >\n                                <HttpSettings\n                                    isMobile={this.props.isMobile}\n                                    setLoading={(value) =>\n                                        this.setState({ isLoading: value })\n                                    }\n                                    reFetchData={() => this.reFetchData()}\n                                    apiData={this.state.apiData!}\n                                    apiManager={this.apiManager}\n                                    updateApiData={(newData: any) =>\n                                        this.setState({ apiData: newData })\n                                    }\n                                    onUpdateConfigAndSave={() =>\n                                        self.onUpdateConfigAndSave()\n                                    }\n                                />\n                            </TabPane>\n                            <TabPane\n                                tab={\n                                    <span className=\"unselectable-span\">\n                                        App Configs\n                                    </span>\n                                }\n                                key={APP_CONFIGS}\n                            >\n                                <AppConfigs\n                                    isMobile={this.props.isMobile}\n                                    setLoading={(value) =>\n                                        this.setState({ isLoading: value })\n                                    }\n                                    reFetchData={() => this.reFetchData()}\n                                    apiData={this.state.apiData!}\n                                    apiManager={this.apiManager}\n                                    updateApiData={(newData: any) =>\n                                        this.setState({ apiData: newData })\n                                    }\n                                    onUpdateConfigAndSave={() =>\n                                        self.onUpdateConfigAndSave()\n                                    }\n                                />\n                            </TabPane>\n                            <TabPane\n                                tab={\n                                    <span className=\"unselectable-span\">\n                                        Deployment\n                                    </span>\n                                }\n                                key={DEPLOYMENT}\n                            >\n                                <Deployment\n                                    isMobile={this.props.isMobile}\n                                    setLoading={(value) =>\n                                        this.setState({ isLoading: value })\n                                    }\n                                    reFetchData={() => this.reFetchData()}\n                                    apiData={this.state.apiData!}\n                                    apiManager={this.apiManager}\n                                    onUpdateConfigAndSave={() =>\n                                        self.onUpdateConfigAndSave()\n                                    }\n                                    updateApiData={(newData: any) => {\n                                        this.setState({ apiData: newData })\n                                    }}\n                                />\n                            </TabPane>\n                        </Tabs>\n                        <div style={{ height: 70 }} />\n\n                        <Affix\n                            offsetBottom={10}\n                            target={() => {\n                                const newLocal = self.props.mainContainer\n                                return newLocal && newLocal.current\n                                    ? newLocal.current\n                                    : window\n                            }}\n                        >\n                            <div\n                                className={classnames({\n                                    'hide-on-demand':\n                                        self.state.activeTabKey === DEPLOYMENT,\n                                    disabled: this.state.isLoading,\n                                })}\n                                style={{\n                                    borderRadius: 8,\n                                    background: 'rgba(51,73,90,0.9)',\n                                    paddingTop: 20,\n                                    paddingBottom: 20,\n                                }}\n                            >\n                                <Row justify=\"center\" gutter={20}>\n                                    <Col span={8}>\n                                        <div style={{ textAlign: 'center' }}>\n                                            <Button\n                                                style={{\n                                                    minWidth: self.props\n                                                        .isMobile\n                                                        ? 35\n                                                        : 135,\n                                                }}\n                                                danger\n                                                size=\"large\"\n                                                onClick={() =>\n                                                    self.onDeleteAppClicked()\n                                                }\n                                            >\n                                                {self.props.isMobile ? (\n                                                    <DeleteOutlined />\n                                                ) : (\n                                                    'Delete App'\n                                                )}\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                    <Col span={8}>\n                                        <div style={{ textAlign: 'center' }}>\n                                            <Button\n                                                style={{\n                                                    minWidth: self.props\n                                                        .isMobile\n                                                        ? 35\n                                                        : 135,\n                                                }}\n                                                type=\"primary\"\n                                                size=\"large\"\n                                                onClick={() =>\n                                                    self.onUpdateConfigAndSave()\n                                                }\n                                            >\n                                                {self.props.isMobile ? (\n                                                    <SaveOutlined />\n                                                ) : (\n                                                    'Save & Update'\n                                                )}\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Affix>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n\n    componentDidMount() {\n        this.reFetchData()\n    }\n\n    reFetchData() {\n        const self = this\n        self.setState({ isLoading: true })\n        return this.apiManager\n            .getAllApps()\n            .then(function (data: any) {\n                for (\n                    let index = 0;\n                    index < data.appDefinitions.length;\n                    index++\n                ) {\n                    const element = data.appDefinitions[index]\n                    if (element.appName === self.props.match.params.appName) {\n                        self.setState({\n                            isLoading: false,\n                            apiData: {\n                                appDefinition: element,\n                                rootDomain: data.rootDomain,\n                                captainSubDomain: data.captainSubDomain,\n                                defaultNginxConfig: data.defaultNginxConfig,\n                            },\n                        })\n                        return\n                    }\n                }\n\n                // App Not Found!\n                self.goBackToApps()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect<IMobileComponent, any, any>(\n    mapStateToProps,\n    undefined\n)(AppDetails)\n","import {\n    CheckOutlined,\n    CodeOutlined,\n    DisconnectOutlined,\n    LinkOutlined,\n    LoadingOutlined\n} from '@ant-design/icons'\nimport { Card, Col, Input, Row, Table, Tooltip } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport { History } from 'history'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { IMobileComponent } from '../../models/ContainerProps'\nimport Logger from '../../utils/Logger'\nimport NewTabLink from '../global/NewTabLink'\nimport Timestamp from '../global/Timestamp'\nimport { IAppDef } from './AppDefinition'\n\ntype TableData = IAppDef & { lastDeployTime: string }\n\nclass AppsTable extends Component<\n    {\n        history: History\n        apps: IAppDef[]\n        rootDomain: string\n        defaultNginxConfig: string\n        isMobile: boolean\n    },\n    { searchTerm: string }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = { searchTerm: '' }\n    }\n\n    appDetailPath(appName: string) {\n        return `/apps/details/${appName}`\n    }\n\n    createColumns() {\n        const self = this\n        const ALIGN: 'center' = 'center'\n        const columns: ColumnProps<TableData>[] = [\n            {\n                title: 'App Name',\n                dataIndex: 'appName',\n                key: 'appName',\n                render: (appName: string) => (\n                    <Link to={this.appDetailPath(appName)}>{appName}</Link>\n                ),\n                sorter: (a, b) => {\n                    return a.appName\n                        ? a.appName.localeCompare(b.appName || '')\n                        : 0\n                },\n                sortDirections: ['descend', 'ascend'],\n            },\n            {\n                title: 'Persistent Data\t',\n                dataIndex: 'hasPersistentData',\n                key: 'hasPersistentData',\n                align: ALIGN,\n                render: (hasPersistentData: boolean) => {\n                    if (!hasPersistentData) {\n                        return <span />\n                    }\n\n                    return (\n                        <span>\n                            <CheckOutlined />\n                        </span>\n                    )\n                },\n            },\n            {\n                title: 'Instance Count',\n                dataIndex: 'instanceCount',\n                key: 'instanceCount',\n                align: ALIGN,\n            },\n            {\n                title: 'Last Deployed',\n                dataIndex: 'lastDeployTime',\n                key: 'lastDeployTime',\n                align: ALIGN,\n                sorter: (a, b) => {\n                    return (\n                        Date.parse(a.lastDeployTime) -\n                        Date.parse(b.lastDeployTime)\n                    )\n                },\n                sortDirections: ['descend', 'ascend'],\n                render: (lastDeployTime: string, app) => {\n                    if (!lastDeployTime) {\n                        return <span />\n                    }\n\n                    return (\n                        <span>\n                            <Timestamp timestamp={lastDeployTime} />\n                            {!!app.isAppBuilding ? (\n                                <LoadingOutlined\n                                    style={{\n                                        fontSize: '12px',\n                                        marginLeft: 12,\n                                    }}\n                                />\n                            ) : undefined}\n                        </span>\n                    )\n                },\n            },\n            {\n                title: 'Open',\n                dataIndex: 'notExposeAsWebApp',\n                key: 'openInBrowser',\n                align: ALIGN,\n                render: (notExposeAsWebApp: boolean, app) => {\n                    if (notExposeAsWebApp) {\n                        return (\n                            <Tooltip title=\"Not exposed as a web app\">\n                                <DisconnectOutlined />\n                            </Tooltip>\n                        )\n                    }\n\n                    return (\n                        <NewTabLink\n                            url={`http${\n                                app.hasDefaultSubDomainSsl ? 's' : ''\n                            }://${app.appName}.${self.props.rootDomain}`}\n                        >\n                            <LinkOutlined />{' '}\n                        </NewTabLink>\n                    )\n                },\n            },\n        ]\n\n        // Set default sort order\n        const sortKey = window.localStorage.appsSortKey || 'appName'\n        const sortOrder = window.localStorage.appsSortOrder || 'ascend'\n        const sorted =\n            columns.find((column) => column.key === sortKey) || columns[0]\n        sorted.defaultSortOrder = sortOrder\n\n        return columns\n    }\n\n    render() {\n        const self = this\n\n        const appsToRender = self.props.apps\n            .filter((app) => {\n                if (!self.state.searchTerm) return true\n\n                return app.appName!.indexOf(self.state.searchTerm) >= 0\n            })\n            .map((app) => {\n                let versionFound = app.versions.filter(\n                    (v) => v.version === app.deployedVersion\n                )\n\n                let lastDeployTime = ''\n\n                if (versionFound.length === 0) {\n                    // See https://github.com/caprover/caprover-frontend/issues/56\n                    // This can happen when user creates a new app while a build is in progress.\n                    // This results in app.versions being an empty array until the 0th version gets deployed.\n                    Logger.error(\n                        `App ${app.appName} has invalid deployVersion=${\n                            app.deployedVersion\n                        }, versions:${JSON.stringify(app.versions)}`\n                    )\n                } else {\n                    lastDeployTime = versionFound[0].timeStamp || ''\n                }\n\n                return { ...app, lastDeployTime }\n            })\n\n        const searchAppInput = (\n            <Input\n                placeholder=\"Busca por nombre\"\n                type=\"text\"\n                onChange={(event) =>\n                    self.setState({\n                        searchTerm: (event.target.value || '')\n                            .trim()\n                            .toLowerCase(),\n                    })\n                }\n            />\n        )\n\n        return (\n            <Row justify=\"center\">\n                <Col\n                    xs={{ span: 23 }}\n                    lg={{ span: 16 }}\n                    style={{ paddingBottom: 300 }}\n                >\n                    <Card\n                        extra={!self.props.isMobile && searchAppInput}\n                        title={\n                            <React.Fragment>\n                                <span>\n                                    <CodeOutlined />\n                                    &nbsp;&nbsp;&nbsp;Tus apps\n                                </span>\n                                <br />\n                                {self.props.isMobile && (\n                                    <div style={{ marginTop: 8 }}>\n                                        {searchAppInput}\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        }\n                    >\n                        <Row justify=\"center\">\n                            {self.props.isMobile ? (\n                                appsToRender.map(\n                                    ({\n                                        appName = '',\n                                        hasPersistentData,\n                                        notExposeAsWebApp,\n                                        instanceCount,\n                                        hasDefaultSubDomainSsl,\n                                    }) => (\n                                        <Card\n                                            type=\"inner\"\n                                            title={appName}\n                                            key={appName}\n                                            extra={\n                                                <Link\n                                                    to={this.appDetailPath(\n                                                        appName\n                                                    )}\n                                                >\n                                                    Detalles\n                                                </Link>\n                                            }\n                                            style={{\n                                                width: '100%',\n                                                marginBottom: 8,\n                                            }}\n                                        >\n                                            <p>\n                                                Persistent Data:{' '}\n                                                {!hasPersistentData ? undefined : (\n                                                    <span>\n                                                        <CheckOutlined />\n                                                    </span>\n                                                )}\n                                            </p>\n                                            <p>\n                                                Exposed Webapp:{' '}\n                                                {!!notExposeAsWebApp ? undefined : (\n                                                    <span>\n                                                        <CheckOutlined />\n                                                    </span>\n                                                )}\n                                            </p>\n                                            <p>\n                                                Número de instancias: {instanceCount}\n                                            </p>\n                                            <p>\n                                                Abrir en el navegador:{' '}\n                                                {!!notExposeAsWebApp ? undefined : (\n                                                    <NewTabLink\n                                                        url={`http${\n                                                            hasDefaultSubDomainSsl\n                                                                ? 's'\n                                                                : ''\n                                                        }://${appName}.${\n                                                            self.props\n                                                                .rootDomain\n                                                        }`}\n                                                    >\n                                                        <LinkOutlined />{' '}\n                                                    </NewTabLink>\n                                                )}\n                                            </p>\n                                        </Card>\n                                    )\n                                )\n                            ) : (\n                                <div\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                >\n                                    <Table<TableData>\n                                        rowKey=\"appName\"\n                                        columns={self.createColumns()}\n                                        dataSource={appsToRender}\n                                        pagination={false}\n                                        size=\"middle\"\n                                        onChange={(\n                                            pagination,\n                                            filters,\n                                            sorter\n                                        ) => {\n                                            // Persist sorter state\n                                            if (!Array.isArray(sorter)) {\n                                                window.localStorage.appsSortKey =\n                                                    sorter.columnKey\n                                                window.localStorage.appsSortOrder =\n                                                    sorter.order\n                                            }\n                                        }}\n                                    />\n                                </div>\n                            )}\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect<IMobileComponent, any, any>(\n    mapStateToProps,\n    undefined\n)(AppsTable)\n","import { PlusCircleOutlined, QuestionCircleFilled } from '@ant-design/icons'\nimport { Button, Card, Checkbox, Col, Input, Row, Tooltip } from 'antd'\nimport Search from 'antd/lib/input/Search'\nimport { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { IMobileComponent } from '../../models/ContainerProps'\nimport NewTabLink from '../global/NewTabLink'\n\ninterface MyProps {\n    onCreateNewAppClicked: (appName: string, hasPersistency: boolean) => void\n}\n\nclass CreateNewApp extends Component<\n    MyProps & IMobileComponent,\n    { appName: string; hasPersistency: boolean }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            hasPersistency: false,\n            appName: '',\n        }\n    }\n\n    onCreateNewAppClicked() {\n        this.props.onCreateNewAppClicked(\n            this.state.appName,\n            this.state.hasPersistency\n        )\n    }\n    render() {\n        const self = this\n\n        return (\n            <Row justify=\"center\">\n                <Col xs={{ span: 23 }} lg={{ span: 10 }}>\n                    <Card\n                        title={\n                            <span>\n                                <PlusCircleOutlined />\n                                &nbsp;&nbsp;&nbsp;Crear nueva aplicación\n                            </span>\n                        }\n                    >\n                        <Row>\n                            {self.props.isMobile ? (\n                                <Fragment>\n                                    <Input\n                                        placeholder=\"nueva-app\"\n                                        onChange={(e) =>\n                                            self.setState({\n                                                appName: e.target.value,\n                                            })\n                                        }\n                                    />\n                                    <Button\n                                        style={{ marginTop: 8 }}\n                                        block\n                                        onClick={() =>\n                                            self.onCreateNewAppClicked()\n                                        }\n                                        type=\"primary\"\n                                    >\n                                        Crear nueva App\n                                    </Button>\n                                </Fragment>\n                            ) : (\n                                <Search\n                                    placeholder=\"my-amazing-app\"\n                                    enterButton=\"Create New App\"\n                                    onChange={(e) =>\n                                        self.setState({\n                                            appName: e.target.value,\n                                        })\n                                    }\n                                    onSearch={(value) =>\n                                        self.onCreateNewAppClicked()\n                                    }\n                                />\n                            )}\n                        </Row>\n                        <br />\n                        <Row justify={self.props.isMobile ? 'start' : 'end'}>\n                            <Checkbox\n                                onChange={(e: any) =>\n                                    self.setState({\n                                        hasPersistency: !!e.target.checked,\n                                    })\n                                }\n                            >\n                                Persistencia de datos\n                            </Checkbox>\n                            &nbsp;&nbsp;\n                            <Tooltip title=\"Mostly used for databases, see docs for details.\">\n                                <NewTabLink url=\"https://caprover.com/docs/persistent-apps.html\">\n                                    <span>\n                                        <QuestionCircleFilled />\n                                    </span>\n                                </NewTabLink>\n                            </Tooltip>\n                        </Row>\n\n                        <br />\n\n                        <hr />\n\n                        <br />\n                        <div style={{ textAlign: 'center' }}>\n                            <p>O selecciona desde</p>\n                            <Link to=\"/apps/oneclick/\" className=\"ant-btn\">\n                                One-Click Apps/Databases\n                            </Link>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect<IMobileComponent, any, any>(\n    mapStateToProps,\n    undefined\n)(CreateNewApp)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport { IAppDef } from './AppDefinition'\nimport AppsTable from './AppsTable'\nimport CreateNewApp from './CreateNewApp'\n\nexport default class Apps extends ApiComponent<\n    RouteComponentProps<any>,\n    {\n        isLoading: boolean\n        apiData:\n            | {\n                  appDefinitions: IAppDef[]\n                  defaultNginxConfig: string\n                  rootDomain: string\n              }\n            | undefined\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            apiData: undefined,\n        }\n    }\n\n    onCreateNewAppClicked(appName: string, hasPersistentData: boolean) {\n        const self = this\n\n        Promise.resolve() //\n            .then(function () {\n                self.setState({ isLoading: true })\n                return self.apiManager.registerNewApp(\n                    appName,\n                    hasPersistentData,\n                    true\n                )\n            })\n            .then(function () {\n                return self.reFetchData()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        const apiData = self.state.apiData\n\n        if (!apiData) {\n            return <ErrorRetry />\n        }\n\n        return (\n            <div>\n                <CreateNewApp\n                    onCreateNewAppClicked={(\n                        appName: string,\n                        hasPersistency: boolean\n                    ) => {\n                        self.onCreateNewAppClicked(appName, hasPersistency)\n                    }}\n                />\n                <div style={{ height: 25 }} />\n                {apiData.appDefinitions.length > 0 ? (\n                    <AppsTable\n                        history={this.props.history}\n                        defaultNginxConfig={apiData.defaultNginxConfig}\n                        apps={apiData.appDefinitions}\n                        rootDomain={apiData.rootDomain}\n                    />\n                ) : (\n                    <div />\n                )}\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.reFetchData()\n    }\n\n    reFetchData() {\n        const self = this\n        self.setState({ isLoading: true })\n        return this.apiManager\n            .getAllApps()\n            .then(function (data: any) {\n                self.setState({ apiData: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n}\n","import { Input } from 'antd'\nimport React, { Component, Fragment } from 'react'\nimport yaml from 'yaml'\n\nfunction ensureStringifiedJson(raw: string) {\n    raw = (raw || '').trim()\n    if (!raw.length) {\n        return ''\n    }\n\n    if (raw.startsWith('{') || raw.startsWith('[')) {\n        return raw\n    }\n\n    try {\n        return JSON.stringify(yaml.parse(raw))\n    } catch (err) {\n        console.log(err)\n    }\n    return ''\n}\n\nexport default class InputJsonifier extends Component<\n    {\n        placeholder?: string\n        defaultValue?: string\n        onChange: (jsonStringified: string) => void\n    },\n    {}\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        const self = this\n        return (\n            <Fragment>\n                {' '}\n                <Input.TextArea\n                    className=\"code-input\"\n                    placeholder={self.props.placeholder}\n                    rows={10}\n                    defaultValue={self.props.defaultValue}\n                    onChange={(e) => {\n                        self.props.onChange(\n                            ensureStringifiedJson(e.target.value)\n                        )\n                    }}\n                />\n            </Fragment>\n        )\n    }\n}\n","// Taken from https://github.com/aceakash/string-similarity\n\n/*\n\nMIT License\n\nCopyright (c) 2018 Akash Kurdekar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\nexport default class StringSimilarity {\n    static compareTwoStrings(first: string, second: string) {\n        first = first.replace(/\\s+/g, '')\n        second = second.replace(/\\s+/g, '')\n\n        if (!first.length && !second.length) return 1 // if both are empty strings\n        if (!first.length || !second.length) return 0 // if only one is empty string\n        if (first === second) return 1 // identical\n        if (first.length === 1 && second.length === 1) return 0 // both are 1-letter strings\n        if (first.length < 2 || second.length < 2) return 0 // if either is a 1-letter string\n\n        let firstBigrams = new Map()\n        for (let i = 0; i < first.length - 1; i++) {\n            const bigram = first.substring(i, i + 2)\n            const count = firstBigrams.has(bigram)\n                ? firstBigrams.get(bigram) + 1\n                : 1\n\n            firstBigrams.set(bigram, count)\n        }\n\n        let intersectionSize = 0\n        for (let i = 0; i < second.length - 1; i++) {\n            const bigram = second.substring(i, i + 2)\n            const count = firstBigrams.has(bigram)\n                ? firstBigrams.get(bigram)\n                : 0\n\n            if (count > 0) {\n                firstBigrams.set(bigram, count - 1)\n                intersectionSize++\n            }\n        }\n\n        return (2.0 * intersectionSize) / (first.length + second.length - 2)\n    }\n\n    static findBestMatch(mainString: string, targetStrings: string) {\n        if (!StringSimilarity.areArgsValid(mainString, targetStrings))\n            throw new Error(\n                'Bad arguments: First argument should be a string, second should be an array of strings'\n            )\n\n        const ratings = []\n        let bestMatchIndex = 0\n\n        for (let i = 0; i < targetStrings.length; i++) {\n            const currentTargetString = targetStrings[i]\n            const currentRating = StringSimilarity.compareTwoStrings(\n                mainString,\n                currentTargetString\n            )\n            ratings.push({ target: currentTargetString, rating: currentRating })\n            if (currentRating > ratings[bestMatchIndex].rating) {\n                bestMatchIndex = i\n            }\n        }\n\n        const bestMatch = ratings[bestMatchIndex]\n\n        return { ratings, bestMatch, bestMatchIndex }\n    }\n\n    private static areArgsValid(mainString: string, targetStrings: string) {\n        if (typeof mainString !== 'string') return false\n        if (!Array.isArray(targetStrings)) return false\n        if (!targetStrings.length) return false\n        if (targetStrings.find((s) => typeof s !== 'string')) return false\n        return true\n    }\n}\n","import {\n    FlagTwoTone,\n    InfoCircleOutlined,\n    SafetyCertificateTwoTone,\n} from '@ant-design/icons'\nimport { Card, Empty, Input, Row, Tooltip } from 'antd'\nimport React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router-dom'\nimport { IHashMapGeneric } from '../../../../models/IHashMapGeneric'\nimport { IOneClickAppIdentifier } from '../../../../models/IOneClickAppModels'\nimport StringSimilarity from '../../../../utils/StringSimilarity'\nimport NewTabLink from '../../../global/NewTabLink'\n\nexport default class OneClickGrid extends Component<\n    {\n        oneClickAppList: IOneClickAppIdentifier[]\n        onAppSelectionChanged: (\n            event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n            appName: string\n        ) => void\n    },\n    { sortScores: IHashMapGeneric<number>; selectedApp: string | undefined }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            selectedApp: undefined,\n            sortScores: {},\n        }\n    }\n\n    create3rdPartyTagIfNeeded(app: IOneClickAppIdentifier) {\n        const MAIN_REPO = `https://oneclickapps.caprover.com`\n\n        const isFromMainRepository = app.baseUrl === MAIN_REPO || !app.baseUrl\n        const isUsingOfficialImage = !!app.isOfficial\n\n        return (\n            <div style={{ marginTop: 20 }}>\n                <Row align=\"middle\" justify=\"space-between\">\n                    {isFromMainRepository ? undefined : (\n                        <Tooltip title={`From: ${app.baseUrl}`}>\n                            <FlagTwoTone />\n                        </Tooltip>\n                    )}\n                    {!isUsingOfficialImage ? undefined : (\n                        <Tooltip\n                            title={`Utiliza la imagen oficial proporcionada por el desarrollador de la aplicación o una fuente confiable como Bitnami o LinuxServer`}\n                        >\n                            <SafetyCertificateTwoTone />\n                        </Tooltip>\n                    )}\n                </Row>\n            </div>\n        )\n    }\n\n    createOneClickApp(app: IOneClickAppIdentifier) {\n        const self = this\n        // For template selection set uri to #\n        const url =\n            app.name && app.baseUrl\n                ? `/apps/oneclick/${app.name}?baseDomain=${encodeURIComponent(\n                      app.baseUrl\n                  )}`\n                : '#'\n        return (\n            <div key={app.name + app.baseUrl} className=\"one-click-app-card\">\n                <Link\n                    to={url}\n                    onClick={(event) =>\n                        this.props.onAppSelectionChanged(event, app.name)\n                    }\n                >\n                    <Card\n                        cover={<img src={app.logoUrl} alt=\"App logo\" />}\n                        hoverable\n                    >\n                        <Card.Meta\n                            title={app.displayName}\n                            description={app.description}\n                        />\n                        {self.create3rdPartyTagIfNeeded(app)}\n                    </Card>\n                </Link>\n            </div>\n        )\n    }\n\n    render() {\n        const self = this\n\n        let apps = self.props.oneClickAppList\n        if (Object.keys(self.state.sortScores).length > 0) {\n            const appsSorted = apps.concat().sort((a, b) => {\n                return (\n                    (self.state.sortScores[b.name] || 0) -\n                    (self.state.sortScores[a.name] || 0)\n                )\n            })\n\n            apps = appsSorted.filter((it) => {\n                return self.state.sortScores[it.name] > 0.5\n            })\n        }\n\n        return (\n            <Fragment>\n                <div style={{ height: 40 }} />\n                <div\n                    style={{\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <Input.Search\n                        style={{ maxWidth: 200, marginBottom: 40 }}\n                        placeholder=\"Busca una app...\"\n                        onChange={({ currentTarget }) => {\n                            const searchTerm = (currentTarget.value || '')\n                                .trim()\n                                .toLowerCase()\n                            const sortScores: IHashMapGeneric<number> = {}\n\n                            if (searchTerm) {\n                                self.props.oneClickAppList.forEach((app) => {\n                                    let score = 0\n\n                                    const appNameForSearch = (\n                                        (app.displayName || '').trim() ||\n                                        app.name\n                                    )\n                                        .toLowerCase()\n                                        .trim()\n\n                                    if (\n                                        appNameForSearch\n                                            .toLowerCase()\n                                            .includes(searchTerm)\n                                    ) {\n                                        score = 1\n                                    } else if (\n                                        app.description &&\n                                        app.description\n                                            .toLowerCase()\n                                            .includes(searchTerm)\n                                    ) {\n                                        score = 0.99\n                                    } else {\n                                        score =\n                                            StringSimilarity.compareTwoStrings(\n                                                searchTerm,\n                                                appNameForSearch\n                                            )\n                                    }\n\n                                    sortScores[app.name] = score || 0\n                                })\n                            }\n\n                            self.setState({ sortScores })\n                        }}\n                    />\n                </div>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        justifyContent: 'center',\n                    }}\n                >\n                    {apps.length ? (\n                        apps.length &&\n                        apps.map((app) => self.createOneClickApp(app))\n                    ) : (\n                        <div>\n                            <Empty description=\"Ningúna aplicacion encontrada\" />\n                            <div style={{ paddingTop: 30 }}>\n                            ¿Qué pasa si la aplicación / base de datos que quiero no está en la lista?\n                                 aquí? &nbsp;\n                                <NewTabLink url=\"https://caprover.com/docs/one-click-apps.html#what-about-other-apps\">\n                                    <InfoCircleOutlined />\n                                </NewTabLink>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </Fragment>\n        )\n    }\n}\n","import { DeleteOutlined } from '@ant-design/icons'\nimport { Button, Modal } from 'antd'\nimport Search from 'antd/lib/input/Search'\nimport React from 'react'\nimport Toaster from '../../../../utils/Toaster'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport CenteredSpinner from '../../../global/CenteredSpinner'\n\nexport default class OneClickReposList extends ApiComponent<\n    {},\n    {\n        apiData: any\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            apiData: undefined,\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        self.fetchData()\n    }\n\n    fetchData() {\n        const self = this\n        self.apiManager\n            .getAllOneClickAppRepos()\n            .then(function (apiData) {\n                self.setState({\n                    apiData,\n                })\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    onConnectNewRepositoryClicked(domain: string) {\n        const self = this\n        self.apiManager\n            .addNewCustomOneClickRepo(domain)\n            .then(function () {\n                self.setState({\n                    apiData: undefined,\n                })\n                self.fetchData()\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    onDeleteUrlClicked(url: string) {\n        const self = this\n        Modal.confirm({\n            title: 'Remove One Click Repo',\n            content: (\n                <div>\n                    <p>\n                        Are you sure you want to delete the one click repository\n                        from your list?\n                    </p>\n                    <code>{url}</code>\n                </div>\n            ),\n            onOk() {\n                self.apiManager\n                    .deleteCustomOneClickRepo(url)\n                    .then(function () {\n                        self.fetchData()\n                    })\n                    .catch(Toaster.createCatcher())\n            },\n            onCancel() {\n                // do nothing\n            },\n        })\n    }\n\n    createUrlRow(url: string) {\n        const self = this\n        return (\n            <div key={url} style={{ margin: 10 }}>\n                <Button\n                    style={{ marginRight: 10 }}\n                    onClick={() => {\n                        self.onDeleteUrlClicked(url)\n                    }}\n                    size=\"small\"\n                    danger\n                >\n                    <span>\n                        <DeleteOutlined />\n                    </span>\n                </Button>\n\n                {url}\n            </div>\n        )\n    }\n\n    create3rdPartyRepoList() {\n        const self = this\n\n        if (!self.state.apiData) return undefined\n\n        if (!self.state.apiData.urls) return undefined\n\n        const urls = Utils.copyObject(self.state.apiData.urls as string[])\n\n        return <div>{urls.map((u) => self.createUrlRow(u))}</div>\n    }\n\n    render() {\n        const self = this\n\n        if (!this.state.apiData) return <CenteredSpinner />\n\n        return (\n            <div>\n                <h4>3rd party repositories:</h4>\n                <div style={{ maxWidth: 600, marginBottom: 30 }}>\n                    <Search\n                        placeholder=\"oneclick-apps.your-3rd-party-domain.com\"\n                        enterButton=\"Connect New Repository\"\n                        onSearch={(value) =>\n                            self.onConnectNewRepositoryClicked(value)\n                        }\n                    />\n                </div>\n                {self.create3rdPartyRepoList()}\n            </div>\n        )\n    }\n}\n","import { Alert, Button, Card, Col, Row } from 'antd'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { IOneClickAppIdentifier } from '../../../../models/IOneClickAppModels'\nimport Toaster from '../../../../utils/Toaster'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport CenteredSpinner from '../../../global/CenteredSpinner'\nimport InputJsonifier from '../../../global/InputJsonifier'\nimport NewTabLink from '../../../global/NewTabLink'\nimport OneClickGrid from './OneClickGrid'\nimport OneClickReposList from './OneClickReposList'\n\nexport const TEMPLATE_ONE_CLICK_APP = 'TEMPLATE_ONE_CLICK_APP'\nexport const ONE_CLICK_APP_STRINGIFIED_KEY = 'oneClickAppStringifiedData'\n\nexport default class OneClickAppSelector extends ApiComponent<\n    RouteComponentProps<any>,\n    {\n        oneClickAppList: IOneClickAppIdentifier[] | undefined\n        isCustomTemplateSelected: boolean\n        templateOneClickAppData: string\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            oneClickAppList: undefined,\n            isCustomTemplateSelected: false,\n            templateOneClickAppData: '',\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        self.fetchData()\n    }\n\n    fetchData() {\n        const self = this\n        self.apiManager\n            .getAllOneClickApps()\n            .then(function (data) {\n                const apps = data.oneClickApps as IOneClickAppIdentifier[]\n                apps.push({\n                    name: TEMPLATE_ONE_CLICK_APP,\n                    description:\n                        'Plantilla para crear apps con un click. Principalmente para dasarrollo',\n                    logoUrl: '/icon-512x512.png',\n                    baseUrl: '',\n                    displayName: '>> Plantilla <<',\n                })\n                self.setState({\n                    oneClickAppList: apps,\n                })\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    createCustomTemplateInput() {\n        const self = this\n\n        let isOneClickJsonValid = true\n        if (this.state.templateOneClickAppData) {\n            try {\n                JSON.parse(this.state.templateOneClickAppData)\n            } catch (error) {\n                isOneClickJsonValid = false\n            }\n        }\n\n        return (\n            <div\n                className={\n                    self.state.isCustomTemplateSelected ? '' : 'hide-on-demand'\n                }\n            >\n                <div>\n                    <p>\n                    Esto es principalmente para la prueba. Puede copiar y pegar su plantilla de aplicación One-Click personalizada aquí. Mira{' '}\n                        <NewTabLink url=\"https://github.com/caprover/one-click-apps/tree/master/public/v4/apps\">\n                            el repositorio principal de Spacecloud\n                        </NewTabLink>{' '}\n                        para muestras e ideas.\n                    </p>\n                </div>\n\n                <InputJsonifier\n                    placeholder={`YAML or JSON # use captainVersion 4\n{\n  \"captainVersion\": \"4\",\n  \"version\": \"3.3\"\n  \"services\": {\n    \"$$cap_appname\": {\n          \"image\": \"adminer:$$cap_adminer_version\",\n          \"containerHttpPort\": \"8080\",\n          \"environment\": {\n              \"ADMINER_DESIGN\": \"$$cap_adminer_design\"\n          }\n    }\n  }\n}`}\n                    onChange={(stringified) => {\n                        self.setState({\n                            templateOneClickAppData: stringified,\n                        })\n                    }}\n                />\n                <div style={{ height: 10 }} />\n                {!isOneClickJsonValid ? (\n                    <Alert\n                        message=\"Los datos que has introducidos no son validos para JSON.\"\n                        type=\"error\"\n                    />\n                ) : (\n                    <div />\n                )}\n                <div style={{ height: 30 }} />\n                <Row justify=\"space-between\" align=\"middle\">\n                    <Button\n                        onClick={() =>\n                            self.props.history.push(\n                                `/apps/oneclick/${TEMPLATE_ONE_CLICK_APP}` +\n                                    (`?${ONE_CLICK_APP_STRINGIFIED_KEY}=` +\n                                        encodeURIComponent(\n                                            self.state.templateOneClickAppData\n                                        ))\n                            )\n                        }\n                        disabled={\n                            !self.state.templateOneClickAppData ||\n                            !isOneClickJsonValid\n                        }\n                        style={{ minWidth: 150 }}\n                        type=\"primary\"\n                    >\n                        Next\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n\n    createOneClickAppListGrid() {\n        const self = this\n\n        if (!this.state.oneClickAppList) return <CenteredSpinner />\n\n        return (\n            <OneClickGrid\n                onAppSelectionChanged={(event, appName) => {\n                    if (appName === TEMPLATE_ONE_CLICK_APP) {\n                        event.preventDefault()\n                        self.setState({ isCustomTemplateSelected: true })\n                    }\n                }}\n                oneClickAppList={self.state.oneClickAppList!}\n            />\n        )\n    }\n\n    render() {\n        const self = this\n\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 23 }} lg={{ span: 23 }}>\n                        <Card title=\"Apliacaciones de un click\">\n                            <div\n                                className={\n                                    self.state.isCustomTemplateSelected\n                                        ? 'hide-on-demand'\n                                        : ''\n                                }\n                            >\n                                <p>\n                                    Elija una aplicación, una base de datos o un paquete (Aplicación + base de datos) de la lista a continuación. el resto es magia\n                                </p>\n                                <p>\n                                Las aplicaciones de un clic se recuperan del repositorio oficial{' '}\n                                    <NewTabLink url=\"https://github.com/caprover/one-click-apps\">\n                                        Spacecloud Apps un click{' '}\n                                    </NewTabLink>\n                                    por defecto. Puede agregar otros repositorios públicos/privados si lo desea.\n                                </p>\n\n                                {self.createOneClickAppListGrid()}\n\n                                <div style={{ height: 50 }} />\n\n                                <OneClickReposList />\n                            </div>\n                            {Utils.isSafari() ? (\n                                <Alert\n                                    message=\"Parece que estás usando Safari. La implementación de aplicaciones de un solo clic puede ser inestable en Safari. Se recomienda usar Chrome\"\n                                    type=\"warning\"\n                                />\n                            ) : (\n                                <div />\n                            )}\n                            <div style={{ height: 50 }} />\n\n                            {self.createCustomTemplateInput()}\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","import * as yaml from 'yaml'\nimport { IDockerComposeService } from '../models/IOneClickAppModels'\nimport Utils from './Utils'\n\nexport default class DockerComposeToServiceOverride {\n    static convertComposeToService(compose: IDockerComposeService) {\n        // NOTE:\n        // Port, replicas, env vars, volumes, and image are supplied through CapRover definition\n        // network will be set to captain-overlay\n        // restart_policy is not generally needed, by default docker services restart automatically\n        // ----\n        // Only parse parameters that are not from the aforementioned list.\n        // The only useful parameter that we are parsing at the moment is hostname: https://github.com/caprover/caprover/issues/404\n\n        const overrides = [] as any[]\n        overrides.push(DockerComposeToServiceOverride.parseHostname(compose))\n\n        let mergedOverride = {} as any\n        overrides.forEach((o) => {\n            mergedOverride = Utils.mergeObjects(mergedOverride, o)\n        })\n        if (Object.keys(mergedOverride).length === 0) {\n            return undefined\n        }\n\n        return yaml.stringify(mergedOverride)\n    }\n\n    private static parseHostname(compose: IDockerComposeService) {\n        const override = {} as any\n        const hostname = !!compose.hostname ? `${compose.hostname}`.trim() : ''\n        if (!!compose.hostname) {\n            override.TaskTemplate = {\n                ContainerSpec: {\n                    Hostname: hostname,\n                },\n            }\n        }\n\n        return override\n    }\n}\n","import ApiManager from '../../../api/ApiManager'\nimport { ICaptainDefinition } from '../../../models/ICaptainDefinition'\nimport { IDockerComposeService } from '../../../models/IOneClickAppModels'\nimport DockerComposeToServiceOverride from '../../../utils/DockerComposeToServiceOverride'\nimport Utils from '../../../utils/Utils'\nimport { IAppDef } from '../AppDefinition'\n\nexport default class OneClickAppDeploymentHelper {\n    private apiManager: ApiManager = new ApiManager()\n\n    createRegisterPromise(\n        appName: string,\n        dockerComposeService: IDockerComposeService\n    ) {\n        const self = this\n        return Promise.resolve().then(function () {\n            return self.apiManager.registerNewApp(\n                appName,\n                !!dockerComposeService.volumes &&\n                    !!dockerComposeService.volumes.length,\n                false\n            )\n        })\n    }\n\n    createConfigurationPromise(\n        appName: string,\n        dockerComposeService: IDockerComposeService\n    ) {\n        const self = this\n        return Promise.resolve().then(function () {\n            return self.apiManager\n                .getAllApps()\n                .then(function (data) {\n                    const appDefs = data.appDefinitions as IAppDef[]\n                    for (let index = 0; index < appDefs.length; index++) {\n                        const element = appDefs[index]\n                        if (element.appName === appName) {\n                            return Utils.copyObject(element)\n                        }\n                    }\n                })\n                .then(function (appDef) {\n                    if (!appDef) {\n                        throw new Error(\n                            'App was not found right after registering!!'\n                        )\n                    }\n\n                    appDef.volumes = appDef.volumes || []\n\n                    const vols = dockerComposeService.volumes || []\n                    for (let i = 0; i < vols.length; i++) {\n                        const elements = vols[i].split(':')\n                        if (elements[0].startsWith('/')) {\n                            appDef.volumes.push({\n                                hostPath: elements[0],\n                                containerPath: elements[1],\n                            })\n                        } else {\n                            appDef.volumes.push({\n                                volumeName: elements[0],\n                                containerPath: elements[1],\n                            })\n                        }\n                    }\n\n                    appDef.ports = appDef.ports || []\n                    const ports = dockerComposeService.ports || []\n                    for (let i = 0; i < ports.length; i++) {\n                        const elements = ports[i].split(':')\n                        appDef.ports.push({\n                            hostPort: Number(elements[0]),\n                            containerPort: Number(elements[1]),\n                        })\n                    }\n\n                    appDef.envVars = appDef.envVars || []\n                    const environment = dockerComposeService.environment || {}\n                    Object.keys(environment).forEach(function (envKey) {\n                        appDef.envVars.push({\n                            key: envKey,\n                            value: environment[envKey],\n                        })\n                    })\n\n                    const overrideYaml =\n                        DockerComposeToServiceOverride.convertComposeToService(\n                            dockerComposeService\n                        )\n\n                    if (!!overrideYaml) {\n                        appDef.serviceUpdateOverride = overrideYaml\n                    }\n\n                    if (!!dockerComposeService.caproverExtra) {\n                        if (\n                            dockerComposeService.caproverExtra.containerHttpPort\n                        ) {\n                            appDef.containerHttpPort =\n                                dockerComposeService.caproverExtra.containerHttpPort\n                        }\n\n                        if (\n                            !!dockerComposeService.caproverExtra\n                                .notExposeAsWebApp\n                        ) {\n                            appDef.notExposeAsWebApp = true\n                        }\n                    }\n\n                    return self.apiManager.updateConfigAndSave(appName, appDef)\n                })\n        })\n    }\n\n    createDeploymentPromise(\n        appName: string,\n        dockerComposeService: IDockerComposeService\n    ) {\n        const self = this\n        return Promise.resolve().then(function () {\n            let captainDefinition: ICaptainDefinition = {\n                schemaVersion: 2,\n            }\n\n            if (dockerComposeService.image) {\n                captainDefinition.imageName = dockerComposeService.image\n            } else {\n                captainDefinition.dockerfileLines =\n                    dockerComposeService.caproverExtra?.dockerfileLines\n            }\n\n            return self.apiManager.uploadCaptainDefinitionContent(\n                appName,\n                captainDefinition,\n                '',\n                false\n            )\n        })\n    }\n}\n","import { IHashMapGeneric } from '../../../models/IHashMapGeneric'\nimport {\n    IDockerComposeService,\n    IOneClickTemplate,\n} from '../../../models/IOneClickAppModels'\nimport Utils from '../../../utils/Utils'\nimport OneClickAppDeploymentHelper from './OneClickAppDeploymentHelper'\n\ninterface IDeploymentStep {\n    stepName: string\n    stepPromise: () => Promise<void>\n}\n\nexport interface IDeploymentState {\n    steps: string[]\n    error: string\n    successMessage?: string\n    currentStep: number\n}\n\nfunction replaceWith(\n    replaceThis: string,\n    withThis: string,\n    mainString: string\n) {\n    return mainString.split(replaceThis).join(withThis)\n}\n\nexport default class OneClickAppDeployManager {\n    private deploymentHelper: OneClickAppDeploymentHelper =\n        new OneClickAppDeploymentHelper()\n    private template: IOneClickTemplate | undefined\n    constructor(\n        private onDeploymentStateChanged: (\n            deploymentState: IDeploymentState\n        ) => void\n    ) {\n        //\n    }\n\n    startDeployProcess(\n        template: IOneClickTemplate,\n        values: IHashMapGeneric<string>\n    ) {\n        const self = this\n        let stringified = JSON.stringify(template)\n\n        for (\n            let index = 0;\n            index < template.caproverOneClickApp.variables.length;\n            index++\n        ) {\n            const element = template.caproverOneClickApp.variables[index]\n            stringified = replaceWith(\n                element.id,\n                values[element.id] || '',\n                stringified\n            )\n        }\n\n        try {\n            this.template = JSON.parse(stringified)\n        } catch (error) {\n            this.onDeploymentStateChanged({\n                steps: ['Parsing the template'],\n                error: `Cannot parse: ${stringified}\\n\\n\\n\\n${error}`,\n                currentStep: 0,\n            })\n            return\n        }\n\n        // Dependency tree and sort apps using \"createAppsArrayInOrder\"\n        // Call \"createDeploymentStepPromises\" for all apps.\n        // populate steps as string[]\n        // create promise chain with catch -> error. Each promise gets followed by currentStep++ promise\n        // Start running promises,\n\n        const apps = this.createAppsArrayInOrder()\n        if (!apps) {\n            self.onDeploymentStateChanged({\n                steps: ['Parsing the template'],\n                error: 'Cannot parse the template. Dependency tree cannot be resolved. Infinite loop!!',\n                currentStep: 0,\n            })\n        } else if (apps.length === 0) {\n            self.onDeploymentStateChanged({\n                steps: ['Parsing the template'],\n                error: 'Cannot parse the template. No services found!!',\n                currentStep: 0,\n            })\n        } else {\n            const steps: IDeploymentStep[] = []\n            for (let index = 0; index < apps.length; index++) {\n                const appToDeploy = apps[index]\n                steps.push(\n                    ...self.createDeploymentStepPromises(\n                        appToDeploy.appName,\n                        appToDeploy.service\n                    )\n                )\n            }\n\n            const stepsTexts: string[] = ['Parsing the template']\n            for (let index = 0; index < steps.length; index++) {\n                stepsTexts.push(steps[index].stepName)\n            }\n\n            let currentStep = 0\n            const onNextStepPromiseCreator = function () {\n                return new Promise<void>(function (resolve) {\n                    currentStep++\n                    self.onDeploymentStateChanged(\n                        Utils.copyObject({\n                            steps: stepsTexts,\n                            error: '',\n                            currentStep,\n                            successMessage:\n                                currentStep >= stepsTexts.length\n                                    ? self.template!.caproverOneClickApp\n                                          .instructions.end\n                                    : undefined,\n                        })\n                    )\n                    resolve()\n                })\n            }\n\n            let promise = onNextStepPromiseCreator()\n\n            for (let index = 0; index < steps.length; index++) {\n                const element = steps[index]\n                promise = promise\n                    .then(element.stepPromise)\n                    .then(onNextStepPromiseCreator)\n            }\n\n            promise.catch(function (error) {\n                self.onDeploymentStateChanged(\n                    Utils.copyObject({\n                        steps: stepsTexts,\n                        error: `Failed: ${error}`,\n                        currentStep,\n                    })\n                )\n            })\n        }\n    }\n\n    /**\n     * Outputs an array which includes all services in order based on their dependencies.\n     * The first element is an app without any dependencies. The second element can be an app that depends on the first app.\n     */\n    private createAppsArrayInOrder() {\n        const apps: {\n            appName: string\n            service: IDockerComposeService\n        }[] = []\n\n        let numberOfServices = 0\n        const servicesMap = this.template!.services\n        Object.keys(servicesMap).forEach(function (key) {\n            numberOfServices++\n        })\n\n        let itCount = 0\n        while (apps.length < numberOfServices) {\n            if (itCount > numberOfServices) {\n                // we are stuck in an infinite loop\n                return undefined\n            }\n            itCount++\n\n            Object.keys(servicesMap).forEach(function (appName) {\n                for (let index = 0; index < apps.length; index++) {\n                    const element = apps[index]\n                    if (element.appName === appName) {\n                        // already added\n                        return\n                    }\n                }\n\n                let service = servicesMap[appName]\n\n                const dependsOn = service.depends_on || []\n\n                for (let index = 0; index < dependsOn.length; index++) {\n                    const element = dependsOn[index]\n                    let dependencyAlreadyAdded = false\n                    for (let j = 0; j < apps.length; j++) {\n                        if (element === apps[j].appName) {\n                            dependencyAlreadyAdded = true\n                        }\n                    }\n\n                    if (!dependencyAlreadyAdded) return\n                }\n\n                apps.push({\n                    appName,\n                    service,\n                })\n            })\n        }\n\n        return apps\n    }\n\n    private createDeploymentStepPromises(\n        appName: string,\n        dockerComposeService: IDockerComposeService\n    ): IDeploymentStep[] {\n        const promises: IDeploymentStep[] = []\n        const self = this\n\n        promises.push({\n            stepName: `Registering ${appName}`,\n            stepPromise: function () {\n                return self.deploymentHelper.createRegisterPromise(\n                    appName,\n                    dockerComposeService\n                )\n            },\n        })\n\n        promises.push({\n            stepName: `Configuring ${appName} (volumes, ports, environmental variables)`,\n            stepPromise: function () {\n                return self.deploymentHelper.createConfigurationPromise(\n                    appName,\n                    dockerComposeService\n                )\n            },\n        })\n\n        promises.push({\n            stepName: `Deploying ${appName} (might take up to a minute)`,\n            stepPromise: function () {\n                return self.deploymentHelper.createDeploymentPromise(\n                    appName,\n                    dockerComposeService\n                )\n            },\n        })\n\n        return promises\n    }\n}\n","import { LoadingOutlined } from '@ant-design/icons'\nimport { Alert, Button, Card, Col, Row, Steps } from 'antd'\nimport React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { Prompt } from 'react-router-dom'\nimport { IDeploymentState } from './OneClickAppDeployManager'\n\nconst Step = Steps.Step\n\nexport default class OneClickAppDeployProgress extends Component<{\n    appName: string\n    deploymentState: IDeploymentState\n    onRestartClicked: () => void\n    onFinishClicked: () => void\n}> {\n    createSteps() {\n        const steps = this.props.deploymentState.steps\n        const stepsInfo = []\n\n        for (let index = 0; index < steps.length; index++) {\n            stepsInfo.push({\n                text: (\n                    <span>\n                        <span>\n                            {index === this.props.deploymentState.currentStep &&\n                            !this.props.deploymentState.error ? (\n                                <LoadingOutlined\n                                    style={{\n                                        fontSize: '16px',\n                                        marginRight: 12,\n                                    }}\n                                />\n                            ) : (\n                                <span />\n                            )}\n                        </span>\n                        {steps[index]}\n                    </span>\n                ),\n                key: steps[index],\n                icon: undefined,\n            })\n        }\n\n        return stepsInfo.map((s) => {\n            return <Step key={s.key} icon={s.icon} title={s.text} />\n        })\n    }\n\n    isRunning() {\n        const { successMessage, error } = this.props.deploymentState\n        return !successMessage && !error\n    }\n\n    blockNavigationIfRunning() {\n        return (\n            <Prompt\n                when={this.isRunning()}\n                message={`A deployment is running!\nAre you sure you want to leave this page?\nIt will interrupt the deployment at the current step, leaving the applications in potentially inconsistent state.`}\n            />\n        )\n    }\n\n    render() {\n        const self = this\n\n        return (\n            <div>\n                {self.blockNavigationIfRunning()}\n                <div>\n                    <Row justify=\"center\">\n                        <Col xs={{ span: 23 }} lg={{ span: 16 }}>\n                            <Card\n                                title={`Deploying your ${this.props.appName}`}\n                            >\n                                <p>\n                                    This process takes a few minutes to\n                                    complete. DO NOT refresh this page and DO\n                                    NOT navigate away!!!\n                                </p>\n                                <div style={{ padding: 20 }}>\n                                    <h3>Progress:</h3>\n                                    <div style={{ height: 20 }} />\n                                    <Steps\n                                        status={\n                                            !!self.props.deploymentState.error\n                                                ? 'error'\n                                                : undefined\n                                        }\n                                        direction=\"vertical\"\n                                        current={\n                                            self.props.deploymentState\n                                                .currentStep\n                                        }\n                                    >\n                                        {self.createSteps()}\n                                    </Steps>\n\n                                    <div\n                                        className={\n                                            !!self.props.deploymentState\n                                                .successMessage\n                                                ? ''\n                                                : 'hide-on-demand'\n                                        }\n                                    >\n                                        <div style={{ height: 20 }} />\n                                        <Alert\n                                            showIcon\n                                            type=\"success\"\n                                            message={\n                                                <div\n                                                    style={{\n                                                        whiteSpace: 'pre-wrap',\n                                                    }}\n                                                >\n                                                    <ReactMarkdown>\n                                                        {self.props\n                                                            .deploymentState\n                                                            .successMessage ||\n                                                            ''}\n                                                    </ReactMarkdown>\n                                                </div>\n                                            }\n                                        />\n                                        <div style={{ height: 80 }} />\n                                        <Row justify=\"end\">\n                                            <Button\n                                                style={{ minWidth: 150 }}\n                                                size=\"large\"\n                                                type=\"primary\"\n                                                onClick={() =>\n                                                    self.props.onFinishClicked()\n                                                }\n                                            >\n                                                Finish\n                                            </Button>\n                                        </Row>\n                                    </div>\n\n                                    <div\n                                        className={\n                                            !!self.props.deploymentState.error\n                                                ? ''\n                                                : 'hide-on-demand'\n                                        }\n                                    >\n                                        <div style={{ height: 20 }} />\n                                        <Alert\n                                            showIcon\n                                            type=\"error\"\n                                            message={\n                                                self.props.deploymentState.error\n                                            }\n                                        />\n                                        <div style={{ height: 80 }} />\n\n                                        <Row justify=\"end\">\n                                            <Button\n                                                size=\"large\"\n                                                type=\"primary\"\n                                                onClick={() =>\n                                                    self.props.onRestartClicked()\n                                                }\n                                            >\n                                                Go Back &amp; Try Again\n                                            </Button>\n                                        </Row>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Alert, Button, Col, Input, message, Row } from 'antd'\nimport React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport { IHashMapGeneric } from '../../../../models/IHashMapGeneric'\nimport { IOneClickVariable } from '../../../../models/IOneClickAppModels'\nimport Utils from '../../../../utils/Utils'\n\nexport default class OneClickVariablesSection extends Component<\n    {\n        oneClickAppVariables: IOneClickVariable[]\n        onNextClicked: (values: IHashMapGeneric<string>) => void\n    },\n    {\n        enteredVariables: IHashMapGeneric<string>\n        blurredFields: IHashMapGeneric<boolean>\n    }\n> {\n    constructor(props: any) {\n        super(props)\n\n        let enteredVariables: IHashMapGeneric<string> = {}\n        this.props.oneClickAppVariables.forEach((v) => {\n            const defaultValue = v.defaultValue\n            if (defaultValue) {\n                enteredVariables[v.id] = defaultValue\n            }\n        })\n\n        this.state = {\n            enteredVariables,\n            blurredFields: {},\n        }\n    }\n\n    onNextClicked() {\n        const self = this\n        const blurredFields = Utils.copyObject(self.state.blurredFields)\n        let allFieldValid = true\n        self.props.oneClickAppVariables.forEach((v) => {\n            blurredFields[v.id] = true\n            if (!self.isFieldValueValid(v)) {\n                allFieldValid = false\n            }\n        })\n\n        if (!allFieldValid) {\n            message.error('Fix all errors before deploying.')\n        } else {\n            self.props.onNextClicked(self.state.enteredVariables)\n        }\n        self.setState({ blurredFields })\n    }\n\n    isFieldValueValid(variable: IOneClickVariable) {\n        const self = this\n        const currVal = self.state.enteredVariables[variable.id] || ''\n        let isEnteredValueValid = true\n        if (variable.validRegex) {\n            // From https://stackoverflow.com/questions/39154255/converting-regexp-to-string-then-back-to-regexp\n            let parts = /\\/(.*)\\/(.*)/.exec(variable.validRegex)\n            if (\n                !parts /*This should never happen!*/ ||\n                !new RegExp(parts[1], parts[2]).test(currVal)\n            ) {\n                isEnteredValueValid = false\n            }\n        }\n\n        return isEnteredValueValid\n    }\n\n    createTextFields() {\n        const self = this\n        return this.props.oneClickAppVariables.map((variable) => {\n            const currVal = self.state.enteredVariables[variable.id]\n\n            return (\n                <div key={variable.id} style={{ marginBottom: 40 }}>\n                    <h4>{variable.label}</h4>\n                    <div\n                        style={{ paddingBottom: 5, fontSize: '90%' }}\n                        className={\n                            !!variable.description ? '' : 'hide-on-demand'\n                        }\n                    >\n                        <ReactMarkdown remarkPlugins={[gfm]}>\n                            {variable.description || ''}\n                        </ReactMarkdown>\n                    </div>\n\n                    <Row>\n                        <Col xs={{ span: 24 }} lg={{ span: 12 }}>\n                            <Input\n                                type=\"text\"\n                                placeholder={variable.defaultValue}\n                                value={\n                                    currVal === undefined\n                                        ? variable.defaultValue\n                                        : currVal\n                                }\n                                onChange={(e) => {\n                                    const newModel = Utils.copyObject(\n                                        this.state.enteredVariables\n                                    )\n                                    newModel[variable.id] = e.target.value\n                                    this.setState({\n                                        enteredVariables: newModel,\n                                    })\n                                }}\n                                onBlur={(e) => {\n                                    const blurredFields = Utils.copyObject(\n                                        self.state.blurredFields\n                                    )\n                                    blurredFields[variable.id] = true\n                                    self.setState({ blurredFields })\n                                }}\n                            />\n                            <div style={{ height: 5 }} />\n                            <Alert\n                                className={\n                                    !self.state.blurredFields[variable.id] ||\n                                    self.isFieldValueValid(variable)\n                                        ? 'hide-on-demand'\n                                        : ''\n                                }\n                                showIcon\n                                message={\n                                    <span>\n                                        Invalid value. Does not match Regex:\n                                        <code>{variable.validRegex}</code>\n                                    </span>\n                                }\n                                type=\"error\"\n                            />\n                        </Col>\n                    </Row>\n                </div>\n            )\n        })\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <div>{this.createTextFields()}</div>\n                <Row justify=\"end\">\n                    <Button\n                        size=\"large\"\n                        style={{ minWidth: 150 }}\n                        type=\"primary\"\n                        onClick={() => self.onNextClicked()}\n                    >\n                        Deploy\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import { Card, Col, message, Row } from 'antd'\nimport ReactMarkdown from 'react-markdown'\nimport { RouteComponentProps } from 'react-router'\nimport gfm from 'remark-gfm'\nimport { IOneClickTemplate } from '../../../../models/IOneClickAppModels'\nimport DomUtils from '../../../../utils/DomUtils'\nimport Toaster from '../../../../utils/Toaster'\nimport Utils from '../../../../utils/Utils'\nimport ApiComponent from '../../../global/ApiComponent'\nimport CenteredSpinner from '../../../global/CenteredSpinner'\nimport OneClickAppDeployManager, {\n    IDeploymentState,\n} from '../OneClickAppDeployManager'\nimport OneClickAppDeployProgress from '../OneClickAppDeployProgress'\nimport {\n    ONE_CLICK_APP_STRINGIFIED_KEY,\n    TEMPLATE_ONE_CLICK_APP,\n} from '../selector/OneClickAppSelector'\nimport OneClickVariablesSection from './OneClickVariablesSection'\n\nexport const ONE_CLICK_APP_NAME_VAR_NAME = '$$cap_appname'\nexport const ONE_CLICK_ROOT_DOMAIN_VAR_NAME = '$$cap_root_domain'\n\nexport default class OneClickAppConfigPage extends ApiComponent<\n    RouteComponentProps<any>,\n    {\n        apiData: IOneClickTemplate | undefined\n        rootDomain: string\n        deploymentState: IDeploymentState | undefined\n    }\n> {\n    private oneClickAppDeployHelper: OneClickAppDeployManager\n    private isUnmount: boolean = false\n\n    constructor(props: any) {\n        super(props)\n        const self = this\n        this.state = {\n            apiData: undefined,\n            rootDomain: '',\n            deploymentState: undefined,\n        }\n        this.oneClickAppDeployHelper = new OneClickAppDeployManager(\n            (deploymentState) => {\n                if (self.isUnmount) {\n                    return\n                }\n                self.setState({ deploymentState })\n            }\n        )\n    }\n\n    componentWillUnmount() {\n        // @ts-ignore\n        if (super.componentWillUnmount) super.componentWillUnmount()\n        this.isUnmount = true\n    }\n\n    componentDidMount() {\n        const self = this\n\n        const appNameFromPath = this.props.match.params.appName\n        const qs = new URLSearchParams(self.props.location.search)\n        const baseDomainFromPath = qs.get('baseDomain')\n        let promiseToFetchOneClick =\n            appNameFromPath === TEMPLATE_ONE_CLICK_APP\n                ? new Promise<any>(function (resolve) {\n                      resolve(\n                          JSON.parse(\n                              qs.get(ONE_CLICK_APP_STRINGIFIED_KEY) as string\n                          )\n                      )\n                  })\n                : self.apiManager\n                      .getOneClickAppByName(\n                          appNameFromPath,\n                          baseDomainFromPath as string\n                      )\n                      .then(function (data) {\n                          return data.appTemplate\n                      })\n\n        let apiData: IOneClickTemplate\n\n        promiseToFetchOneClick\n            .then(function (data: IOneClickTemplate) {\n                return JSON.parse(\n                    Utils.replaceAllGenRandomForOneClickApp(\n                        JSON.stringify(data)\n                    )\n                ) as IOneClickTemplate\n            })\n            .then(function (data: IOneClickTemplate) {\n                if (`${data.captainVersion}` !== '4') {\n                    message.error(\n                        `One-click app version is ${data.captainVersion}, this version supports \"v4\". Make sure your CapRover is up-to-date with the latest version!!`\n                    )\n                    return\n                }\n\n                data.caproverOneClickApp.variables =\n                    data.caproverOneClickApp.variables || []\n                // Adding app name to all one click apps\n                data.caproverOneClickApp.variables.unshift({\n                    id: ONE_CLICK_APP_NAME_VAR_NAME,\n                    label: 'App Name',\n                    description:\n                        'This is your app name. Pick a name such as my-first-1-click-app',\n                    validRegex: '/^([a-z0-9]+\\\\-)*[a-z0-9]+$/', // string version of /^([a-z0-9]+\\-)*[a-z0-9]+$/\n                })\n\n                apiData = data\n\n                return self.apiManager.getCaptainInfo()\n            })\n            .then(function (captainInfo) {\n                self.setState({\n                    apiData: apiData,\n                    rootDomain: captainInfo.rootDomain,\n                })\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    render() {\n        const self = this\n        const deploymentState = this.state.deploymentState\n        const apiData = this.state.apiData\n        const displayName =\n            apiData && apiData.caproverOneClickApp.displayName\n                ? apiData.caproverOneClickApp.displayName\n                : self.props.match.params.appName[0].toUpperCase() +\n                  self.props.match.params.appName.slice(1)\n\n        if (!apiData) {\n            return <CenteredSpinner />\n        }\n\n        if (!!deploymentState) {\n            return (\n                <OneClickAppDeployProgress\n                    appName={self.props.match.params.appName}\n                    deploymentState={deploymentState}\n                    onFinishClicked={() => self.props.history.push('/apps')}\n                    onRestartClicked={() =>\n                        self.setState({ deploymentState: undefined })\n                    }\n                />\n            )\n        }\n\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 23 }} lg={{ span: 16 }}>\n                        <Card title={`Setup your ${displayName}`}>\n                            <h2>{displayName}</h2>\n                            <p\n                                style={{\n                                    whiteSpace: 'pre-wrap',\n                                    paddingLeft: 15,\n                                    paddingRight: 15,\n                                }}\n                            >\n                                <ReactMarkdown remarkPlugins={[gfm]}>\n                                    {\n                                        apiData.caproverOneClickApp.instructions\n                                            .start\n                                    }\n                                </ReactMarkdown>\n                            </p>\n                            <div style={{ height: 40 }} />\n                            <OneClickVariablesSection\n                                oneClickAppVariables={\n                                    apiData.caproverOneClickApp.variables\n                                }\n                                onNextClicked={(values) => {\n                                    const template = Utils.copyObject(\n                                        self.state.apiData!\n                                    )\n                                    const valuesAugmented =\n                                        Utils.copyObject(values)\n\n                                    template.caproverOneClickApp.variables.push(\n                                        {\n                                            id: ONE_CLICK_ROOT_DOMAIN_VAR_NAME,\n                                            label: 'CapRover root domain',\n                                        }\n                                    )\n                                    valuesAugmented[\n                                        ONE_CLICK_ROOT_DOMAIN_VAR_NAME\n                                    ] = self.state.rootDomain\n\n                                    self.oneClickAppDeployHelper.startDeployProcess(\n                                        template,\n                                        valuesAugmented\n                                    )\n                                    DomUtils.scrollToTopBar()\n                                }}\n                            />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","export default class AppConstants {\n    public static readonly REDIRECT_TO_APPS_IF_READY_REQ_PARAM =\n        'redirectToAppsIfFullySetup'\n}\n","import { Button, Card, Col, Input, Modal, Row, Tooltip } from 'antd'\nimport { Redirect, RouteComponentProps } from 'react-router'\nimport AppConstants from '../utils/AppConstants'\nimport Toaster from '../utils/Toaster'\nimport ApiComponent from './global/ApiComponent'\nimport CenteredSpinner from './global/CenteredSpinner'\nimport ErrorRetry from './global/ErrorRetry'\nimport NewTabLink from './global/NewTabLink'\nconst Search = Input.Search\n\nexport default class Dashboard extends ApiComponent<\n    RouteComponentProps<any>,\n    {\n        isLoading: boolean\n        isForceChangingDomain: boolean\n        apiData: any\n        userEmail: string\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            userEmail: '',\n            isLoading: true,\n            isForceChangingDomain: false,\n            apiData: undefined,\n        }\n    }\n\n    componentDidMount() {\n        this.reFetchData()\n    }\n\n    reFetchData() {\n        const self = this\n        self.setState({ isLoading: true, apiData: undefined })\n        return this.apiManager\n            .getCaptainInfo()\n            .then(function (data: any) {\n                self.setState({ apiData: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    onForceSslClicked() {\n        const self = this\n\n        const isUsingHttp = window.location.href.startsWith('http://')\n\n        Modal.confirm({\n            title: 'Force HTTPS',\n            content: (\n                <p>\n                    Once Force HTTPS is activated, all HTTP traffic is\n                    redirected to HTTPS.\n                    {isUsingHttp\n                        ? 'Since this is a one-way action, and there is no revert, it is highly recommended that you test the HTTPS website first.'\n                        : ''}{' '}\n                    Do you still want to proceed?\n                </p>\n            ),\n            onOk() {\n                self.setState({ isLoading: true })\n                self.apiManager\n                    .forceSsl(true)\n                    .then(function () {\n                        Modal.success({\n                            title: 'Force HTTPS activated!',\n                            content: (\n                                <div>\n                                    <p>\n                                        All HTTP traffic is now redirected to\n                                        HTTPS.{' '}\n                                        {isUsingHttp\n                                            ? 'You will have to login again as you will now be redirected to HTTPS website.'\n                                            : ''}\n                                    </p>\n                                </div>\n                            ),\n                            onOk() {\n                                if (isUsingHttp) {\n                                    window.location.replace(\n                                        `https://${self.state.apiData.captainSubDomain}.${self.state.apiData.rootDomain}`\n                                    )\n                                }\n                            },\n                            onCancel() {\n                                if (isUsingHttp) {\n                                    window.location.replace(\n                                        `https://${self.state.apiData.rootDomain}`\n                                    )\n                                }\n                            },\n                        })\n                    })\n                    .catch(Toaster.createCatcher())\n                    .then(function () {\n                        self.setState({ isLoading: false })\n                    })\n            },\n            onCancel() {\n                // do nothing\n            },\n        })\n    }\n\n    onEnableSslClicked() {\n        const self = this\n        const IGNORE = 'IGNORE'\n\n        Promise.resolve()\n            .then(function () {\n                return new Promise(function (resolve, reject) {\n                    Modal.success({\n                        title: 'Habilitar HTTPS',\n                        content: (\n                            <div>\n                                <p>\n                                    Spacecloud usa{' '}\n                                    <NewTabLink url=\"https://letsencrypt.org/\">\n                                        Let&#39;s Encrypt\n                                    </NewTabLink>{' '}\n                                    para proporcionar certificados SSL gratuitos (HTTPS).\n                                     Esta dirección de correo electrónico es muy importante ya que\n                                     Let&#39;s Encrypt lo usa para la validación\n                                     propósitos Proporcione un correo electrónico válido aquí.\n                                </p>\n                                <p>\n                                IMPORTANTE: una vez que habilite HTTPS, no podrá\n                                     edite el dominio raíz nunca más. Cerciorarse\n                                     utiliza un buen dominio raíz. una buena practica\n                                     es ir un nivel más profundo y configurar su\n                                     dominio raíz. Por ejemplo, si posee {' '}\n                                     <code>example.com</code>, use{' '}\n                                     <code>*.caprover-root.example.com</code> como\n                                     su dominio raíz. Esto le permitirá\n                                     administre mejor sus subdominios, no use {' '}\n                                     <code>*.example.com</code> como raíz\n                                     dominio.\n                                </p>\n                                <Input\n                                    placeholder=\"your@email.com\"\n                                    type=\"email\"\n                                    onChange={(event) =>\n                                        self.setState({\n                                            userEmail: (\n                                                event.target.value || ''\n                                            ).trim(),\n                                        })\n                                    }\n                                />\n                            </div>\n                        ),\n                        onOk() {\n                            resolve(self.state.userEmail || '')\n                        },\n                        onCancel() {\n                            resolve(undefined)\n                        },\n                    })\n                })\n            })\n            .then(function (data: any) {\n                if (data === undefined) return IGNORE\n                self.setState({ isLoading: true })\n                return self.apiManager.enableRootSsl(data)\n            })\n\n            .then(function (data: any) {\n                if (data === IGNORE) return\n\n                Modal.success({\n                    title: '¡HTTPS activado para el dominio raíz!',\n                    content: (\n                        <div>\n                            <p>\n                            Ahora puedes usar{' '}\n                                <code>\n                                    {`https://${self.state.apiData.rootDomain}`}\n                                </code>\n                                . El siguiente paso es forzar HTTPS para que no permita\n                                 tráfico HTTP.\n                            </p>\n                        </div>\n                    ),\n                })\n\n                return self.reFetchData()\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    updateRootDomainClicked(rootDomain: string) {\n        const self = this\n        if (!self.state.apiData.hasRootSsl) {\n            self.performUpdateRootDomain(rootDomain, false)\n            return\n        }\n\n        Modal.confirm({\n            title: 'Force Change Root Domain',\n            content: (\n                <div>\n                    <p>\n                    Ya ha habilitado SSL para su dominio raíz.\n                         Cambiar la URL del dominio raíz invalidará HTTPS en\n                         dominio raíz y todos los subdominios predeterminados para aplicaciones si\n                         tener alguna aplicación.\n                     </p>\n                     <p>\n                         Todavía puede volver a habilitar HTTPS después de cambiar la raíz\n                         dominio.\n                    </p>\n                </div>\n            ),\n            onOk() {\n                self.performUpdateRootDomain(rootDomain, true)\n            },\n            onCancel() {\n                // do nothing\n            },\n        })\n    }\n\n    performUpdateRootDomain(rootDomain: string, force: boolean) {\n        const self = this\n\n        this.apiManager\n            .updateRootDomain(rootDomain, force)\n            .then(function (data: any) {\n                Modal.success({\n                    title: 'Root Domain Updated',\n                    content: (\n                        <div>\n                            <p>\n                            Haga clic en Aceptar para ser redirigido a su nueva raíz\n                                 dominio. Necesita iniciar sesión de nuevo.\n                            </p>\n                        </div>\n                    ),\n                    onOk() {\n                        window.location.replace(\n                            `http://${self.state.apiData.captainSubDomain}.${rootDomain}`\n                        )\n                    },\n                })\n            })\n            .catch(Toaster.createCatcher())\n    }\n\n    render() {\n        const self = this\n\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!self.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        const qs = new URLSearchParams(self.props.location.search)\n\n        if (\n            !!this.state.apiData.forceSsl &&\n            !!qs.get(AppConstants.REDIRECT_TO_APPS_IF_READY_REQ_PARAM)\n        ) {\n            return <Redirect to=\"/apps\" />\n        }\n\n        return (\n            <div>\n                {self.createInitialSetupIfNoRootSsl()}\n                <br />\n                {self.createPostFullSetupIfHasForceSsl()}\n                <br />\n                {self.createSetupPanelIfNoForceSsl()}\n            </div>\n        )\n    }\n\n    createSetupPanelIfNoForceSsl() {\n        const self = this\n        if (this.state.apiData.forceSsl && !self.state.isForceChangingDomain) {\n            // User has set up the machine, no need to update your domain again - unless user really wants this!\n            return undefined\n        }\n\n        return (\n            <Row justify=\"center\">\n                <Col xs={{ span: 23 }} lg={{ span: 16 }}>\n                    <Card title=\"Spacecloud configuraciones dominio raíz\">\n                        <div>\n                            <p>\n                            Lo primero que necesita Spacecloud es un\n                                dominio raíz. Por ejemplo, si posee {' '}\n                                <i>myawesomecompany.com</i>, puede usar{' '}\n                                <i>captain.myawesomecompany.com</i> o {' '}\n                                <i>foo.bar.myawesomecompany.com</i> como raíz\n                                dominio. Primero, debe asegurarse de que la ip\n                                dirección para todos los subdominios del dominio raíz\n                                resuelva a la dirección IP de Spacecloud. Para hacer esto,\n                                vaya a la configuración de DNS en su proveedor de dominio\n                                sitio web y establezca una entrada comodín A.\n                                <br /> Por ejemplo: <b> Escriba:</b> <u>A</u>,{' '}\n                                <b>Nombre (o host):</b> <u>*.spacecloud-root</u>,\n                                <b> IP (o Dirige a):</b>{' '}\n                                <u>110.120.130.140</u> donde esta es la IP\n                                dirección de su máquina Spacecloud.\n                            </p>\n                            <p>\n                                <i>\n                                NOTA: la configuración de DNS puede tardar varias horas\n                                     para entrar en vigor. Mira{' '}\n                                    <NewTabLink url=\"https://ca.godaddy.com/help/what-factors-affect-dns-propagation-time-1746\">\n                                        {' '}\n                                        aquí\n                                    </NewTabLink>{' '}\n                                    para más detalles.\n                                </i>\n                            </p>\n                        </div>\n                        <hr />\n                        <br />\n                        <Row>\n                            <div>\n                                <p>\n                                Por ejemplo, si establece {' '}\n                                     <code>*.my-root.example.com</code> a la IP\n                                     dirección de su servidor, simplemente ingrese {' '}\n                                     <code>my-root.example.com</code> en el cuadro\n                                     abajo:\n                                </p>\n                                <br />\n                                <div>\n                                    <Search\n                                        addonBefore=\"[wildcard]&nbsp;.\"\n                                        placeholder=\"my-root.example.com\"\n                                        defaultValue={\n                                            self.state.apiData.rootDomain + ''\n                                        }\n                                        enterButton=\"Actualizar dominio\"\n                                        onSearch={(value) =>\n                                            self.updateRootDomainClicked(value)\n                                        }\n                                    />\n                                </div>\n                            </div>\n                        </Row>\n                        <div style={{ height: 20 }} />\n                        <Row justify=\"end\">\n                            <Tooltip title=\"Using Let's Encrypt Free Service\">\n                                <Button\n                                    disabled={\n                                        self.state.apiData.hasRootSsl ||\n                                        !self.state.apiData.rootDomain\n                                    }\n                                    onClick={() => self.onEnableSslClicked()}\n                                >\n                                    Habilitar HTTPS\n                                </Button>\n                            </Tooltip>\n                            &nbsp;&nbsp;\n                            <Tooltip title=\"Redirect all HTTP to HTTPS\">\n                                <Button\n                                    disabled={\n                                        !self.state.apiData.hasRootSsl ||\n                                        self.state.apiData.forceSsl\n                                    }\n                                    onClick={() => self.onForceSslClicked()}\n                                >\n                                    Forzar HTTPS\n                                </Button>\n                            </Tooltip>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n\n    createInitialSetupIfNoRootSsl() {\n        if (this.state.apiData.hasRootSsl) {\n            // User has set up the machine, no need to show the welcome message\n            return <div />\n        }\n\n        return (\n            <Row justify=\"center\">\n                <Col xs={{ span: 23 }} lg={{ span: 16 }}>\n                    <Card title=\"Spacecloud configuración inicial ⚙️\">\n                        <div>\n                            <h3>\n                            ¡Felicidades!{' '}\n                                <span aria-label=\"Congrats\" role=\"img\">\n                                    🎉🎉\n                                </span>\n                            </h3>\n                            <p>\n                            <b /> ¡Has instalado Spacecloud correctamente!{' '}\n                                 <b>\n                                     Pero aún necesita asignar un dominio y\n                                     termine la configuración de HTTPS para configurar completamente\n                                     Spacecloud!{' '}\n                                 </b>\n                                 Puede configurar su instancia de Spacecloud en dos\n                                 maneras:\n                            </p>\n\n                            <ul>\n                                <li>\n                                <b>Herramienta de línea de comandos (RECOMENDADO): </b> activada\n                                     su máquina local, simplemente ejecuta\n                                     <br />\n                                     <code>npm i -g caprover</code>\n                                     <br />\n                                     seguido de\n                                     <br />\n                                     <code>configuración del servidor Spacecloud</code>. Después\n                                     sigue la guía.\n                                </li>\n                                <li>\n                                <b>Utilice el panel siguiente: </b> Este es un\n                                     versión no guiada de la línea de comandos\n                                     método. Use este método solo para el propósito\n                                     de experimentación\n                                </li>\n                            </ul>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n\n    createPostFullSetupIfHasForceSsl() {\n        const self = this\n        if (!this.state.apiData.forceSsl) {\n            // User has not fully set up the machine, do not show the post installation message\n            return undefined\n        }\n\n        return (\n            <Row justify=\"center\">\n                <Col xs={{ span: 23 }} lg={{ span: 16 }}>\n                    <Card title=\"Spacecloud\">\n                        <div>\n                            <h3>\n                            ¡Felicidades!{' '}\n                                <span aria-label=\"Congrats\" role=\"img\">\n                                    🎉🎉\n                                </span>\n                            </h3>\n                            <p>\n                            Ha instalado y configurado Spacecloud\n                                 ¡exitosamente! ¡Ya puede implementar sus aplicaciones!\n                                 Recuerde, con CapRover, puede implementar\n                                 aplicaciones desde el código fuente (como Node.js,\n                                 PHP, Java, Ruby, Python, etc.), y también puede\n                                 implementar aplicaciones listas para usar como MySQL,\n                                 ¡MongoDB, WordPress, Redis y muchos más!\n                            </p>\n\n                            <p>\n                            Para obtener más información sobre cómo implementar\n                                 aplicaciones desde el código fuente, asegúrese de tener\n                                 un vistazo a nuestro\n                                <a\n                                    href=\"https://caprover.com/docs/sample-apps.html\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {' '}\n                                    aplicaciones de muestra.\n                                </a>\n                            </p>\n\n                            <p>\n                                <i>\n                                Siempre puede actualizar su dominio raíz, pero\n                                     ¡ten cuidado! Sus certificados SSL obtendrán\n                                     revocado debido a este cambio de dominio.\n                                </i>\n                            </p>\n\n                            <Row justify=\"end\">\n                                <Button\n                                    disabled={this.state.isForceChangingDomain}\n                                    type=\"ghost\"\n                                    onClick={() => {\n                                        self.setState({\n                                            isForceChangingDomain: true,\n                                        })\n                                    }}\n                                >\n                                    Cambiar el dominio raíz de todos modos\n                                </Button>\n                            </Row>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\n","import { BulbFilled, BulbOutlined } from '@ant-design/icons'\nimport { Switch } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { useThemeSwitcher } from 'react-css-theme-switcher'\nimport StorageHelper from '../../utils/StorageHelper'\n\nconst DarkModeSwitch = () => {\n    const { switcher, themes } = useThemeSwitcher()\n    const [checked, setChecked] = useState(false)\n\n    useEffect(() => {\n        const storedCheckedState = StorageHelper.getDarkModeFromLocalStorage()\n        setChecked(storedCheckedState)\n    }, [])\n\n    return (\n        <Switch\n            checkedChildren={<BulbOutlined />}\n            unCheckedChildren={<BulbFilled />}\n            checked={checked}\n            onChange={(checked) => {\n                StorageHelper.setDarkModeInLocalStorage(checked)\n                switcher({ theme: checked ? themes.dark : themes.light })\n                setChecked(checked)\n            }}\n        />\n    )\n}\n\nexport default DarkModeSwitch\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport ApiManager from '../api/ApiManager'\nimport AppConstants from '../utils/AppConstants'\n\nexport default class LoggedInCatchAll extends Component<\n    RouteComponentProps<any>\n> {\n    componentDidMount() {\n        if (!ApiManager.isLoggedIn()) {\n            this.props.history.push('/login')\n        } else {\n            this.props.history.push(\n                `/dashboard?${AppConstants.REDIRECT_TO_APPS_IF_READY_REQ_PARAM}=true`\n            )\n        }\n    }\n\n    render() {\n        return <div />\n    }\n}\n","import * as Icons from '@ant-design/icons'\nimport { Avatar, Card, Col, Row, Tooltip } from 'antd'\nimport React, { Component } from 'react'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\n\nclass LoadBalancerStatsCard extends Component<any, any> {\n    render() {\n        return (\n            <div\n                className=\"inner-card\"\n                style={{\n                    height: 240,\n                    overflow: 'hidden',\n                    borderRadius: 5,\n                    marginBottom: 8,\n                }}\n            >\n                <div style={{ textAlign: 'center', margin: 16 }}>\n                    <Avatar\n                        style={{ backgroundColor: this.props.color }}\n                        size={64}\n                        icon={this.props.icon}\n                    />\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                    <h4>\n                        {this.props.titleText}\n                        <br />\n                        {this.props.titleNumber}\n                    </h4>\n                    <p>\n                        {this.props.text1}\n                        <br />\n                        {this.props.text2}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default class LoadBalancerStats extends ApiComponent<\n    {},\n    { apiData: any; isLoading: boolean }\n> {\n    private updateApiInterval: any\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            apiData: undefined,\n            isLoading: true,\n        }\n    }\n\n    updateApi() {\n        const self = this\n        self.setState({ isLoading: !self.state.apiData }) // set to true just the first time\n        this.apiManager\n            .getLoadBalancerInfo()\n            .then(function (data) {\n                self.setState({ apiData: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    componentWillUnmount() {\n        // @ts-ignore\n        if (super.componentWillUnmount) {\n            super.componentWillUnmount()\n        }\n        if (this.updateApiInterval) {\n            clearInterval(this.updateApiInterval)\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        this.updateApi()\n        this.updateApiInterval = setInterval(function () {\n            self.updateApi()\n        }, 20000)\n    }\n\n    render() {\n        if (!!this.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!this.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 23 }} lg={{ span: 22 }}>\n                        <Card title=\"Estadísticas del equilibrador de carga\">\n                            <Row gutter={10} justify=\"center\">\n                                <Col xs={{ span: 24 }} lg={{ span: 6 }}>\n                                    <Tooltip title=\"Constantemente subiendo como refrescando los valores\">\n                                        <div>\n                                            <LoadBalancerStatsCard\n                                                icon={<Icons.GlobalOutlined />}\n                                                color=\"#2361ae\"\n                                                titleText=\"Solicitudes totales\"\n                                                titleNumber={`${this.state.apiData.total}`}\n                                                text1={``}\n                                                text2={``}\n                                            />\n                                        </div>\n                                    </Tooltip>\n                                </Col>\n                                <Col xs={{ span: 24 }} lg={{ span: 6 }}>\n                                    <LoadBalancerStatsCard\n                                        icon={<Icons.ClusterOutlined />}\n                                        color=\"#23ae89\"\n                                        titleText=\"Conexiones activas\"\n                                        titleNumber={`${this.state.apiData.activeConnections}`}\n                                        text1={`${this.state.apiData.handled} Manejada`}\n                                        text2={`${this.state.apiData.accepted} Acceptadas`}\n                                    />\n                                </Col>\n                                <Col xs={{ span: 24 }} lg={{ span: 6 }}>\n                                    <LoadBalancerStatsCard\n                                        icon={<Icons.SyncOutlined />}\n                                        color=\"#d3a938\"\n                                        titleText=\"Peticiones activas\"\n                                        titleNumber={`${\n                                            this.state.apiData.reading +\n                                            this.state.apiData.writing\n                                        }`}\n                                        text1={`${this.state.apiData.reading} Leyendo`}\n                                        text2={`${this.state.apiData.writing} Escribiendo`}\n                                    />\n                                </Col>\n                                <Col xs={{ span: 24 }} lg={{ span: 6 }}>\n                                    <LoadBalancerStatsCard\n                                        icon={<Icons.ClockCircleOutlined />}\n                                        color=\"#ae2323\"\n                                        titleText=\"Peticiones en espera\"\n                                        titleNumber={`${this.state.apiData.waiting}`}\n                                        text1={`  `}\n                                        text2={`  `}\n                                    />\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport NewTabLink from '../global/NewTabLink'\n\nexport default class NetDataDescription extends Component {\n    render() {\n        return (\n            <div>\n                <p>\n                    <NewTabLink url=\"https://github.com/netdata/netdata/\">\n                        NetData\n                    </NewTabLink>{' '}\n                    es uno de los sistemas de monitoreo más populares y poderosos\n                     herramientas que proporcionan una interfaz web. es un sistema para\n                     Rendimiento distribuido en tiempo real y supervisión de la salud. Eso\n                     proporciona información inigualable, en tiempo real, de todo\n                     sucediendo en el sistema que ejecuta (incluidas aplicaciones como\n                     como servidores web y de base de datos), utilizando la web interactiva moderna\n                     tableros de instrumentos\n                </p>\n                <p>\n                NetData es rápido y eficiente, diseñado para ejecutarse permanentemente\n                     en todos los sistemas (servidores físicos y virtuales, contenedores,\n                     dispositivos IoT), sin interrumpir su función principal. los\n                     la imagen actual de NetData incrustada en CapRover utiliza un valor predeterminado\n                     configuración para\n                    <NewTabLink url=\"https://docs.netdata.cloud/docs/anonymous-statistics/\">\n                        &nbsp;estadisticas\n                    </NewTabLink>\n                    . Puede volver a compilar CapRover con una configuración personalizada diferente\n                     imagen si lo desea.\n                </p>\n                <p>\n                Spacecloud proporciona una interfaz simple para habilitar NetData en\n                     su instancia de CapRover. Actualmente, CapRover solo admite\n                     instalando NetData en su <b>nodo líder</b>, es decir, el\n                     nodo donde reside la instancia de CapRover. Esta limitación se debe\n                     a una limitación en la interfaz de Docker,\n                    <NewTabLink url=\"https://github.com/moby/moby/issues/25885/\">\n                        {' '}\n                        ver aquí\n                    </NewTabLink>\n                    .\n                </p>\n                <p>\n                    <i>Para obtener más detalles sobre NetData, visite su </i>\n                    <NewTabLink url=\"https://github.com/firehol/netdata/\">\n                        página de GitHub\n                    </NewTabLink>\n                    .\n                </p>\n            </div>\n        )\n    }\n}\n","import { Checkbox, Col, Input, Row } from 'antd'\nimport React, { Component } from 'react'\nimport Utils from '../../utils/Utils'\nimport PasswordField from '../global/PasswordField'\n\nexport default class NetDataSettingsForm extends Component<{\n    netDataInfo: any\n    updateModel: (netDataInfo: any) => void\n}> {\n    changeModel(\n        parentField: string,\n        childField: string,\n        value: string | boolean\n    ) {\n        const netDataInfo = Utils.copyObject(this.props.netDataInfo)\n        const netDataInfoData = netDataInfo.data\n        if (!netDataInfoData[parentField]) {\n            netDataInfoData[parentField] = {}\n        }\n        netDataInfoData[parentField][childField] = value\n        this.props.updateModel(netDataInfo)\n    }\n\n    render() {\n        const self = this\n        const netDataInfo = this.props.netDataInfo\n        return (\n            <div>\n                <h3>Notification Settings</h3>\n\n                <p>\n                    NetData offers multiple ways for you to receive\n                    notifications if something is going wrong with your server\n                    resource usage.\n                    <i>All notification options are completely OPTIONAL.</i>\n                </p>\n                <hr />\n                <br />\n                <h4>Email (SMTP)</h4>\n\n                <Row justify=\"center\">\n                    <Col xs={{ span: 23 }} lg={{ span: 20 }}>\n                        <Row gutter={20} align=\"middle\">\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Recipient Email\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"alerts.receiver@example.com\"\n                                    value={netDataInfo.data.smtp.to}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'to',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Server Tag\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"my-aws-server-01-anything\"\n                                    value={netDataInfo.data.smtp.hostname}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'hostname',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                SMTP Server\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"smtp.gmail.com\"\n                                    value={netDataInfo.data.smtp.server}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'server',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 6 }}\n                            >\n                                SMTP Port\n                                <Input\n                                    type=\"number\"\n                                    placeholder=\"587\"\n                                    value={netDataInfo.data.smtp.port}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'port',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 6 }}\n                            >\n                                Unsecure\n                                <Checkbox\n                                    checked={\n                                        !!netDataInfo.data.smtp.allowNonTls\n                                    }\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'allowNonTls',\n                                            e.target.checked\n                                        )\n                                    }\n                                >\n                                    allow non-TLS\n                                </Checkbox>\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                SMTP Username\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"alerts.receiver@example.com\"\n                                    value={netDataInfo.data.smtp.username}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'username',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                SMTP password\n                                <PasswordField\n                                    defaultValue={\n                                        netDataInfo.data.smtp.password\n                                    }\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'smtp',\n                                            'password',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <br />\n                <h4>Slack</h4>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 24 }} lg={{ span: 20 }}>\n                        <Row gutter={20} align=\"middle\">\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Slack Webhook\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"https://hooks.slack.com/services/XXXX\"\n                                    value={netDataInfo.data.slack.hook}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'slack',\n                                            'hook',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Slack Channel\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"alertschannel\"\n                                    value={netDataInfo.data.slack.channel}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'slack',\n                                            'channel',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <br />\n                <h4>Telegram</h4>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 24 }} lg={{ span: 20 }}>\n                        <Row gutter={20} align=\"middle\">\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Bot Token\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"TELEGRAM_BOT_TOKEN\"\n                                    value={netDataInfo.data.telegram.botToken}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'telegram',\n                                            'botToken',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Chat ID\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"Telegram Chat ID\"\n                                    value={netDataInfo.data.telegram.chatId}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'telegram',\n                                            'chatId',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n                <br />\n                <h4>Push Bullet</h4>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 24 }} lg={{ span: 20 }}>\n                        <Row gutter={20} align=\"middle\">\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Push Bullet API token\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"PUSH_BULLET_API_TOKEN\"\n                                    value={netDataInfo.data.pushBullet.apiToken}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'pushBullet',\n                                            'apiToken',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                            <Col\n                                className=\"netdata-field\"\n                                xs={{ span: 24 }}\n                                lg={{ span: 12 }}\n                            >\n                                Default Email (fallback receiver)\n                                <Input\n                                    type=\"text\"\n                                    placeholder=\"alerts.receiver@example.com\"\n                                    value={\n                                        netDataInfo.data.pushBullet\n                                            .fallbackEmail\n                                    }\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'pushBullet',\n                                            'fallbackEmail',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","import { AreaChartOutlined, PoweroffOutlined } from '@ant-design/icons'\nimport { Button, Card, Col, message, Row } from 'antd'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { IMobileComponent } from '../../models/ContainerProps'\nimport Toaster from '../../utils/Toaster'\nimport Utils from '../../utils/Utils'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport NetDataDescription from './NetDataDescription'\nimport NetDataSettingsForm from './NetDataSettingsForm'\n\nclass NetDataInfo extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    { apiData: any; isLoading: boolean }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            apiData: undefined,\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.refetchData()\n    }\n\n    refetchData() {\n        const self = this\n        self.setState({ isLoading: true, apiData: undefined })\n        return this.apiManager\n            .getNetDataInfo()\n            .then(function (data) {\n                self.setState({ apiData: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    toggleNetDataClicked(isActivated: boolean) {\n        const netDataInfo = Utils.copyObject(this.state.apiData)\n        netDataInfo.isEnabled = !!isActivated\n        this.onUpdateNetDataClicked(netDataInfo)\n    }\n\n    onUpdateNetDataClicked(netDataInfo: any) {\n        const self = this\n        self.setState({ isLoading: true })\n        return this.apiManager\n            .updateNetDataInfo(netDataInfo)\n            .then(function () {\n                message.success(\n                    netDataInfo.isEnabled\n                        ? 'NetData se inicia y actualiza!'\n                        : 'NetData se ha detenido!'\n                )\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.refetchData()\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (this.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!this.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        const netDataInfo = this.state.apiData\n\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col xs={{ span: 23 }} lg={{ span: 18 }}>\n                        <Card title=\"Herramienta de monitoreo de NetData\">\n                            <NetDataDescription />\n                            <hr />\n                            <div style={{ height: 30 }} />\n                            <div\n                                className={\n                                    netDataInfo.isEnabled\n                                        ? 'hide-on-demand'\n                                        : ''\n                                }\n                            >\n                                <Row justify=\"end\">\n                                    <Button\n                                        onClick={() =>\n                                            self.toggleNetDataClicked(true)\n                                        }\n                                        type=\"primary\"\n                                    >\n                                        <span>\n                                        Iniciar NetData engine &nbsp;\n                                            <PoweroffOutlined />\n                                        </span>\n                                    </Button>\n                                </Row>\n                            </div>\n\n                            <div\n                                className={\n                                    !netDataInfo.isEnabled\n                                        ? 'hide-on-demand'\n                                        : ''\n                                }\n                            >\n                                <Row justify=\"end\" gutter={20}>\n                                    <Button\n                                        style={{\n                                            marginRight: self.props.isMobile\n                                                ? 0\n                                                : 40,\n                                            marginBottom: self.props.isMobile\n                                                ? 8\n                                                : 0,\n                                        }}\n                                        block={self.props.isMobile}\n                                        onClick={() =>\n                                            self.toggleNetDataClicked(false)\n                                        }\n                                        danger\n                                    >\n                                        <span>\n                                            Parar NetData &nbsp;\n                                            <PoweroffOutlined />\n                                        </span>\n                                    </Button>\n                                    <a\n                                        type=\"submit\"\n                                        href={`//${netDataInfo.netDataUrl}`}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        style={{\n                                            width: this.props.isMobile\n                                                ? '100%'\n                                                : 'auto',\n                                        }}\n                                    >\n                                        <Button\n                                            block={self.props.isMobile}\n                                            // onClick={() => self.onStartNetDataClicked()}\n                                            type=\"primary\"\n                                        >\n                                            <span>\n                                                Abrir NetData &nbsp;\n                                                <AreaChartOutlined />\n                                            </span>\n                                        </Button>\n                                    </a>\n                                </Row>\n                                <div style={{ height: 30 }} />\n                                <hr />\n                                <div style={{ height: 30 }} />\n                                <NetDataSettingsForm\n                                    updateModel={(netDataInfo) => {\n                                        self.setState({ apiData: netDataInfo })\n                                    }}\n                                    netDataInfo={netDataInfo}\n                                />\n\n                                <br />\n\n                                <Row justify=\"end\">\n                                    <Button\n                                        type=\"primary\"\n                                        onClick={() =>\n                                            self.onUpdateNetDataClicked(\n                                                Utils.copyObject(\n                                                    self.state.apiData\n                                                )\n                                            )\n                                        }\n                                    >\n                                        Actualizar NetData\n                                    </Button>\n                                </Row>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect<IMobileComponent, any, any>(\n    mapStateToProps,\n    undefined\n)(NetDataInfo)\n","import React, { Component } from 'react'\nimport LoadBalancerStats from './LoadBalancerStats'\nimport NetDataInfo from './NetDataInfo'\n\nexport default class Monitoring extends Component {\n    render() {\n        return (\n            <div>\n                <LoadBalancerStats />\n                <div style={{ height: 50 }} />\n                <NetDataInfo />\n            </div>\n        )\n    }\n}\n","export interface IRegistryApi {\n    registries: IRegistryInfo[]\n    defaultPushRegistryId: string | undefined\n}\n\nexport class IRegistryTypes {\n    static readonly LOCAL_REG = 'LOCAL_REG'\n    static readonly REMOTE_REG = 'REMOTE_REG'\n}\n\ntype IRegistryType = 'LOCAL_REG' | 'REMOTE_REG'\n\nexport interface IRegistryInfo {\n    id: string\n    registryUser: string\n    registryPassword: string\n    registryDomain: string\n    registryImagePrefix: string\n    registryType: IRegistryType\n}\n","export const DEFAULT_REGISTRY_CHANGED = 'DEFAULT_REGISTRY_CHANGED'\n\nexport function emitDefaultRegistryChanged(value: string | undefined) {\n    return {\n        type: DEFAULT_REGISTRY_CHANGED,\n        payload: value,\n    }\n}\n","import { EditOutlined } from '@ant-design/icons'\nimport { Alert, Modal, Select } from 'antd'\nimport React, { Component } from 'react'\nimport { IRegistryApi } from '../../models/IRegistryInfo'\nimport Utils from '../../utils/Utils'\nimport ClickableLink from '../global/ClickableLink'\n\nconst Option = Select.Option\nconst NONE = 'none'\nconst DISABLED_PUSH = 'disabled push'\n\nexport default class DefaultDockerRegistry extends Component<\n    {\n        apiData: IRegistryApi\n        changeDefault: (regId: string) => void\n    },\n    { isInEditMode: boolean; newSelectedDefaultId: string }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isInEditMode: false,\n            newSelectedDefaultId: '',\n        }\n    }\n\n    getDefaultRegText() {\n        const registries = this.props.apiData.registries\n        const defaultPushRegistryId = this.props.apiData.defaultPushRegistryId\n        for (let index = 0; index < registries.length; index++) {\n            const element = registries[index]\n            if (element.id === defaultPushRegistryId) {\n                return `${element.registryUser} @ ${element.registryDomain}`\n            }\n        }\n\n        return DISABLED_PUSH\n    }\n\n    getAllOptions() {\n        const registries = Utils.copyObject(this.props.apiData.registries)\n        return registries.map(function (element) {\n            return (\n                <Option value={element.id} key={element.id}>\n                    {`${element.registryUser} @ ${element.registryDomain}`}\n                </Option>\n            )\n        })\n    }\n\n    render() {\n        const self = this\n\n        return (\n            <div>\n                <Modal\n                    title=\"Editar registro de inserción\"\n                    okText=\"Guardar y actualizar\"\n                    onCancel={() => self.setState({ isInEditMode: false })}\n                    onOk={() => {\n                        self.setState({ isInEditMode: false })\n                        self.props.changeDefault(\n                            self.state.newSelectedDefaultId\n                        )\n                    }}\n                    visible={self.state.isInEditMode}\n                >\n                    <p>\n                    Default Docker Registry es el registro que será\n                         utilizado para almacenar sus imágenes recién construidas. Puedes elegir{' '}\n                        <code>{DISABLED_PUSH}</code> si no quieres empujar\n                         sus imágenes recién creadas en cualquier registro docker. Mantener dentro\n                         cuenta que si usas <code>{DISABLED_PUSH}</code>,\n                         nodos de clúster (si tiene más de uno\n                         servidor) no podrá ejecutar sus aplicaciones.\n                    </p>\n                    <p>Cambie el Registro de Docker predeterminado:</p>\n                    <Select\n                        defaultValue={\n                            this.props.apiData.defaultPushRegistryId || NONE\n                        }\n                        style={{ width: 300 }}\n                        onChange={(value: string) => {\n                            if (value === NONE) {\n                                this.setState({ newSelectedDefaultId: '' })\n                            } else {\n                                this.setState({ newSelectedDefaultId: value })\n                            }\n                        }}\n                    >\n                        <Option value={NONE}>{DISABLED_PUSH}</Option>\n                        {self.getAllOptions()}\n                    </Select>\n\n                    <div\n                        style={{ marginTop: 20 }}\n                        className={\n                            !!self.state.newSelectedDefaultId\n                                ? 'hide-on-demand'\n                                : ''\n                        }\n                    >\n                        <Alert\n                            showIcon={true}\n                            type=\"warning\"\n                            message=\"Si tiene un clúster (más de un servidor), necesita tener un registro de inserción predeterminado. Si solo tiene un servidor, deshabilitar el registro de inserción predeterminado está bien.\"\n                        />\n                    </div>\n                </Modal>\n                <h3>Registro de inserción predeterminado</h3>\n                <p>\n                Registro de Docker para enviar nuevas imágenes:{' '}\n                    <ClickableLink\n                        onLinkClicked={() => {\n                            self.setState({\n                                isInEditMode: true,\n                                newSelectedDefaultId:\n                                    self.props.apiData.defaultPushRegistryId ||\n                                    '',\n                            })\n                        }}\n                    >\n                        <code>{this.getDefaultRegText()}</code> <EditOutlined />\n                    </ClickableLink>\n                </p>\n            </div>\n        )\n    }\n}\n","import { Collapse } from 'antd'\nimport React, { Component } from 'react'\n\nexport default class DockerRegistriesStaticInfo extends Component {\n    render() {\n        return (\n            <div>\n                <p>\n                La configuración de Docker Registry es <b>solo necesaria</b> si\n                     planee ejecutar su CapRover en un clúster. Para un solo nodo\n                     Implementaciones de CapRover, Docker Registry no se recomienda como\n                     hace que la implementación sea significativamente más lenta.\n                </p>\n                <Collapse>\n                    <Collapse.Panel header=\"Más información\" key=\"1\">\n                        <p>\n                        El registro de Docker es un repositorio para su compilado\n                            imágenes Es similar a Github, o Bitbucket, con\n                            repositorios privados. Sin embargo, en lugar de la fuente\n                            código, contiene los artefactos construidos para su\n                            solicitud. Es necesario para el modo clúster, ya que\n                            otros nodos necesitan acceder a la imagen construida para\n                            para que su aplicación se ejecute en ellos.\n                        </p>\n                        <p>\n                            Spacecloud proporciona dos métodos para configurar su\n                            registro acoplable:\n                        </p>\n                        <ul>\n                            <li>\n                                <b>Registro de Docker autohospedado:</b> Este es el\n                                forma más sencilla de configurar un registro docker.\n                                CapRover crea una instancia de Docker Registry\n                                en la máquina principal y gestiona el registro\n                                para ti. Sin embargo, tiene su propia limitación. Si\n                                su máquina principal está destruida, su local\n                                las imágenes se perderán. En la mayoría de los casos, esto no es\n                                un desastre ya que puede volver a implementar sus aplicaciones desde\n                                su código fuente.\n                                <br />\n                            </li>\n                            <li>\n                                <b>Registro remoto de Docker:</b> este enfoque\n                                depende de un servicio remoto para actuar como su Docker\n                                Registro. Con este enfoque, tendrá una\n                                clúster más fiable, suponiendo que el tercero\n                                ¡El servicio que usas es confiable! hay varios\n                                Servicios privados de Docker Registry disponibles:\n                                Registro de contenedores de Google, contenedor Amazon EC2\n                                Registry, Quay, etc. Tenga en cuenta que este enfoque\n                                te cuesta dinero.\n                            </li>\n                        </ul>\n                    </Collapse.Panel>\n                </Collapse>\n            </div>\n        )\n    }\n}\n","import { InfoCircleOutlined } from '@ant-design/icons'\nimport { Button, Input, Modal, Row, Tooltip } from 'antd'\nimport { Component } from 'react'\nimport {\n    IRegistryApi,\n    IRegistryInfo,\n    IRegistryTypes\n} from '../../models/IRegistryInfo'\nimport Utils from '../../utils/Utils'\nimport PasswordField from '../global/PasswordField'\n\nconst ADDING_LOCAL = 'ADDING_LOCAL'\nconst ADDING_REMOTE = 'ADDING_REMOTE'\n\nexport default class DockerRegistryAdd extends Component<\n    {\n        apiData: IRegistryApi\n        addDockerRegistry: (dockerRegistry: IRegistryInfo) => void\n        isMobile: boolean\n    },\n    {\n        modalShowing: 'ADDING_LOCAL' | 'ADDING_REMOTE' | undefined\n        remoteRegistryToAdd: IRegistryInfo\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            modalShowing: undefined,\n            remoteRegistryToAdd: this.getPlainRegistryInfo(),\n        }\n    }\n\n    getPlainRegistryInfo(): IRegistryInfo {\n        return {\n            id: '',\n            registryUser: '',\n            registryPassword: '',\n            registryDomain: '',\n            registryImagePrefix: '',\n            registryType: IRegistryTypes.REMOTE_REG,\n        }\n    }\n\n    render() {\n        const self = this\n\n        const hasSelfHostedRegistry =\n            this.props.apiData.registries\n                .map((reg) => reg.registryType)\n                .indexOf(IRegistryTypes.LOCAL_REG) >= 0\n\n        return (\n            <div>\n                <Modal\n                    title=\"Registro auto-hospedado\"\n                    okText=\"Habilitar registro auto-hospedado\"\n                    onCancel={() => self.setState({ modalShowing: undefined })}\n                    onOk={() => {\n                        self.setState({ modalShowing: undefined })\n                        self.props.addDockerRegistry({\n                            registryType: IRegistryTypes.LOCAL_REG, // Other values are getting ignored by the downstream callback\n                        } as IRegistryInfo)\n                    }}\n                    visible={self.state.modalShowing === ADDING_LOCAL}\n                >\n                    <p>\n                    Puede leer más sobre este tipo de registro en el\n                         página detrás de este modal, específicamente en \"Más información\"\n                         sección. ¿Desea continuar y habilitar el alojamiento propio?\n                         Registro Docker?\n                    </p>\n                </Modal>\n\n                <Modal\n                    title=\"Registro remoto\"\n                    okText=\"Añadir registro remoto\"\n                    onCancel={() => self.setState({ modalShowing: undefined })}\n                    onOk={() => {\n                        self.setState({ modalShowing: undefined })\n                        self.props.addDockerRegistry(\n                            self.state.remoteRegistryToAdd\n                        )\n                    }}\n                    visible={self.state.modalShowing === ADDING_REMOTE}\n                >\n                    <p>\n                    Puede leer más sobre este tipo de registro en el\n                         página detrás de este modal, específicamente en \"Más información\"\n                         sección.\n                    </p>\n                    <div style={{ height: 20 }} />\n                    <div style={{ maxWidth: 360 }}>\n                        <Input\n                            addonBefore=\"Nombre de usuario\"\n                            placeholder=\"usuario | email@gmail.com\"\n                            type=\"email\"\n                            value={self.state.remoteRegistryToAdd.registryUser}\n                            onChange={(e) => {\n                                const newData = Utils.copyObject(\n                                    self.state.remoteRegistryToAdd\n                                )\n                                newData.registryUser = e.target.value.trim()\n                                self.setState({ remoteRegistryToAdd: newData })\n                            }}\n                        />\n                        <div style={{ height: 20 }} />\n                        <PasswordField\n                            addonBefore=\"Contraseña\"\n                            placeholder=\"mypassword\"\n                            defaultValue={\n                                self.state.remoteRegistryToAdd.registryPassword\n                            }\n                            onChange={(e) => {\n                                const newData = Utils.copyObject(\n                                    self.state.remoteRegistryToAdd\n                                )\n                                newData.registryPassword = e.target.value\n                                self.setState({ remoteRegistryToAdd: newData })\n                            }}\n                        />\n                        <div style={{ height: 20 }} />\n                        <Input\n                            addonBefore=\"Dominio\"\n                            placeholder=\"registry-1.docker.io\"\n                            type=\"text\"\n                            value={\n                                self.state.remoteRegistryToAdd.registryDomain\n                            }\n                            onChange={(e) => {\n                                const newData = Utils.copyObject(\n                                    self.state.remoteRegistryToAdd\n                                )\n                                newData.registryDomain = e.target.value.trim()\n                                self.setState({ remoteRegistryToAdd: newData })\n                            }}\n                        />\n                        <div style={{ height: 20 }} />\n                        <Input\n                            addonBefore=\"Prefijo de imagen\"\n                            placeholder=\"usuario\"\n                            addonAfter={\n                                <Tooltip title=\"Sus imágenes se etiquetarán como RegistryDomain/ImagePrefix/ImageName. Para la mayoría de los proveedores, el prefijo de la imagen es exactamente su nombre de usuario, a menos que el campo DOMINIO sea específico para usted, en ese caso, este prefijo está vacío.\">\n                                    <InfoCircleOutlined />\n                                </Tooltip>\n                            }\n                            type=\"text\"\n                            value={\n                                self.state.remoteRegistryToAdd\n                                    .registryImagePrefix\n                            }\n                            onChange={(e) => {\n                                const newData = Utils.copyObject(\n                                    self.state.remoteRegistryToAdd\n                                )\n                                newData.registryImagePrefix =\n                                    e.target.value.trim()\n                                self.setState({ remoteRegistryToAdd: newData })\n                            }}\n                        />\n                    </div>\n                </Modal>\n\n                <div className={hasSelfHostedRegistry ? 'hide-on-demand' : ''}>\n                    <Row justify=\"end\">\n                        <Button\n                            block={this.props.isMobile}\n                            onClick={() =>\n                                self.setState({ modalShowing: ADDING_LOCAL })\n                            }\n                        >\n                            Agregar registro auto-hospedado\n                        </Button>\n                    </Row>\n                </div>\n\n                <div style={{ height: 20 }} />\n                <Row justify=\"end\">\n                    <Button\n                        block={this.props.isMobile}\n                        onClick={() =>\n                            self.setState({\n                                modalShowing: ADDING_REMOTE,\n                                remoteRegistryToAdd:\n                                    self.getPlainRegistryInfo(),\n                            })\n                        }\n                    >\n                        Agregar registro remoto\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import {\n    DeleteOutlined,\n    FormOutlined,\n    InfoCircleOutlined,\n} from '@ant-design/icons'\nimport { Card, Input, message, Modal, Table, Tooltip } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport React, { Component } from 'react'\nimport {\n    IRegistryApi,\n    IRegistryInfo,\n    IRegistryTypes,\n} from '../../models/IRegistryInfo'\nimport Utils from '../../utils/Utils'\nimport ClickableLink from '../global/ClickableLink'\nimport PasswordField from '../global/PasswordField'\n\nconst EDITING_MODAL = 'EDITING_MODAL'\nconst DELETING_MODAL = 'DELETING_MODAL'\n\nexport default class DockerRegistryTable extends Component<\n    {\n        apiData: IRegistryApi\n        isMobile: boolean\n        editRegistry: (dockerRegistry: IRegistryInfo) => void\n        deleteRegistry: (regId: string) => void\n    },\n    {\n        modalShowing: 'EDITING_MODAL' | 'DELETING_MODAL' | undefined\n        remoteRegistryToEdit: IRegistryInfo | undefined\n        registryIdToDelete: string | undefined\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            modalShowing: undefined,\n            remoteRegistryToEdit: undefined,\n            registryIdToDelete: undefined,\n        }\n    }\n\n    deleteRegistry(id: string) {\n        if (id === this.props.apiData.defaultPushRegistryId) {\n            Modal.warn({\n                title: 'No se puede eliminar la inserción predeterminada',\n                content: (\n                    <div>\n                        Este registro está configurado para ser el impulso predeterminado. No puedes\n                         elimine el registro de inserción predeterminado. Para quitar, primero tú\n                         necesita cambiar el registro push predeterminado a otro\n                         registro, o deshabilite completamente el push predeterminado\n                         registro. Luego, regresa y borra esto.\n                    </div>\n                ),\n            })\n            return\n        }\n\n        this.setState({\n            registryIdToDelete: id,\n            modalShowing: DELETING_MODAL,\n        })\n    }\n\n    editRegistry(dockerRegistry: IRegistryInfo) {\n        if (dockerRegistry.registryType === IRegistryTypes.LOCAL_REG) {\n            message.warn(\n                'No puede editar el registro autohospedado. Es administrado por Spacecloud.'\n            )\n            return\n        }\n\n        this.setState({\n            modalShowing: EDITING_MODAL,\n            remoteRegistryToEdit: Utils.copyObject(dockerRegistry),\n        })\n    }\n\n    getCols(): ColumnProps<IRegistryInfo>[] {\n        const self = this\n        const columns = [\n            {\n                title: 'Usuario',\n                dataIndex: 'registryUser' as 'registryUser',\n            },\n            {\n                title: 'Contraseña',\n                dataIndex: 'registryPassword' as 'registryPassword',\n                render: (registryPassword: string) => {\n                    return <span>Edit to see.</span>\n                },\n            },\n            {\n                title: 'Dominio',\n                dataIndex: 'registryDomain' as 'registryDomain',\n            },\n            {\n                title: 'Prefijo de imagen',\n                dataIndex: 'registryImagePrefix' as 'registryImagePrefix',\n            },\n            {\n                title: 'Acciones',\n                dataIndex: 'id' as 'id',\n                render: (id: string, reg: IRegistryInfo) => {\n                    return (\n                        <span>\n                            <ClickableLink\n                                onLinkClicked={() => {\n                                    self.editRegistry(reg)\n                                }}\n                            >\n                                <FormOutlined />\n                            </ClickableLink>\n                            &nbsp;&nbsp;&nbsp;&nbsp;\n                            <ClickableLink\n                                onLinkClicked={() => {\n                                    self.deleteRegistry(reg.id)\n                                }}\n                            >\n                                <DeleteOutlined />\n                            </ClickableLink>\n                        </span>\n                    )\n                },\n            },\n        ]\n        return columns\n    }\n\n    createEditModalContent() {\n        const self = this\n\n        return (\n            <div style={{ maxWidth: 360 }}>\n                <Input\n                    addonBefore=\"Nombre de usuario\"\n                    placeholder=\"Usuario | email@gmail.com\"\n                    type=\"email\"\n                    value={self.state.remoteRegistryToEdit!.registryUser}\n                    onChange={(e) => {\n                        const newData = Utils.copyObject(\n                            self.state.remoteRegistryToEdit!\n                        )\n                        newData.registryUser = e.target.value.trim()\n                        self.setState({ remoteRegistryToEdit: newData })\n                    }}\n                />\n                <div style={{ height: 20 }} />\n                <PasswordField\n                    addonBefore=\"Contraseña\"\n                    placeholder=\"mypassword\"\n                    defaultValue={\n                        self.state.remoteRegistryToEdit!.registryPassword\n                    }\n                    onChange={(e) => {\n                        const newData = Utils.copyObject(\n                            self.state.remoteRegistryToEdit!\n                        )\n                        newData.registryPassword = e.target.value\n                        self.setState({ remoteRegistryToEdit: newData })\n                    }}\n                />\n                <div style={{ height: 20 }} />\n                <Input\n                    addonBefore=\"Dominio\"\n                    placeholder=\"registry-1.docker.io\"\n                    type=\"text\"\n                    value={self.state.remoteRegistryToEdit!.registryDomain}\n                    onChange={(e) => {\n                        const newData = Utils.copyObject(\n                            self.state.remoteRegistryToEdit!\n                        )\n                        newData.registryDomain = e.target.value.trim()\n                        self.setState({ remoteRegistryToEdit: newData })\n                    }}\n                />\n                <div style={{ height: 20 }} />\n                <Input\n                    addonBefore=\"Prefijo de imagen\"\n                    placeholder=\"usuario\"\n                    addonAfter={\n                        <Tooltip title=\"Your images will be tagged as RegistryDomain/ImagePrefix/ImageName. For most providers, Image Prefix is exactly your username, unless the field DOMAIN is specific to you, in that case, this prefix is empty.\">\n                            <InfoCircleOutlined />\n                        </Tooltip>\n                    }\n                    type=\"text\"\n                    value={self.state.remoteRegistryToEdit!.registryImagePrefix}\n                    onChange={(e) => {\n                        const newData = Utils.copyObject(\n                            self.state.remoteRegistryToEdit!\n                        )\n                        newData.registryImagePrefix = e.target.value.trim()\n                        self.setState({ remoteRegistryToEdit: newData })\n                    }}\n                />\n            </div>\n        )\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Modal\n                    destroyOnClose={true}\n                    title=\"Confirmar borrado\"\n                    okText=\"Delete Registry\"\n                    onCancel={() => self.setState({ modalShowing: undefined })}\n                    onOk={() => {\n                        self.setState({ modalShowing: undefined })\n                        self.props.deleteRegistry(\n                            self.state.registryIdToDelete!\n                        )\n                    }}\n                    visible={self.state.modalShowing === DELETING_MODAL}\n                >\n                    Are you sure you want to remote this registry from your\n                    list. You will no longer be able to push to or pull from\n                    this registry.\n                </Modal>\n                <Modal\n                    destroyOnClose={true}\n                    title=\"Editar registro\"\n                    okText=\"Guardar y actualizar\"\n                    onCancel={() => self.setState({ modalShowing: undefined })}\n                    onOk={() => {\n                        self.setState({ modalShowing: undefined })\n                        self.props.editRegistry(\n                            Utils.copyObject(self.state.remoteRegistryToEdit!)\n                        )\n                    }}\n                    visible={self.state.modalShowing === EDITING_MODAL}\n                >\n                    {self.state.remoteRegistryToEdit ? (\n                        self.createEditModalContent()\n                    ) : (\n                        <div />\n                    )}\n                </Modal>\n                <h3>Docker Registries</h3>\n                <div>\n                    {this.props.isMobile ? (\n                        this.props.apiData.registries.map((registry) => (\n                            <Card\n                                type=\"inner\"\n                                key={registry.id}\n                                style={{\n                                    marginBottom: 8,\n                                    wordWrap: 'break-word',\n                                }}\n                                title={registry.registryDomain}\n                            >\n                                <div>\n                                    <b>Usuario:</b> {registry.registryImagePrefix}\n                                </div>\n                                <div>\n                                    <b>Contraseña:</b> Edit to see.\n                                </div>\n                                <div>\n                                    <b>Dominio:</b> {registry.registryDomain}\n                                </div>\n                                <div>\n                                    <b>Prefijo de imagen:</b> {registry.registryUser}\n                                </div>\n                                <div>\n                                    <b>Acciones:</b>\n                                    <span>\n                                        <ClickableLink\n                                            onLinkClicked={() => {\n                                                self.editRegistry(registry)\n                                            }}\n                                        >\n                                            <FormOutlined />\n                                        </ClickableLink>\n                                        &nbsp;&nbsp;&nbsp;&nbsp;\n                                        <ClickableLink\n                                            onLinkClicked={() => {\n                                                self.deleteRegistry(registry.id)\n                                            }}\n                                        >\n                                            <DeleteOutlined />\n                                        </ClickableLink>\n                                    </span>\n                                </div>\n                            </Card>\n                        ))\n                    ) : (\n                        <Table\n                            rowKey=\"id\"\n                            pagination={false}\n                            columns={this.getCols()}\n                            dataSource={this.props.apiData.registries}\n                        />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import { Alert, message } from 'antd'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport {\n    IRegistryApi,\n    IRegistryInfo,\n    IRegistryTypes,\n} from '../../models/IRegistryInfo'\nimport { emitDefaultRegistryChanged } from '../../redux/actions/DefaultRegistryActions'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport DefaultDockerRegistry from './DefaultDockerRegistry'\nimport DockerRegistriesStaticInfo from './DockerRegistriesStaticInfo'\nimport DockerRegistryAdd from './DockerRegistryAdd'\nimport DockerRegistryTable from './DockerRegistryTable'\n\nclass DockerRegistries extends ApiComponent<\n    {\n        emitDefaultRegistryChanged: Function\n        isMobile: boolean\n    },\n    { apiData: IRegistryApi | undefined; isLoading: boolean }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            apiData: undefined,\n            isLoading: true,\n        }\n    }\n\n    fetchData() {\n        const self = this\n        this.setState({ apiData: undefined, isLoading: true })\n        this.apiManager\n            .getDockerRegistries()\n            .then(function (data) {\n                self.setState({ apiData: data })\n                self.props.emitDefaultRegistryChanged(\n                    (data as IRegistryApi).defaultPushRegistryId\n                )\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    changeDefault(id: string) {\n        const self = this\n        this.setState({ apiData: undefined, isLoading: true })\n\n        this.apiManager\n            .setDefaultPushDockerRegistry(id)\n            .then(function () {\n                message.success('El registro de inserción predeterminado se modificó correctamente.')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.fetchData()\n            })\n    }\n\n    deleteRegistry(id: string) {\n        const self = this\n\n        const isSelfHosted =\n            self.state\n                .apiData!.registries.map(\n                    (reg) =>\n                        reg.registryType === IRegistryTypes.LOCAL_REG &&\n                        reg.id === id\n                )\n                .indexOf(true) >= 0\n\n        this.setState({ apiData: undefined, isLoading: true })\n\n        const promiseToStart = isSelfHosted\n            ? this.apiManager.disableSelfHostedDockerRegistry()\n            : this.apiManager.deleteDockerRegistry(id)\n\n        promiseToStart\n            .then(function () {\n                message.success('Registro eliminado.')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.fetchData()\n            })\n    }\n\n    editRegistry(dockerRegistry: IRegistryInfo) {\n        const self = this\n        this.setState({ apiData: undefined, isLoading: true })\n\n        this.apiManager\n            .updateDockerRegistry(dockerRegistry)\n            .then(function () {\n                message.success('Registro actualizado.')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.fetchData()\n            })\n    }\n\n    addDockerRegistry(dockerRegistry: IRegistryInfo) {\n        const self = this\n        this.setState({ apiData: undefined, isLoading: true })\n\n        const promiseToStart =\n            dockerRegistry.registryType === IRegistryTypes.LOCAL_REG\n                ? self.apiManager.enableSelfHostedDockerRegistry()\n                : self.apiManager.addDockerRegistry(dockerRegistry)\n\n        promiseToStart\n            .then(function () {\n                message.success('¡Registro de Docker agregado con éxito!')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.fetchData()\n            })\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    render() {\n        const self = this\n        if (this.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!this.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        return (\n            <div>\n                <DockerRegistriesStaticInfo />\n\n                <div style={{ height: 60 }} />\n                <div\n                    style={{ textAlign: 'center' }}\n                    className={\n                        this.state.apiData.registries.length === 0\n                            ? ''\n                            : 'hide-on-demand'\n                    }\n                >\n                    <Alert\n                        type=\"info\"\n                        message=\"Aún no se han añadido registros. ¡Continúe y agregue su primer registro!\"\n                    />\n                </div>\n\n                <div\n                    className={\n                        this.state.apiData.registries.length > 0\n                            ? ''\n                            : 'hide-on-demand'\n                    }\n                >\n                    <DefaultDockerRegistry\n                        apiData={self.state.apiData!}\n                        changeDefault={(id) => {\n                            self.changeDefault(id)\n                        }}\n                    />\n\n                    <div style={{ height: 40 }} />\n\n                    <DockerRegistryTable\n                        apiData={self.state.apiData!}\n                        isMobile={this.props.isMobile}\n                        deleteRegistry={(id) => {\n                            self.deleteRegistry(id)\n                        }}\n                        editRegistry={(dockerRegistry) => {\n                            self.editRegistry(dockerRegistry)\n                        }}\n                    />\n                </div>\n                <div style={{ height: 50 }} />\n                <DockerRegistryAdd\n                    apiData={self.state.apiData!}\n                    isMobile={this.props.isMobile}\n                    addDockerRegistry={(dockerRegistry) =>\n                        self.addDockerRegistry(dockerRegistry)\n                    }\n                />\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        defaultRegistryId: state.registryReducer.defaultRegistryId,\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    emitDefaultRegistryChanged: emitDefaultRegistryChanged,\n})(DockerRegistries)\n","import { ClusterOutlined, InfoCircleOutlined } from '@ant-design/icons'\nimport { Button, Card, Col, Collapse, Input, Radio, Row, Tooltip } from 'antd'\nimport React, { Component } from 'react'\nimport Utils from '../../utils/Utils'\n\nexport interface INodeToAdd {\n    remoteNodeIpAddress: string\n    captainIpAddress: string\n    nodeType: string\n    privateKey: string\n    sshPort: string\n    sshUser: string\n}\n\nexport default class AddNode extends Component<\n    {\n        leaderIp: string\n        isMobile: boolean\n        onAddNodeClicked: (nodeToAdd: INodeToAdd) => void\n    },\n    {\n        nodeToAdd: INodeToAdd\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            nodeToAdd: {\n                remoteNodeIpAddress: '',\n                sshPort: '22',\n                sshUser: 'root',\n                captainIpAddress: props.leaderIp || '',\n                nodeType: 'worker',\n                privateKey: '',\n            },\n        }\n    }\n\n    changeModel(childField: string, value: string) {\n        const nodeToAdd = Utils.copyObject(this.state.nodeToAdd) as any\n        nodeToAdd[childField] = value\n        this.setState({ nodeToAdd })\n    }\n\n    render() {\n        const self = this\n        const nodeToAdd = self.state.nodeToAdd\n\n        return (\n            <div>\n                <Card\n                    style={{ marginTop: 16 }}\n                    type=\"inner\"\n                    title=\"Añadir nuevo nodo\"\n                >\n                    <Row justify=\"space-between\">\n                        <Col lg={{ span: 11 }} xs={{ span: 24 }}>\n                            <Input\n                                style={{ marginBottom: 10 }}\n                                addonBefore=\"Nueva IP del nodo\"\n                                placeholder=\"123.123.123.123\"\n                                type=\"text\"\n                                value={nodeToAdd.remoteNodeIpAddress}\n                                onChange={(e) =>\n                                    self.changeModel(\n                                        'remoteNodeIpAddress',\n                                        e.target.value\n                                    )\n                                }\n                            />\n                        </Col>\n                        <Col lg={{ span: 11 }} xs={{ span: 24 }}>\n                            <Input\n                                style={{ marginBottom: 10 }}\n                                addonBefore=\"Dirección IP Spacecloud\"\n                                placeholder=\"123.123.123.123\"\n                                type=\"text\"\n                                value={nodeToAdd.captainIpAddress}\n                                onChange={(e) =>\n                                    self.changeModel(\n                                        'captainIpAddress',\n                                        e.target.value\n                                    )\n                                }\n                            />\n                        </Col>\n                        <Col span={24} style={{ marginTop: 10 }}>\n                            <div style={{ paddingBottom: 5 }}>\n                                &nbsp;Clave privada SSH para <b>root</b>\n                                &nbsp;\n                                <Tooltip title=\"Utilice la clave RSA. Otros tipos, como Ed25519, no son compatibles, para estos utilice el método alternativo a continuación.\">\n                                    <InfoCircleOutlined\n                                        style={{\n                                            paddingTop: 8,\n                                            paddingLeft: 8,\n                                        }}\n                                    />\n                                </Tooltip>\n                            </div>\n                            <Input.TextArea\n                                style={{ marginBottom: 20 }}\n                                className=\"code-input\"\n                                rows={6}\n                                placeholder=\"-----BEGIN RSA PRIVATE KEY-----&#10;MIICWwIBAAKBgQDArfs81aizq8ckg16e+ewFgJg7J...\"\n                                value={nodeToAdd.privateKey}\n                                onChange={(e) =>\n                                    self.changeModel(\n                                        'privateKey',\n                                        e.target.value\n                                    )\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    <Row justify=\"end\">\n                        <Radio.Group\n                            defaultValue=\"a\"\n                            buttonStyle=\"outline\"\n                            style={{ marginBottom: 20 }}\n                            value={nodeToAdd.nodeType}\n                            onChange={(e) =>\n                                self.changeModel('nodeType', e.target.value)\n                            }\n                        >\n                            <Radio.Button value=\"worker\">\n                                Unirse como nodo esclavo\n                            </Radio.Button>\n                            <Radio.Button value=\"manager\">\n                                Unirse como nodo principal\n                            </Radio.Button>\n                        </Radio.Group>\n                        &nbsp;\n                        <Tooltip title=\"Sugerencia: por cada 5 trabajadores, agregue 2 nodos de administrador, manteniendo el recuento de nodos de administrador como un número impar. Por lo tanto, use el nodo trabajador para los primeros 4 nodos que agregue a su clúster.\">\n                            <InfoCircleOutlined\n                                style={{ paddingTop: 8, paddingLeft: 8 }}\n                            />\n                        </Tooltip>\n                    </Row>\n\n                    <Row justify=\"end\">\n                        <Col\n                            lg={{ span: 6 }}\n                            xs={{ span: 24 }}\n                            style={{ maxWidth: 250 }}\n                        >\n                            <Input\n                                addonBefore=\"Puerto SSH\"\n                                type=\"text\"\n                                value={nodeToAdd.sshPort}\n                                onChange={(e) =>\n                                    self.changeModel('sshPort', e.target.value)\n                                }\n                            />\n                        </Col>\n                        <Col\n                            lg={{ span: 6 }}\n                            xs={{ span: 24 }}\n                            style={{ maxWidth: 250, marginLeft: 10 }}\n                        >\n                            <Tooltip title=\"El uso de usuarios no root con acceso sudo NO funcionará. Si desea utilizar una cuenta que no sea raíz, debe poder ejecutar los comandos de la ventana acoplable sin sudo. O simplemente use el método alternativo a continuación.\">\n                                <Input\n                                    addonBefore=\"Usuario SSH\"\n                                    type=\"text\"\n                                    value={nodeToAdd.sshUser}\n                                    onChange={(e) =>\n                                        self.changeModel(\n                                            'sshUser',\n                                            e.target.value\n                                        )\n                                    }\n                                />\n                            </Tooltip>\n                        </Col>\n                        <Button\n                            style={{ marginLeft: 10 }}\n                            type=\"primary\"\n                            block={this.props.isMobile}\n                            onClick={() =>\n                                self.props.onAddNodeClicked(\n                                    self.state.nodeToAdd\n                                )\n                            }\n                        >\n                            <ClusterOutlined /> &nbsp; Unirse al cluster\n                        </Button>\n                    </Row>\n                    <div style={{ height: 50 }} />\n                    <Collapse>\n                        <Collapse.Panel header=\"Alternative Method\" key=\"1\">\n                            <p>\n                            CapRover usa SSH para conectarse a sus nodos y\n                                 hacer que se unan al grupo. A veces, esto\n                                 el proceso no funciona debido a SSH no estándar\n                                 configuraciones como puertos personalizados, nombres de usuario personalizados,\n                                 y etc.\n                            </p>\n                            <p>\n                            En estos casos, será mucho más sencillo ejecutar\n                                 los comandos manualmente desde un SSH\n                                 sesión. Primero, de su{' '}\n                                 <b>nodo líder principal</b>, ejecute lo siguiente\n                                 dominio:\n                            </p>\n                            <code>docker swarm join-token worker</code>\n\n                            <p style={{ marginTop: 20 }}>\n                            Saldrá algo como esto:\n                            </p>\n                            <code>\n                            Para agregar un trabajador a este enjambre, ejecute lo siguiente\n                                 dominio:\n                                 <br />\n                                 docker swarm join --token\n                                SWMTKN-secret-token-here 127.0.0.1:2377\n                            </code>\n                            <p style={{ marginTop: 20 }}>\n                            Luego, copie el comando de la salida de arriba,\n                                 y simplemente desde el nodo trabajador, ejecute eso\n                                 dominio.\n                            </p>\n                            <p style={{ marginTop: 20 }}>\n                            Luego, copie el comando de la salida de arriba,\n                                 y simplemente desde el nodo trabajador, ejecute eso\n                                 dominio.\n                                <code>\n                                    {' '}\n                                    --advertise-addr WORKER_EXTERNAL_IP:2377\n                                </code>\n                                . Ver{' '}\n                                <a\n                                    href=\"https://github.com/caprover/caprover/issues/572\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {' '}\n                                    este problema{' '}\n                                </a>{' '}\n                                para más detalles.\n                            </p>\n                        </Collapse.Panel>\n                    </Collapse>\n                </Card>\n            </div>\n        )\n    }\n}\n","import { Alert, Col, Divider, message, Row } from 'antd'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport Logger from '../../utils/Logger'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport AddNode, { INodeToAdd } from './AddNode'\n\nclass CurrentNodes extends ApiComponent<\n    {\n        defaultRegistryId: string | undefined\n        isMobile: boolean\n    },\n    {\n        isLoading: boolean\n        apiData: any\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            apiData: undefined,\n            isLoading: true,\n        }\n    }\n\n    fetchData() {\n        const self = this\n        self.setState({ apiData: undefined, isLoading: true })\n        self.apiManager\n            .getAllNodes()\n            .then(function (data) {\n                self.setState({ apiData: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    addNode(nodeToAdd: INodeToAdd) {\n        const self = this\n        self.setState({ apiData: undefined, isLoading: true })\n        self.apiManager\n            .addDockerNode(\n                nodeToAdd.nodeType,\n                nodeToAdd.privateKey,\n                nodeToAdd.remoteNodeIpAddress,\n                nodeToAdd.sshPort,\n                nodeToAdd.sshUser,\n                nodeToAdd.captainIpAddress\n            )\n            .then(function () {\n                message.success('Nodo añadido correctamente!')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.fetchData()\n            })\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    createNodes() {\n        const nodes: any[] = this.state.apiData.nodes || []\n\n        return nodes.map((node) => {\n            return (\n                <div\n                    className=\"inner-card\"\n                    key={node.nodeId}\n                    style={{\n                        paddingTop: 15,\n                        paddingBottom: 20,\n                        paddingRight: 20,\n                        paddingLeft: 20,\n                        marginBottom: 40,\n                        borderRadius: 5,\n                    }}\n                >\n                    <Row justify=\"center\">\n                        <b>ID del nodo:&nbsp;&nbsp;</b> {node.nodeId}\n                    </Row>\n                    <hr />\n                    <div style={{ height: 10 }} />\n                    <Row>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Tipo: </b>\n                            {node.isLeader ? 'Leader (Main Node)' : node.type}\n                        </Col>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>IP: </b>\n                            {node.ip}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Estado: </b>\n                            {node.state}\n                        </Col>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Estatus: </b>\n                            {node.status}\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>RAM: </b>\n                            {(node.memoryBytes / 1073741824).toFixed(2)} GB\n                        </Col>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>OS: </b>\n                            {node.operatingSystem}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>CPU: </b>\n                            {(node.nanoCpu / 1000000000).toFixed(0)} cores\n                        </Col>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Arquitectura: </b>\n                            {node.architecture}\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Hostname: </b>\n                            {node.hostname}\n                        </Col>\n                        <Col lg={{ span: 12 }} xs={{ span: 24 }}>\n                            <b>Versión de Docker: </b>\n                            {node.dockerEngineVersion}\n                        </Col>\n                    </Row>\n                </div>\n            )\n        })\n\n        // \"ip\":\"199.195.150.96\"\n        // \"nodeId\":\"i9lccwa92dfyy9kpkktw2okll\"\n\n        // ,\"type\":\"manager\"\n        // ,\"isLeader\":true,\n        // ,\"state\":\"ready\",\n        // \"status\":\"active\"\n\n        // \"hostname\":\"kasra-X550JK\"\n        // \"dockerEngineVersion\":\"18.09.1-rc1\",\n\n        // \"memoryBytes\":8241434624,\n        // operatingSystem\":\"linux\",\n        // \"nanoCpu\":8000000000,\n        // ,\"architecture\":\"x86_64\",\"\n    }\n\n    render() {\n        const self = this\n        if (this.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        if (!this.state.apiData) {\n            return <ErrorRetry />\n        }\n\n        const nodes: any[] = this.state.apiData.nodes || []\n        let leaderIp = ''\n        try {\n            leaderIp = nodes.filter((n) => n.isLeader)[0].ip\n        } catch (err) {\n            Logger.error(err)\n        }\n\n        return (\n            <div>\n                {this.props.defaultRegistryId ? (\n                    <AddNode\n                        leaderIp={leaderIp}\n                        isMobile={this.props.isMobile}\n                        onAddNodeClicked={(nodeToAdd) => {\n                            self.addNode(nodeToAdd)\n                        }}\n                    />\n                ) : (\n                    <div>\n                        <Alert\n                            type=\"warning\"\n                            showIcon={true}\n                            message=\"No se pueden agregar más nodos porque no se ha establecido ningún registro de inserción predeterminado. Para agregar más nodos y crear un clúster, primero debe agregar un registro docker y configurarlo como el registro de inserción predeterminado.\"\n                        />\n                    </div>\n                )}\n                <div style={{ height: 50 }} />\n\n                <Divider type=\"horizontal\">\n                    <h4>Nodos del cluster actuales</h4>\n                </Divider>\n                <div style={{ height: 30 }} />\n\n                <Row justify=\"center\">\n                    <Col lg={{ span: 14 }} xs={{ span: 23 }}>\n                        {self.createNodes()}\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        defaultRegistryId: state.registryReducer.defaultRegistryId,\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect(mapStateToProps)(CurrentNodes)\n","import { Card, Col, Row } from 'antd'\nimport React, { Component } from 'react'\nimport DockerRegistries from './DockerRegistries'\nimport Nodes from './Nodes'\n\nexport default class Cluster extends Component {\n    render() {\n        return (\n            <div>\n                <Row justify=\"center\">\n                    <Col lg={{ span: 20 }} xs={{ span: 23 }}>\n                        <Card title=\"Configuración del registro de Docker\">\n                            <DockerRegistries />\n                        </Card>\n                    </Col>\n                </Row>\n                <div style={{ height: 35 }} />\n                <Row justify=\"center\">\n                    <Col lg={{ span: 20 }} xs={{ span: 23 }}>\n                        <Card title=\"Nodos\">\n                            <Nodes />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n    componentDidMount() {}\n}\n","import { CloudDownloadOutlined } from '@ant-design/icons'\nimport { Button, message, Row } from 'antd'\nimport React from 'react'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\n\nexport default class BackupCreator extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    {\n        isLoading: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isLoading: false,\n        }\n    }\n\n    onCreateBackupClicked() {\n        const self = this\n        self.setState({ isLoading: true })\n        self.apiManager\n            .createBackup()\n            .then(function (data) {\n                let link = document.createElement('a') // create 'a' element\n                link.setAttribute(\n                    'href',\n                    `${self.apiManager.getApiBaseUrl()}/downloads/?namespace=captain&downloadToken=${encodeURIComponent(\n                        data.downloadToken\n                    )}`\n                )\n                link.click()\n\n                message.success('Downloading backup started...')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        return (\n            <div>\n                <p>\n                Cree una copia de seguridad de las configuraciones de CapRover para poder\n                     hacer girar un clon de este servidor. Tenga en cuenta que su aplicación\n                     los datos (volúmenes e imágenes) no forman parte de esta copia de seguridad. Este\n                     La copia de seguridad solo incluye los detalles de configuración del servidor, como\n                     como dominios raíz, nombres de aplicaciones, certificados SSL, etc.\n                 </p>\n                 <p>\n                     Consulte los documentos para obtener más detalles sobre cómo restaurar su\n                     servidor utilizando el archivo de copia de seguridad.\n                 </p>\n                 <p>Tenga en cuenta que esto es, actualmente, una CARACTERÍSTICA EXPERIMENTAL.</p>\n                <br />\n\n                <Row justify=\"end\">\n                    <Button\n                        type=\"primary\"\n                        block={this.props.isMobile}\n                        onClick={() => this.onCreateBackupClicked()}\n                    >\n                        <span>\n                            <CloudDownloadOutlined />\n                        </span>{' '}\n                        &nbsp; Crear Backup\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import { Button, Input, message, Row } from 'antd'\nimport React from 'react'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\n\nexport default class ChangePass extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    { isLoading: boolean; old: string; new1: string; new2: string }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            old: '',\n            new1: '',\n            new2: '',\n        }\n    }\n\n    onChangePasswordClicked() {\n        const self = this\n        if (!this.state.new1) {\n            message.error('La nueva contraseña no puede estar vacía')\n            return\n        }\n\n        if (this.state.new1 !== this.state.new2) {\n            message.error('La confirmación de nuevas contraseñas no coincide')\n            return\n        }\n\n        this.setState({ isLoading: true })\n\n        this.apiManager\n            .changePass(this.state.old, this.state.new1)\n            .then(function () {\n                message.success('¡Contraseña cambiada con éxito!')\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.apiManager.getAuthToken(self.state.new1)\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        return (\n            <div>\n                Contraseña anterior\n                <Input.Password\n                    onChange={(e) => this.setState({ old: e.target.value })}\n                />\n                <div style={{ height: 20 }} />\n                <hr />\n                <div style={{ height: 20 }} />\n                Nueva contraseña\n                <Input.Password\n                    maxLength={30}\n                    onChange={(e) => this.setState({ new1: e.target.value })}\n                />\n                <div style={{ height: 20 }} />\n                Confirmar nueva contraseña\n                <Input.Password\n                    maxLength={30}\n                    onChange={(e) => this.setState({ new2: e.target.value })}\n                />\n                <div style={{ height: 40 }} />\n                <Row justify=\"end\">\n                    <Button\n                        block={this.props.isMobile}\n                        onClick={() => this.onChangePasswordClicked()}\n                        type=\"primary\"\n                    >\n                        Cambiar contraseña\n                    </Button>\n                </Row>\n            </div>\n        )\n    }\n}\n","import { Modal } from 'antd'\nimport React, { Component } from 'react'\n\nexport default class ReloadCaptainModal extends Component<\n    {\n        isRefreshTimerActivated: boolean\n    },\n    { timeToRefresh: number }\n> {\n    private hasAlreadyActivated: boolean\n    constructor(props: any) {\n        super(props)\n        this.hasAlreadyActivated = false\n        this.state = {\n            timeToRefresh: 0,\n        }\n    }\n\n    startTimer() {\n        const self = this\n        self.setState({ timeToRefresh: 60 })\n        setInterval(function () {\n            if (self.state.timeToRefresh < 2) {\n                window.location.reload(true)\n                return\n            }\n            self.setState({ timeToRefresh: self.state.timeToRefresh - 1 })\n        }, 1000)\n    }\n\n    render() {\n        const self = this\n        if (self.props.isRefreshTimerActivated && !this.hasAlreadyActivated) {\n            this.hasAlreadyActivated = true\n            setTimeout(() => self.startTimer(), 10)\n        }\n\n        return (\n            <div>\n                <Modal\n                    closable={false}\n                    footer={<div />}\n                    title=\"Update Process Started\"\n                    visible={self.state.timeToRefresh > 0}\n                >\n                    <div>\n                        {self.props.children}\n                        <p>\n                            <b>Time to Refresh: </b>\n                            {this.state.timeToRefresh}\n                        </p>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import { CloudDownloadOutlined } from '@ant-design/icons'\nimport { Alert, Button, Row } from 'antd'\nimport React from 'react'\nimport { IVersionInfo } from '../../models/IVersionInfo'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport ReloadCaptainModal from './ReloadCaptainModal'\n\nexport default class CheckUpdate extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    {\n        versionInfo: IVersionInfo | undefined\n        isRefreshTimerActivated: boolean\n        isLoading: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            versionInfo: undefined,\n            isRefreshTimerActivated: false,\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        self.setState({ isLoading: true })\n        self.apiManager\n            .getVersionInfo()\n            .then(function (data) {\n                self.setState({ versionInfo: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    onPerformUpdateClicked() {\n        const self = this\n        const versionInfo = this.state.versionInfo\n        self.setState({ isLoading: true })\n        self.apiManager\n            .performUpdate(versionInfo!.latestVersion)\n            .then(function () {\n                self.setState({ isRefreshTimerActivated: true })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        const versionInfo = this.state.versionInfo\n\n        if (!versionInfo) {\n            return <ErrorRetry />\n        }\n\n        return (\n            <div>\n                <p>\n                Spacecloud permite instalar actualizaciones en el lugar. Sin embargo,\n                     Siempre lea los registros de cambios antes de actualizar su CapRover.\n                     Puede haber cambios importantes que debe tener en cuenta\n                     de. La actualización suele tardar unos 60 segundos y su\n                     CapRover puede dejar de responder hasta que finalice el proceso de actualización.\n                     acabado. Sus aplicaciones seguirán siendo funcionales y receptivas\n                     durante este tiempo, excepto por un período muy corto de 10\n                     segundos o menos.\n                </p>\n                <br />\n                <p>\n                    <b>Versión actual</b>: {versionInfo.currentVersion}\n                </p>\n                <p>\n                    <b>Última versión estable</b>: {versionInfo.latestVersion}\n                </p>\n                <div>\n                    <p\n                        className={\n                            versionInfo.changeLogMessage\n                                ? 'pre-line-content'\n                                : 'hide-on-demand'\n                        }\n                    >\n                        {versionInfo.changeLogMessage}\n                    </p>\n                </div>\n                <div className={versionInfo.canUpdate ? '' : 'hide-on-demand'}>\n                    <Row justify=\"end\">\n                        <Button\n                            type=\"primary\"\n                            block={this.props.isMobile}\n                            onClick={() => this.onPerformUpdateClicked()}\n                        >\n                            <span>\n                                <CloudDownloadOutlined />\n                            </span>{' '}\n                            &nbsp; Instalar actualización\n                        </Button>\n                    </Row>\n                </div>\n\n                <div className={!versionInfo.canUpdate ? '' : 'hide-on-demand'}>\n                    <Alert\n                        message=\"Tu Spacecloud tiene la última versión.\"\n                        type=\"info\"\n                    />\n                </div>\n\n                <ReloadCaptainModal\n                    isRefreshTimerActivated={self.state.isRefreshTimerActivated}\n                >\n                    <div>\n                        <p>\n                        La actualización tarda aproximadamente un minuto en completarse dependiendo de\n                             la velocidad de conexión de su servidor.\n                         </p>\n                         <p>\n                             Su tablero CapRover no funciona durante el\n                             actualizar. Espere hasta que esta página se actualice\n                             automáticamente.\n                         </p>\n                         <p>\n                             Es posible que vea un error de nginx brevemente después de la\n                             actualizar. Pero se arreglará solo en unos segundos.\n                         </p>\n                        <br />\n                        <br />\n                    </div>\n                </ReloadCaptainModal>\n            </div>\n        )\n    }\n}\n","import { Card, Checkbox, Table } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport React, { Component } from 'react'\nimport { IUnusedImage } from './DiskCleanup'\n\nexport default class UnusedImagesTable extends Component<{\n    isMobile: boolean\n    unusedImages: IUnusedImage[]\n    selectedImagesForDelete: string[]\n    updateModel: (selectedIds: string[]) => void\n}> {\n    getCols(): ColumnProps<{ imageName: string; imageId: string }>[] {\n        const columns = [\n            {\n                title: 'Image ID',\n                dataIndex: 'imageId' as 'imageId',\n                render: (imageId: string) => {\n                    imageId = imageId || ''\n                    return (\n                        <div style={{ width: 150, fontSize: '90%' }}>\n                            {imageId.substr(0, Math.min(imageId.length, 25))}...\n                        </div>\n                    )\n                },\n            },\n            {\n                title: 'Associated Tags',\n                dataIndex: 'imageName' as 'imageName',\n                render: (imageName: string) => {\n                    imageName = imageName || ''\n                    return (\n                        <div\n                            style={{ whiteSpace: 'pre-line', fontSize: '90%' }}\n                        >\n                            {imageName}\n                        </div>\n                    )\n                },\n            },\n        ]\n        return columns\n    }\n\n    getData() {\n        const data: { key: string; imageName: string; imageId: string }[] = []\n        for (let index = 0; index < this.props.unusedImages.length; index++) {\n            const element = this.props.unusedImages[index]\n            data.push({\n                key: element.id,\n                imageId: element.id,\n                imageName: element.tags.join('\\n'),\n            })\n        }\n        return data\n    }\n\n    getRowSelection() {\n        // rowSelection object indicates the need for row selection\n        const self = this\n        const rowSelection = {\n            onChange: (selectedRowKeys: any, selectedRows: any[]) => {\n                console.log(selectedRowKeys)\n                self.props.updateModel(selectedRowKeys)\n            },\n            getCheckboxProps: (record: any) => ({\n                disabled: false, // Column configuration not to be checked\n                name: record.imageId,\n            }),\n        }\n        return rowSelection\n    }\n\n    render() {\n        if (this.props.isMobile) {\n            return this.getData().map(({ key, imageId, imageName }, i) => (\n                <Card\n                    type=\"inner\"\n                    key={key}\n                    style={{ marginBottom: 8, wordWrap: 'break-word' }}\n                    title={\n                        <Checkbox\n                            checked={\n                                this.props.selectedImagesForDelete.indexOf(\n                                    imageId\n                                ) > -1\n                            }\n                            onChange={(e: any) => {\n                                const selectedId = [\n                                    ...this.props.selectedImagesForDelete,\n                                ]\n                                const imageIndex = selectedId.indexOf(imageId)\n                                if (imageIndex > -1) {\n                                    selectedId.splice(imageIndex, 1)\n                                } else {\n                                    selectedId.push(imageId)\n                                }\n                                this.props.updateModel(selectedId)\n                            }}\n                        >\n                            {imageName ? imageName.split('\\n')[0] : 'No Name'}\n                        </Checkbox>\n                    }\n                >\n                    <div>\n                        <b>Image ID:</b> {imageId}\n                    </div>\n                    <div>\n                        <b>Associated Tag:</b> {imageName || 'n/a'}\n                    </div>\n                </Card>\n            ))\n        }\n        return (\n            <div>\n                <Table\n                    pagination={false}\n                    rowSelection={this.getRowSelection()}\n                    columns={this.getCols()}\n                    dataSource={this.getData()}\n                />\n            </div>\n        )\n    }\n}\n","import { DeleteOutlined, SyncOutlined } from '@ant-design/icons'\nimport { Button, Col, Input, message, Row, Tooltip } from 'antd'\nimport React from 'react'\nimport Toaster from '../../utils/Toaster'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport UnusedImagesTable from './UnusedImagesTable'\n\nexport interface IUnusedImage {\n    tags: string[]\n    id: string\n}\n\nexport default class DiskCleanup extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    {\n        isLoading: boolean\n        mostRecentLimit: number\n        unusedImages?: IUnusedImage[]\n        selectedImagesForDelete: string[]\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            mostRecentLimit: 2,\n            selectedImagesForDelete: [],\n            unusedImages: [],\n        }\n    }\n\n    onRemoveImagesClicked() {\n        const self = this\n        this.setState({ isLoading: true })\n        this.apiManager\n            .deleteImages(this.state.selectedImagesForDelete)\n            .then(function () {\n                message.success('Unused images are deleted.')\n                self.refreshOldImagesList()\n            })\n            .catch(\n                Toaster.createCatcher(function () {\n                    self.setState({ isLoading: false })\n                })\n            )\n    }\n\n    refreshOldImagesList() {\n        const self = this\n        this.setState({ unusedImages: undefined, isLoading: true })\n        return this.apiManager\n            .getUnusedImages(this.state.mostRecentLimit)\n            .then(function (data) {\n                self.setState({ unusedImages: data.unusedImages })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        const unusedImages = this.state.unusedImages\n\n        if (!unusedImages) {\n            return <ErrorRetry />\n        }\n\n        const hasSelectedImagesForRemoval = !!(\n            self.state.selectedImagesForDelete &&\n            self.state.selectedImagesForDelete.length\n        )\n\n        return (\n            <div>\n                <div>\n                    <p>\n                    Cada vez que implementa una nueva compilación, Docker crea una nueva\n                        imagen para ti. Por lo general, una gran parte de esta imagen es\n                        compartida entre la versión antigua y la nueva versión, pero\n                        se agrega una pequeña porción a su disco con cada compilación. Tú\n                        Puede leer más sobre la limpieza del disco en los documentos, pero como\n                        interfaz simple, este widget le da la capacidad de\n                        realizar limpiezas de imágenes a pedido.\n                    </p>\n                    <p>\n                        Puede realizar esta acción, después de cada implementación. Pero es\n                        normalmente no se necesita con esa frecuencia. para tipico\n                        proyectos medianos, se recomienda realizar esto\n                        limpieza después de cada ~ 20 compilaciones.\n                    </p>\n                    <p>\n                        Con parámetro por defecto, mantiene los dos últimos recientes\n                        compilaciones de todas las aplicaciones actuales y crea una lista de imágenes\n                        que se pueden eliminar (haciendo clic en el botón Obtener lista).\n                        Puede seleccionar las imágenes que desea eliminar y hacer clic en\n                        en el botón Eliminar imágenes. Podrías notar que algunos\n                        las imágenes no se eliminan aunque haya hecho clic en Eliminar\n                        Imágenes, significa que están siendo directa o indirectamente\n                        en uso por Docker. Un ejemplo común para el uso indirecto es\n                        una imagen cuya imagen secundaria está siendo utilizada por un ser vivo\n                        envase.\n                    </p>\n\n                    <br />\n                </div>\n\n                <Row>\n                    <Col span={12}>\n                        <Tooltip title=\"Por ejemplo, ingrese 2 para excluir las 2 compilaciones más recientes durante la limpieza\">\n                            <Input\n                                addonBefore=\"Mantener el más reciente\"\n                                type=\"number\"\n                                value={this.state.mostRecentLimit + ''}\n                                onChange={(e) => {\n                                    this.setState({\n                                        mostRecentLimit: Number(e.target.value),\n                                    })\n                                }}\n                            />\n                        </Tooltip>\n                    </Col>\n                    <Col span={12}>\n                        <Row justify=\"end\">\n                            <Button\n                                type=\"default\"\n                                onClick={() => this.refreshOldImagesList()}\n                            >\n                                <span>\n                                    <SyncOutlined />\n                                </span>{' '}\n                                &nbsp; Obtener lista\n                            </Button>\n                        </Row>\n                    </Col>\n                </Row>\n\n                <div\n                    className={unusedImages.length > 0 ? '' : 'hide-on-demand'}\n                >\n                    <div style={{ height: 20 }} />\n                    <Row justify=\"end\">\n                        <Tooltip\n                            title={\n                                hasSelectedImagesForRemoval\n                                    ? ''\n                                    : 'Seleccione las imágenes que desea eliminar. Puede seleccionar todo desde la fila superior.'\n                            }\n                        >\n                            <Button\n                                disabled={!hasSelectedImagesForRemoval}\n                                type=\"primary\"\n                                block={this.props.isMobile}\n                                onClick={() => {\n                                    self.onRemoveImagesClicked()\n                                }}\n                            >\n                                <span>\n                                    <DeleteOutlined />{' '}\n                                </span>{' '}\n                                &nbsp; Eliminar imágenes no utilizadas\n                            </Button>\n                        </Tooltip>\n                    </Row>\n                    <div style={{ height: 20 }} />\n                    <div>\n                    <b>NOTA: </b> Las imágenes que se utilizan (directa o\n                         indirectamente) no se eliminarán incluso si los selecciona.\n                    </div>\n                    <div style={{ height: 20 }} />\n                    <UnusedImagesTable\n                        unusedImages={unusedImages}\n                        isMobile={this.props.isMobile}\n                        selectedImagesForDelete={\n                            this.state.selectedImagesForDelete\n                        }\n                        updateModel={(selectedImagesForDelete) =>\n                            this.setState({ selectedImagesForDelete })\n                        }\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n","import { SyncOutlined } from '@ant-design/icons'\nimport { Button, Input, Row } from 'antd'\nimport Toaster from '../../utils/Toaster'\nimport Utils from '../../utils/Utils'\nimport ApiComponent from '../global/ApiComponent'\nimport CenteredSpinner from '../global/CenteredSpinner'\nimport ErrorRetry from '../global/ErrorRetry'\nimport ReloadCaptainModal from './ReloadCaptainModal'\n\nexport default class NginxConfig extends ApiComponent<\n    {\n        isMobile: boolean\n    },\n    {\n        nginxConfig: any\n        isLoading: boolean\n        isRefreshTimerActivated: boolean\n    }\n> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            nginxConfig: undefined,\n            isRefreshTimerActivated: false,\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        self.setState({ isLoading: true })\n        this.apiManager\n            .getNginxConfig()\n            .then(function (data) {\n                self.setState({ nginxConfig: data })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    onLoadDefaultNginxConfigClicked() {\n        const newApiData = Utils.copyObject(this.state.nginxConfig)\n        newApiData.baseConfig.customValue = newApiData.baseConfig.byDefault\n        newApiData.captainConfig.customValue =\n            newApiData.captainConfig.byDefault\n        this.setState({ nginxConfig: newApiData })\n    }\n\n    onUpdateNginxConfigClicked() {\n        const self = this\n        const newApiData = Utils.copyObject(this.state.nginxConfig)\n        self.setState({ isLoading: true })\n\n        this.apiManager\n            .setNginxConfig(\n                newApiData.baseConfig.customValue,\n                newApiData.captainConfig.customValue\n            )\n            .then(function () {\n                self.setState({ isRefreshTimerActivated: true })\n            })\n            .catch(Toaster.createCatcher())\n            .then(function () {\n                self.setState({ isLoading: false })\n            })\n    }\n\n    render() {\n        const self = this\n        if (self.state.isLoading) {\n            return <CenteredSpinner />\n        }\n\n        const nginxConfig = this.state.nginxConfig\n\n        if (!nginxConfig) {\n            return <ErrorRetry />\n        }\n\n        return (\n            <div>\n                <ReloadCaptainModal\n                    isRefreshTimerActivated={self.state.isRefreshTimerActivated}\n                >\n                    <div>\n                    Nginx se actualizó con éxito, CapRover se reiniciará en\n                         30 segundos.{' '}\n                         <b>\n                             Por favor espere hasta que la página sea automáticamente\n                             renovado\n                        </b>\n                        <br />\n                        <br />\n                    </div>\n                </ReloadCaptainModal>{' '}\n                <p>\n                Spacecloud te permite establecer configuraciones personalizadas para su\n                     enrutador nginx. Esto permitirá un alto nivel de personalización en\n                     términos de almacenamiento en caché, enrutamiento especial, http2, etc.\n                 </p>\n                 <p>\n                     Tenga en cuenta que las plantillas se construyen utilizando el patrón de plantilla EJS. Hacer\n                     no cambiar las áreas entre <code>&lt;%</code> y{' '}\n                     <code>%&gt;</code> a menos que realmente sepa lo que está haciendo.\n                 </p>\n                 <br />\n                 <p>\n                     <b>Ubicación de configuración base en contenedor nginx</b>:\n                     /etc/nginx/nginx.conf\n                </p>\n                <div\n                    className={\n                        nginxConfig.baseConfig.customValue ||\n                        nginxConfig.captainConfig.customValue\n                            ? ''\n                            : 'hide-on-demand'\n                    }\n                >\n                    <Input.TextArea\n                        className=\"code-input\"\n                        placeholder=\"\"\n                        rows={17}\n                        value={nginxConfig.baseConfig.customValue}\n                        onChange={(e) => {\n                            const newApiData = Utils.copyObject(nginxConfig)\n                            newApiData.baseConfig.customValue = e.target.value\n                            self.setState({ nginxConfig: newApiData })\n                        }}\n                    />\n                    <div style={{ height: 40 }} />\n                </div>\n                <p>\n                    <b>Ubicación de configuración de CapRover en contenedor nginx</b>:\n                    /etc/nginx/conf.d/captain-root.conf\n                </p>\n                <div\n                    className={\n                        nginxConfig.baseConfig.customValue ||\n                        nginxConfig.captainConfig.customValue\n                            ? ''\n                            : 'hide-on-demand'\n                    }\n                >\n                    <Input.TextArea\n                        className=\"code-input\"\n                        placeholder=\"\"\n                        rows={17}\n                        value={nginxConfig.captainConfig.customValue}\n                        onChange={(e) => {\n                            const newApiData = Utils.copyObject(nginxConfig)\n                            newApiData.captainConfig.customValue =\n                                e.target.value\n                            self.setState({ nginxConfig: newApiData })\n                        }}\n                    />\n                </div>\n                <div style={{ height: 40 }} />\n                <div>\n                    <Row justify=\"end\">\n                        <Button\n                            type=\"default\"\n                            block={this.props.isMobile}\n                            onClick={() =>\n                                self.onLoadDefaultNginxConfigClicked()\n                            }\n                        >\n                            Cargar predeterminado y editar\n                        </Button>\n                    </Row>\n\n                    <div style={{ height: 20 }} />\n\n                    <Row justify=\"end\">\n                        <Button\n                            type=\"primary\"\n                            block={this.props.isMobile}\n                            onClick={() => self.onUpdateNginxConfigClicked()}\n                        >\n                            <span>\n                                <SyncOutlined />\n                            </span>{' '}\n                            &nbsp; Guardar y actualizar\n                        </Button>\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n","import { Card, Col, Row } from 'antd'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { IMobileComponent } from '../../models/ContainerProps'\nimport BackupCreator from './BackupCreator'\nimport ChangePass from './ChangePass'\nimport CheckUpdate from './CheckUpdate'\nimport DiskCleanup from './DiskCleanup'\nimport NginxConfig from './NginxConfig'\n\nclass Settings extends Component<\n    {\n        isMobile: boolean\n    },\n    {}\n> {\n    render() {\n        return (\n            <div>\n                <Row justify=\"center\" gutter={20}>\n                    <Col\n                        style={{ marginBottom: 20 }}\n                        lg={{ span: 10 }}\n                        xs={{ span: 23 }}\n                    >\n                        <Card\n                            style={{ height: '100%' }}\n                            title=\"Buscar actualizaciones\"\n                        >\n                            <CheckUpdate isMobile={this.props.isMobile} />\n                        </Card>\n                    </Col>\n                    <Col\n                        style={{ marginBottom: 20 }}\n                        lg={{ span: 10 }}\n                        xs={{ span: 23 }}\n                    >\n                        <Card style={{ height: '100%' }} title=\"Backup\">\n                            <BackupCreator isMobile={this.props.isMobile} />\n                        </Card>\n                    </Col>\n                    <Col\n                        style={{ marginBottom: 20 }}\n                        lg={{ span: 20 }}\n                        xs={{ span: 23 }}\n                    >\n                        <Card\n                            style={{ height: '100%' }}\n                            title=\"Configuraciones de NGINX\"\n                        >\n                            <NginxConfig isMobile={this.props.isMobile} />\n                        </Card>\n                    </Col>\n                    <Col\n                        style={{ marginBottom: 20 }}\n                        lg={{ span: 6 }}\n                        xs={{ span: 23 }}\n                    >\n                        <Card\n                            style={{ height: '100%' }}\n                            title=\"Cambiar contraseña\"\n                        >\n                            <ChangePass isMobile={this.props.isMobile} />\n                        </Card>\n                    </Col>\n                    <Col\n                        style={{ marginBottom: 20 }}\n                        lg={{ span: 14 }}\n                        xs={{ span: 23 }}\n                    >\n                        <Card style={{ height: '100%' }} title=\"Limpiar disco\">\n                            <DiskCleanup isMobile={this.props.isMobile} />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect<IMobileComponent, any, any>(\n    mapStateToProps,\n    undefined\n)(Settings)\n","import {\n    BarsOutlined,\n    ClusterOutlined,\n    CodeOutlined,\n    DashboardOutlined,\n    FileTextOutlined,\n    GiftTwoTone,\n    GithubOutlined,\n    LaptopOutlined,\n    LogoutOutlined,\n    SettingOutlined\n} from '@ant-design/icons'\nimport { Button, Col, Layout, Menu, Row } from 'antd'\nimport React, { Fragment, RefObject } from 'react'\nimport { connect } from 'react-redux'\nimport { Route, RouteComponentProps, Switch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport ApiManager from '../api/ApiManager'\nimport { IVersionInfo } from '../models/IVersionInfo'\nimport * as GlobalActions from '../redux/actions/GlobalActions'\nimport StorageHelper from '../utils/StorageHelper'\nimport AppDetails from './apps/appDetails/AppDetails'\nimport Apps from './apps/Apps'\nimport OneClickAppSelector from './apps/oneclick/selector/OneClickAppSelector'\nimport OneClickAppConfigPage from './apps/oneclick/variables/OneClickAppConfigPage'\nimport Dashboard from './Dashboard'\nimport ApiComponent from './global/ApiComponent'\nimport ClickableLink from './global/ClickableLink'\nimport DarkModeSwitch from './global/DarkModeSwitch'\nimport NewTabLink from './global/NewTabLink'\nimport LoggedInCatchAll from './LoggedInCatchAll'\nimport Monitoring from './monitoring/Monitoring'\nimport Cluster from './nodes/Cluster'\nimport Settings from './settings/Settings'\n\n\nconst { Header, Content, Sider } = Layout\n\nconst MENU_ITEMS = [\n    {\n        key: 'dashboard',\n        name: 'Dashboard',\n        icon: <LaptopOutlined />,\n    },\n    {\n        key: 'apps',\n        name: 'Apps',\n        icon: <CodeOutlined />,\n    },\n    {\n        key: 'monitoring',\n        name: 'Monitorizción',\n        icon: <DashboardOutlined />,\n    },\n    {\n        key: 'cluster',\n        name: 'Cluster',\n        icon: <ClusterOutlined />,\n    },\n    {\n        key: 'settings',\n        name: 'Ajustes',\n        icon: <SettingOutlined />,\n    },\n]\n\ninterface RootPageInterface extends RouteComponentProps<any> {\n    rootElementKey: string\n    emitSizeChanged: () => void\n    isMobile: boolean\n}\n\nclass PageRoot extends ApiComponent<\n    RootPageInterface,\n    {\n        versionInfo: IVersionInfo | undefined\n        collapsed: boolean\n    }\n> {\n    private mainContainer: RefObject<HTMLDivElement>\n\n    constructor(props: any) {\n        super(props)\n        this.mainContainer = React.createRef()\n        this.state = {\n            versionInfo: undefined,\n            collapsed: false,\n        }\n    }\n\n    updateDimensions = () => this.props.emitSizeChanged()\n\n    componentWillUnmount() {\n        // @ts-ignore\n        if (super.componentWillUnmount) super.componentWillUnmount()\n        this.updateDimensions()\n        window.removeEventListener('resize', this.updateDimensions)\n    }\n\n    componentDidUpdate(prevProps: any) {\n        // Typical usage (don't forget to compare props):\n        if (\n            this.props.location.pathname !== prevProps.location.pathname &&\n            this.props.isMobile\n        ) {\n            this.setState({ collapsed: true })\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        this.updateDimensions()\n\n        window.addEventListener('resize', this.updateDimensions)\n\n        if (!ApiManager.isLoggedIn()) {\n            this.goToLogin()\n        } else {\n            this.apiManager\n                .getVersionInfo()\n                .then(function (data) {\n                    self.setState({ versionInfo: data })\n                })\n                .catch((err) => {\n                    // ignore error\n                })\n            this.setState({\n                collapsed:\n                    StorageHelper.getSiderCollapsedStateFromLocalStorage(),\n            })\n        }\n    }\n\n    goToLogin() {\n        this.props.history.push('/login')\n    }\n\n    createUpdateAvailableIfNeeded() {\n        const self = this\n\n        if (!self.state.versionInfo || !self.state.versionInfo.canUpdate) {\n            return undefined\n        }\n\n        return (\n            <Fragment>\n                <ClickableLink\n                    onLinkClicked={() => self.props.history.push('/settings')}\n                >\n                    <GiftTwoTone\n                        style={{\n                            marginLeft: 50,\n                        }}\n                    />\n                    <GiftTwoTone\n                        style={{\n                            marginRight: 10,\n                            marginLeft: 3,\n                        }}\n                    />\n                    Update Available!\n                    <GiftTwoTone\n                        style={{\n                            marginLeft: 10,\n                        }}\n                    />\n                    <GiftTwoTone\n                        style={{\n                            marginLeft: 3,\n                        }}\n                    />\n                </ClickableLink>\n            </Fragment>\n        )\n    }\n\n    toggleSider = () => {\n        StorageHelper.setSiderCollapsedStateInLocalStorage(\n            !this.state.collapsed\n        )\n        this.setState({ collapsed: !this.state.collapsed })\n    }\n\n    render() {\n        const self = this\n        return (\n            <Layout className=\"full-screen\">\n                <Header\n                    className=\"navbar\"\n                    style={{\n                        padding: `0 ${this.props.isMobile ? 15 : 50}px`,\n                    }}\n                >\n                    <div>\n                        <Row>\n                            {this.props.isMobile && (\n                                <Col span={4}>\n                                    <Button\n                                        ghost\n                                        icon={<BarsOutlined style={{ color: \"black\", fontWeight: 600}} />}\n                                        onClick={this.toggleSider}\n                                    />\n                                </Col>\n                            )}\n                            {(this.props.isMobile &&\n                                self.createUpdateAvailableIfNeeded()) || (\n                                <Col lg={{ span: 12 }} xs={{ span: 20 }}>\n                                    <div>\n                                            <img\n                                                alt=\"logo\"\n                                                src=\"/icon-512x512.png\"\n                                                style={{\n                                                    height: 45,\n                                                    marginRight: 10,\n                                                }}\n                                            />\n                                            {self.createUpdateAvailableIfNeeded()}\n\n                                    </div>\n                                </Col>\n                            )}\n                            {!self.props.isMobile && (\n                                <Col span={12}>\n                                    <Row justify=\"end\">\n                                        <NewTabLink url=\"https://github.com/itzvicen\">\n                                            <span style={{ marginRight: 20 }} className='links-nav'>\n                                                GitHub\n                                            </span>\n                                        </NewTabLink>\n\n                                        <span className='links-nav'\n                                            style={{\n                                                marginRight: 70,\n                                            }}\n                                        >\n                                            <NewTabLink url=\"https://spacecloud.live\">\n                                                Inicio\n                                            </NewTabLink>\n                                        </span>\n                                        <span\n                                            style={{\n                                                marginRight: 70,\n                                            }}\n                                        >\n                                            <DarkModeSwitch />\n                                        </span>\n                                        <span>\n                                            <span\n                                                style={{\n                                                    border: '1px solid #1b8ad3',\n                                                    borderRadius: 4,\n                                                    padding: 8,\n                                                }}\n                                            >\n                                                <ClickableLink\n                                                    onLinkClicked={() => {\n                                                        self.apiManager.setAuthToken(\n                                                            ''\n                                                        )\n                                                        self.goToLogin()\n                                                    }}\n                                                >\n                                                    Salir <LogoutOutlined />\n                                                </ClickableLink>\n                                            </span>\n                                        </span>\n                                    </Row>\n                                </Col>\n                            )}\n                        </Row>\n                    </div>\n                </Header>\n\n                <Layout>\n                    <Sider\n                        breakpoint=\"lg\"\n                        trigger={this.props.isMobile && undefined}\n                        collapsible\n                        collapsed={this.state.collapsed}\n                        width={200}\n                        collapsedWidth={self.props.isMobile ? 0 : 80}\n                        style={{ zIndex: 2 }}\n                        onCollapse={this.toggleSider}\n                    >\n                        <Menu\n                            selectedKeys={[\n                                this.props.location.pathname.substring(1),\n                            ]}\n                            theme=\"light\"\n                            mode=\"inline\"\n                            defaultSelectedKeys={['dashboard']}\n                            style={{ height: '100%', borderRight: 0 }}\n                        >\n                            {MENU_ITEMS.map((item) => (\n                                <Menu.Item key={item.key} className=\"aside-links\">\n                                    <Link\n                                        to={`/${item.key}`}\n                                        className=\"nav-text\"\n                                    >\n                                        {item.icon}\n                                        <span>{item.name}</span>\n                                    </Link>\n                                </Menu.Item>\n                            ))}\n\n                            {this.props.isMobile && (\n                                <Fragment>\n                                    <div\n                                        style={{\n                                            backgroundColor:\n                                                'rgba(0, 0, 0, 0.85)',\n                                            height: 1,\n                                            width: '80%',\n                                            margin: '15px auto',\n                                        }}\n                                    />\n                                    <div\n                                        className=\"ant-menu-item\"\n                                        role=\"menuitem\"\n                                        style={{ paddingLeft: 24}}\n                                    >\n                                        <NewTabLink url=\"https://github.com/itzvicen\">\n                                            <GithubOutlined style={{paddingRight: 10}}/>\n                                             GitHub\n                                        </NewTabLink>\n                                    </div>\n\n                                    <div\n                                        className=\"ant-menu-item\"\n                                        role=\"menuitem\"\n                                        style={{ paddingLeft: 24 }}\n                                    >\n                                        <NewTabLink url=\"https://spacecloud.live\">\n                                            <FileTextOutlined style={{paddingRight: 10}}/>\n                                             Inicio\n                                        </NewTabLink>\n                                    </div>\n\n                                    <div\n                                        className=\"ant-menu-item\"\n                                        role=\"menuitem\"\n                                        style={{ paddingLeft: 24 }}\n                                    >\n                                        <ClickableLink\n                                            onLinkClicked={() => {\n                                                this.apiManager.setAuthToken('')\n                                                this.goToLogin()\n                                            }}\n                                        >\n                                            {' '}\n                                            <LogoutOutlined style={{paddingRight: 10}}/>\n                                             Salir\n                                        </ClickableLink>\n                                    </div>\n                                </Fragment>\n                            )}\n                        </Menu>\n                    </Sider>\n                    <Content>\n                        <div\n                            key={self.props.rootElementKey}\n                            ref={self.mainContainer}\n                            style={{\n                                paddingTop: 12,\n                                paddingBottom: 36,\n                                height: '100%',\n                                overflowY: 'scroll',\n                                marginRight: self.state.collapsed\n                                    ? 0\n                                    : self.props.isMobile\n                                    ? -200\n                                    : 0,\n                                transition: 'margin-right 0.3s ease',\n                            }}\n                            id=\"main-content-layout\"\n                        >\n                            <Switch>\n                                <Route\n                                    path=\"/dashboard/\"\n                                    component={Dashboard}\n                                />\n                                <Route\n                                    path=\"/apps/details/:appName\"\n                                    render={(props) => (\n                                        <AppDetails\n                                            {...props}\n                                            mainContainer={self.mainContainer}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path=\"/apps/oneclick/:appName\"\n                                    component={OneClickAppConfigPage}\n                                />\n                                <Route\n                                    path=\"/apps/oneclick\"\n                                    component={OneClickAppSelector}\n                                />\n                                <Route path=\"/apps/\" component={Apps} />\n                                <Route\n                                    path=\"/monitoring/\"\n                                    component={Monitoring}\n                                />\n                                <Route path=\"/cluster/\" component={Cluster} />\n                                <Route path=\"/settings/\" component={Settings} />\n                                <Route path=\"/\" component={LoggedInCatchAll} />\n                            </Switch>\n                        </div>\n                    </Content>\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        rootElementKey: state.globalReducer.rootElementKey,\n        isMobile: state.globalReducer.isMobile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    emitSizeChanged: GlobalActions.emitSizeChanged,\n})(PageRoot)\n","import { combineReducers } from 'redux'\nimport DefaultRegistryReducer from './DefaultRegistryReducer'\nimport GlobalReducer from './GlobalReducer'\n\nconst rootReducer = combineReducers({\n    registryReducer: DefaultRegistryReducer,\n    globalReducer: GlobalReducer,\n})\n\nexport default rootReducer\n","import { DEFAULT_REGISTRY_CHANGED } from '../actions/DefaultRegistryActions'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (state = {}, action: { payload: any; type: string }) {\n    switch (action.type) {\n        case DEFAULT_REGISTRY_CHANGED:\n            return { ...state, defaultRegistryId: action.payload }\n        default:\n            return state\n    }\n}\n","import Utils from '../../utils/Utils'\nimport { ROOT_KEY_CHANGED, SIZE_CHANGED } from '../actions/GlobalActions'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (state = {}, action: { payload: any; type: string }) {\n    switch (action.type) {\n        case ROOT_KEY_CHANGED:\n            return { ...state, rootElementKey: Utils.generateUuidV4() }\n        case SIZE_CHANGED:\n            return { ...state, isMobile: Utils.isMobile() }\n        default:\n            return state\n    }\n}\n","import React, { Component } from 'react'\nimport {\n    ThemeSwitcherProvider,\n    useThemeSwitcher,\n} from 'react-css-theme-switcher'\nimport { Provider } from 'react-redux'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { applyMiddleware, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport Login from './containers/Login'\nimport PageRoot from './containers/PageRoot'\nimport reducers from './redux/reducers'\nimport CrashReporter from './utils/CrashReporter'\nimport StorageHelper from './utils/StorageHelper'\n\nCrashReporter.getInstance().init()\n\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore)\nconst store = createStoreWithMiddleware(reducers)\ntype AppState = {\n    isDarkMode: boolean\n}\n\nconst themes = {\n    dark: `dark-theme.css`,\n    light: `light-theme.css`,\n}\n\nconst MainComponent = () => {\n    const { status } = useThemeSwitcher()\n\n    if (status === 'loading') {\n        // Just an empty div until styles load\n        return <div></div>\n    }\n\n    return (\n        <div className=\"full-screen\">\n            <HashRouter>\n                <Switch>\n                    <Route path=\"/login/\" component={Login} />\n                    <Route path=\"/\" component={PageRoot} />\n                </Switch>\n            </HashRouter>\n        </div>\n    )\n}\n\nclass App extends Component<{}, AppState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            isDarkMode: StorageHelper.getDarkModeFromLocalStorage(),\n        }\n    }\n\n    render() {\n        return (\n            <ThemeSwitcherProvider\n                themeMap={themes}\n                defaultTheme={this.state.isDarkMode ? 'dark' : 'light'}\n                insertionPoint=\"styles-insertion-point\"\n            >\n                <Provider store={store}>\n                    <MainComponent />\n                </Provider>\n            </ThemeSwitcherProvider>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}